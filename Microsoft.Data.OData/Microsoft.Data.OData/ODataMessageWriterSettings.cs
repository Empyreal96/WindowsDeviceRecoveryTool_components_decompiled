using System;
using System.Xml;

namespace Microsoft.Data.OData
{
	// Token: 0x02000295 RID: 661
	public sealed class ODataMessageWriterSettings : ODataMessageWriterSettingsBase
	{
		// Token: 0x06001640 RID: 5696 RVA: 0x00050F1F File Offset: 0x0004F11F
		public ODataMessageWriterSettings()
		{
			this.writerBehavior = ODataWriterBehavior.DefaultBehavior;
		}

		// Token: 0x06001641 RID: 5697 RVA: 0x00050F34 File Offset: 0x0004F134
		public ODataMessageWriterSettings(ODataMessageWriterSettings other) : base(other)
		{
			ExceptionUtils.CheckArgumentNotNull<ODataMessageWriterSettings>(other, "other");
			this.acceptCharSets = other.acceptCharSets;
			this.acceptMediaTypes = other.acceptMediaTypes;
			this.BaseUri = other.BaseUri;
			this.DisableMessageStreamDisposal = other.DisableMessageStreamDisposal;
			this.format = other.format;
			this.useFormat = other.useFormat;
			this.Version = other.Version;
			this.metadataDocumentUri = other.metadataDocumentUri;
			this.atomFormatStartEntryXmlCustomizationCallback = other.atomFormatStartEntryXmlCustomizationCallback;
			this.atomFormatEndEntryXmlCustomizationCallback = other.atomFormatEndEntryXmlCustomizationCallback;
			this.JsonPCallback = other.JsonPCallback;
			this.shouldIncludeAnnotation = other.shouldIncludeAnnotation;
			this.AutoComputePayloadMetadataInJson = other.AutoComputePayloadMetadataInJson;
			this.AutoGeneratedUrlsShouldPutKeyValueInDedicatedSegment = other.AutoGeneratedUrlsShouldPutKeyValueInDedicatedSegment;
			this.alwaysUseDefaultXmlNamespaceForRootElement = other.alwaysUseDefaultXmlNamespaceForRootElement;
			this.writerBehavior = other.writerBehavior;
		}

		// Token: 0x17000477 RID: 1143
		// (get) Token: 0x06001642 RID: 5698 RVA: 0x00051013 File Offset: 0x0004F213
		// (set) Token: 0x06001643 RID: 5699 RVA: 0x0005101B File Offset: 0x0004F21B
		public ODataVersion? Version { get; set; }

		// Token: 0x17000478 RID: 1144
		// (get) Token: 0x06001644 RID: 5700 RVA: 0x00051024 File Offset: 0x0004F224
		// (set) Token: 0x06001645 RID: 5701 RVA: 0x0005102C File Offset: 0x0004F22C
		public Uri BaseUri { get; set; }

		// Token: 0x17000479 RID: 1145
		// (get) Token: 0x06001646 RID: 5702 RVA: 0x00051035 File Offset: 0x0004F235
		// (set) Token: 0x06001647 RID: 5703 RVA: 0x0005103D File Offset: 0x0004F23D
		public bool DisableMessageStreamDisposal { get; set; }

		// Token: 0x1700047A RID: 1146
		// (get) Token: 0x06001648 RID: 5704 RVA: 0x00051046 File Offset: 0x0004F246
		// (set) Token: 0x06001649 RID: 5705 RVA: 0x0005104E File Offset: 0x0004F24E
		public string JsonPCallback { get; set; }

		// Token: 0x1700047B RID: 1147
		// (get) Token: 0x0600164A RID: 5706 RVA: 0x00051057 File Offset: 0x0004F257
		// (set) Token: 0x0600164B RID: 5707 RVA: 0x0005105F File Offset: 0x0004F25F
		public bool AutoComputePayloadMetadataInJson { get; set; }

		// Token: 0x1700047C RID: 1148
		// (get) Token: 0x0600164C RID: 5708 RVA: 0x00051068 File Offset: 0x0004F268
		// (set) Token: 0x0600164D RID: 5709 RVA: 0x00051070 File Offset: 0x0004F270
		public bool? AutoGeneratedUrlsShouldPutKeyValueInDedicatedSegment { get; set; }

		// Token: 0x1700047D RID: 1149
		// (get) Token: 0x0600164E RID: 5710 RVA: 0x00051079 File Offset: 0x0004F279
		internal bool AlwaysUseDefaultXmlNamespaceForRootElement
		{
			get
			{
				return this.alwaysUseDefaultXmlNamespaceForRootElement;
			}
		}

		// Token: 0x1700047E RID: 1150
		// (get) Token: 0x0600164F RID: 5711 RVA: 0x00051081 File Offset: 0x0004F281
		internal string AcceptableMediaTypes
		{
			get
			{
				return this.acceptMediaTypes;
			}
		}

		// Token: 0x1700047F RID: 1151
		// (get) Token: 0x06001650 RID: 5712 RVA: 0x00051089 File Offset: 0x0004F289
		internal string AcceptableCharsets
		{
			get
			{
				return this.acceptCharSets;
			}
		}

		// Token: 0x17000480 RID: 1152
		// (get) Token: 0x06001651 RID: 5713 RVA: 0x00051091 File Offset: 0x0004F291
		internal ODataWriterBehavior WriterBehavior
		{
			get
			{
				return this.writerBehavior;
			}
		}

		// Token: 0x17000481 RID: 1153
		// (get) Token: 0x06001652 RID: 5714 RVA: 0x00051099 File Offset: 0x0004F299
		internal ODataFormat Format
		{
			get
			{
				return this.format;
			}
		}

		// Token: 0x17000482 RID: 1154
		// (get) Token: 0x06001653 RID: 5715 RVA: 0x000510A1 File Offset: 0x0004F2A1
		internal bool? UseFormat
		{
			get
			{
				return this.useFormat;
			}
		}

		// Token: 0x17000483 RID: 1155
		// (get) Token: 0x06001654 RID: 5716 RVA: 0x000510A9 File Offset: 0x0004F2A9
		internal Func<ODataEntry, XmlWriter, XmlWriter> AtomStartEntryXmlCustomizationCallback
		{
			get
			{
				return this.atomFormatStartEntryXmlCustomizationCallback;
			}
		}

		// Token: 0x17000484 RID: 1156
		// (get) Token: 0x06001655 RID: 5717 RVA: 0x000510B1 File Offset: 0x0004F2B1
		internal Action<ODataEntry, XmlWriter, XmlWriter> AtomEndEntryXmlCustomizationCallback
		{
			get
			{
				return this.atomFormatEndEntryXmlCustomizationCallback;
			}
		}

		// Token: 0x17000485 RID: 1157
		// (get) Token: 0x06001656 RID: 5718 RVA: 0x000510B9 File Offset: 0x0004F2B9
		internal ODataMetadataDocumentUri MetadataDocumentUri
		{
			get
			{
				return this.metadataDocumentUri;
			}
		}

		// Token: 0x17000486 RID: 1158
		// (get) Token: 0x06001657 RID: 5719 RVA: 0x000510C1 File Offset: 0x0004F2C1
		// (set) Token: 0x06001658 RID: 5720 RVA: 0x000510C9 File Offset: 0x0004F2C9
		internal Func<string, bool> ShouldIncludeAnnotation
		{
			get
			{
				return this.shouldIncludeAnnotation;
			}
			set
			{
				this.shouldIncludeAnnotation = value;
			}
		}

		// Token: 0x06001659 RID: 5721 RVA: 0x000510D2 File Offset: 0x0004F2D2
		public void SetContentType(string acceptableMediaTypes, string acceptableCharSets)
		{
			this.acceptMediaTypes = acceptableMediaTypes;
			this.acceptCharSets = acceptableCharSets;
			this.format = null;
			this.useFormat = new bool?(false);
		}

		// Token: 0x0600165A RID: 5722 RVA: 0x000510F5 File Offset: 0x0004F2F5
		public void SetContentType(ODataFormat payloadFormat)
		{
			this.acceptCharSets = null;
			this.acceptMediaTypes = null;
			this.format = payloadFormat;
			this.useFormat = new bool?(true);
		}

		// Token: 0x0600165B RID: 5723 RVA: 0x00051118 File Offset: 0x0004F318
		public void SetAtomEntryXmlCustomization(Func<ODataEntry, XmlWriter, XmlWriter> atomStartEntryXmlCustomizationCallback, Action<ODataEntry, XmlWriter, XmlWriter> atomEndEntryXmlCustomizationCallback)
		{
			if ((atomStartEntryXmlCustomizationCallback == null && atomEndEntryXmlCustomizationCallback != null) || (atomStartEntryXmlCustomizationCallback != null && atomEndEntryXmlCustomizationCallback == null))
			{
				throw new ODataException(Strings.ODataMessageWriterSettings_MessageWriterSettingsXmlCustomizationCallbacksMustBeSpecifiedBoth);
			}
			this.atomFormatStartEntryXmlCustomizationCallback = atomStartEntryXmlCustomizationCallback;
			this.atomFormatEndEntryXmlCustomizationCallback = atomEndEntryXmlCustomizationCallback;
		}

		// Token: 0x0600165C RID: 5724 RVA: 0x0005113F File Offset: 0x0004F33F
		public void EnableDefaultBehavior()
		{
			this.SetAtomEntryXmlCustomization(null, null);
			this.writerBehavior = ODataWriterBehavior.DefaultBehavior;
		}

		// Token: 0x0600165D RID: 5725 RVA: 0x00051154 File Offset: 0x0004F354
		public void EnableWcfDataServicesServerBehavior(bool usesV1Provider)
		{
			this.SetAtomEntryXmlCustomization(null, null);
			this.writerBehavior = ODataWriterBehavior.CreateWcfDataServicesServerBehavior(usesV1Provider);
		}

		// Token: 0x0600165E RID: 5726 RVA: 0x0005116A File Offset: 0x0004F36A
		public void EnableWcfDataServicesServerBehavior(bool usesV1Provider, bool alwaysUseDefaultXmlNamespaceForRootElement)
		{
			this.EnableWcfDataServicesServerBehavior(usesV1Provider);
			this.alwaysUseDefaultXmlNamespaceForRootElement = alwaysUseDefaultXmlNamespaceForRootElement;
		}

		// Token: 0x0600165F RID: 5727 RVA: 0x0005117A File Offset: 0x0004F37A
		public void EnableWcfDataServicesClientBehavior(Func<ODataEntry, XmlWriter, XmlWriter> startEntryXmlCustomizationCallback, Action<ODataEntry, XmlWriter, XmlWriter> endEntryXmlCustomizationCallback, string odataNamespace, string typeScheme)
		{
			ExceptionUtils.CheckArgumentNotNull<string>(odataNamespace, "odataNamespace");
			ExceptionUtils.CheckArgumentNotNull<string>(typeScheme, "typeScheme");
			this.SetAtomEntryXmlCustomization(startEntryXmlCustomizationCallback, endEntryXmlCustomizationCallback);
			this.writerBehavior = ODataWriterBehavior.CreateWcfDataServicesClientBehavior(odataNamespace, typeScheme);
		}

		// Token: 0x06001660 RID: 5728 RVA: 0x000511A9 File Offset: 0x0004F3A9
		public void SetMetadataDocumentUri(Uri value)
		{
			this.metadataDocumentUri = ((value == null) ? null : new ODataMetadataDocumentUri(value));
		}

		// Token: 0x06001661 RID: 5729 RVA: 0x000511C4 File Offset: 0x0004F3C4
		public void SetMetadataDocumentUri(Uri value, string selectClause)
		{
			this.metadataDocumentUri = new ODataMetadataDocumentUri(value)
			{
				SelectClause = selectClause
			};
		}

		// Token: 0x06001662 RID: 5730 RVA: 0x000511E6 File Offset: 0x0004F3E6
		internal bool HasJsonPaddingFunction()
		{
			return !string.IsNullOrEmpty(this.JsonPCallback);
		}

		// Token: 0x06001663 RID: 5731 RVA: 0x000511F8 File Offset: 0x0004F3F8
		internal bool ShouldSkipAnnotation(string annotationName)
		{
			return this.Version.Value < ODataVersion.V3 || (this.ShouldIncludeAnnotation != null && !this.ShouldIncludeAnnotation(annotationName));
		}

		// Token: 0x040008C8 RID: 2248
		private string acceptCharSets;

		// Token: 0x040008C9 RID: 2249
		private string acceptMediaTypes;

		// Token: 0x040008CA RID: 2250
		private ODataFormat format;

		// Token: 0x040008CB RID: 2251
		private bool? useFormat;

		// Token: 0x040008CC RID: 2252
		private Func<ODataEntry, XmlWriter, XmlWriter> atomFormatStartEntryXmlCustomizationCallback;

		// Token: 0x040008CD RID: 2253
		private Action<ODataEntry, XmlWriter, XmlWriter> atomFormatEndEntryXmlCustomizationCallback;

		// Token: 0x040008CE RID: 2254
		private ODataWriterBehavior writerBehavior;

		// Token: 0x040008CF RID: 2255
		private ODataMetadataDocumentUri metadataDocumentUri;

		// Token: 0x040008D0 RID: 2256
		private Func<string, bool> shouldIncludeAnnotation;

		// Token: 0x040008D1 RID: 2257
		private bool alwaysUseDefaultXmlNamespaceForRootElement;
	}
}
