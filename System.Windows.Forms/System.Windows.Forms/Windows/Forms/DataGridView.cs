using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Text;
using System.Windows.Forms.Layout;
using System.Windows.Forms.VisualStyles;
using Microsoft.Win32;

namespace System.Windows.Forms
{
	/// <summary>Displays data in a customizable grid.</summary>
	// Token: 0x0200017F RID: 383
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[DefaultEvent("CellContentClick")]
	[ComplexBindingProperties("DataSource", "DataMember")]
	[Docking(DockingBehavior.Ask)]
	[Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(ComponentEditor))]
	[SRDescription("DescriptionDataGridView")]
	public class DataGridView : Control, ISupportInitialize
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView" /> class.</summary>
		// Token: 0x06001520 RID: 5408 RVA: 0x0004FD84 File Offset: 0x0004DF84
		public DataGridView()
		{
			base.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.UserMouse, true);
			base.SetStyle(ControlStyles.SupportsTransparentBackColor, false);
			base.SetState2(2048, true);
			this.dataGridViewState1 = new BitVector32(0);
			this.dataGridViewState2 = new BitVector32(0);
			this.dataGridViewOper = new BitVector32(0);
			this.dataGridViewState1[8388635] = true;
			this.dataGridViewState2[100664295] = true;
			this.displayedBandsInfo = new DataGridView.DisplayedBandsData();
			this.lstRows = new ArrayList();
			this.converters = new Hashtable(8);
			this.pens = new Hashtable(8);
			this.brushes = new Hashtable(10);
			this.gridPen = new Pen(DataGridView.DefaultGridColor);
			this.selectedBandIndexes = new DataGridViewIntLinkedList();
			this.individualSelectedCells = new DataGridViewCellLinkedList();
			this.individualReadOnlyCells = new DataGridViewCellLinkedList();
			this.advancedCellBorderStyle = new DataGridViewAdvancedBorderStyle(this, DataGridViewAdvancedCellBorderStyle.OutsetDouble, DataGridViewAdvancedCellBorderStyle.OutsetPartial, DataGridViewAdvancedCellBorderStyle.InsetDouble);
			this.advancedRowHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedColumnHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
			this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.borderStyle = BorderStyle.FixedSingle;
			this.dataGridViewState1[128] = true;
			this.selectionMode = DataGridViewSelectionMode.RowHeaderSelect;
			this.editMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
			this.autoSizeRowsMode = DataGridViewAutoSizeRowsMode.None;
			this.autoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
			this.columnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.EnableResizing;
			this.rowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;
			this.clipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText;
			this.layout = new DataGridView.LayoutData();
			this.layout.TopLeftHeader = Rectangle.Empty;
			this.layout.ColumnHeaders = Rectangle.Empty;
			this.layout.RowHeaders = Rectangle.Empty;
			this.layout.ColumnHeadersVisible = true;
			this.layout.RowHeadersVisible = true;
			this.layout.ClientRectangle = base.ClientRectangle;
			this.scrollBars = ScrollBars.Both;
			this.horizScrollBar.RightToLeft = RightToLeft.Inherit;
			this.horizScrollBar.AccessibleName = SR.GetString("DataGridView_AccHorizontalScrollBarAccName");
			this.horizScrollBar.Top = base.ClientRectangle.Height - this.horizScrollBar.Height;
			this.horizScrollBar.Left = 0;
			this.horizScrollBar.Visible = false;
			this.horizScrollBar.Scroll += this.DataGridViewHScrolled;
			base.Controls.Add(this.horizScrollBar);
			this.vertScrollBar.Top = 0;
			this.vertScrollBar.AccessibleName = SR.GetString("DataGridView_AccVerticalScrollBarAccName");
			this.vertScrollBar.Left = base.ClientRectangle.Width - this.vertScrollBar.Width;
			this.vertScrollBar.Visible = false;
			this.vertScrollBar.Scroll += this.DataGridViewVScrolled;
			base.Controls.Add(this.vertScrollBar);
			this.ptCurrentCell = new Point(-1, -1);
			this.ptAnchorCell = new Point(-1, -1);
			this.ptMouseDownCell = new Point(-2, -2);
			this.ptMouseEnteredCell = new Point(-2, -2);
			this.ptToolTipCell = new Point(-1, -1);
			this.ptMouseDownGridCoord = new Point(-1, -1);
			this.sortOrder = SortOrder.None;
			this.lastMouseClickInfo.timeStamp = 0L;
			this.WireScrollBarsEvents();
			base.PerformLayout();
			this.toolTipControl = new DataGridView.DataGridViewToolTip(this);
			this.rowHeadersWidth = this.ScaleToCurrentDpi(41);
			this.columnHeadersHeight = this.ScaleToCurrentDpi(23);
			base.Invalidate();
		}

		// Token: 0x06001521 RID: 5409 RVA: 0x00050199 File Offset: 0x0004E399
		private int ScaleToCurrentDpi(int value)
		{
			if (!DpiHelper.EnableDataGridViewControlHighDpiImprovements)
			{
				return value;
			}
			return base.LogicalToDeviceUnits(value);
		}

		/// <summary>Gets the border style for the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the style of the border of the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000507 RID: 1287
		// (get) Token: 0x06001522 RID: 5410 RVA: 0x000501AC File Offset: 0x0004E3AC
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
		{
			get
			{
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle;
				if (this.ApplyVisualStylesToHeaderCells)
				{
					DataGridViewAdvancedCellBorderStyle all = this.AdvancedColumnHeadersBorderStyle.All;
					if (all != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						if (all != DataGridViewAdvancedCellBorderStyle.InsetDouble)
						{
							if (all - DataGridViewAdvancedCellBorderStyle.OutsetDouble <= 1)
							{
								dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
								if (this.RightToLeftInternal)
								{
									dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
								}
								else
								{
									dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								}
								dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
								dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
							}
						}
						else
						{
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							if (this.RightToLeftInternal)
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							}
							dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = ((this.AdvancedRowHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.OutsetDouble) ? DataGridViewAdvancedCellBorderStyle.Outset : this.AdvancedRowHeadersBorderStyle.Right);
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				else
				{
					DataGridViewAdvancedCellBorderStyle all = this.AdvancedColumnHeadersBorderStyle.All;
					if (all != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						if (all != DataGridViewAdvancedCellBorderStyle.InsetDouble)
						{
							if (all - DataGridViewAdvancedCellBorderStyle.OutsetDouble <= 1)
							{
								dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
								dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
								dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.OutsetDouble : DataGridViewAdvancedCellBorderStyle.Outset);
								dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
							}
						}
						else
						{
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
							dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.InsetDouble : DataGridViewAdvancedCellBorderStyle.Inset);
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedRowHeadersBorderStyle.Right;
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				return dataGridViewAdvancedBorderStyle;
			}
		}

		/// <summary>Gets the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000508 RID: 1288
		// (get) Token: 0x06001523 RID: 5411 RVA: 0x00050477 File Offset: 0x0004E677
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle
		{
			get
			{
				return this.advancedCellBorderStyle;
			}
		}

		/// <summary>Gets the border style of the column header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000509 RID: 1289
		// (get) Token: 0x06001524 RID: 5412 RVA: 0x0005047F File Offset: 0x0004E67F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle
		{
			get
			{
				return this.advancedColumnHeadersBorderStyle;
			}
		}

		/// <summary>Gets the border style of the row header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x1700050A RID: 1290
		// (get) Token: 0x06001525 RID: 5413 RVA: 0x00050487 File Offset: 0x0004E687
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle
		{
			get
			{
				return this.advancedRowHeadersBorderStyle;
			}
		}

		/// <summary>Gets or sets a value indicating whether the option to add rows is displayed to the user.</summary>
		/// <returns>
		///     <see langword="true" /> if the add-row option is displayed to the user; otherwise <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700050B RID: 1291
		// (get) Token: 0x06001526 RID: 5414 RVA: 0x0005048F File Offset: 0x0004E68F
		// (set) Token: 0x06001527 RID: 5415 RVA: 0x0005049D File Offset: 0x0004E69D
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToAddRowsDescr")]
		public bool AllowUserToAddRows
		{
			get
			{
				return this.dataGridViewState1[1];
			}
			set
			{
				if (this.AllowUserToAddRows != value)
				{
					this.dataGridViewState1[1] = value;
					if (this.DataSource != null)
					{
						this.dataConnection.ResetCachedAllowUserToAddRowsInternal();
					}
					this.OnAllowUserToAddRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1700050C RID: 1292
		// (get) Token: 0x06001528 RID: 5416 RVA: 0x000504D3 File Offset: 0x0004E6D3
		internal bool AllowUserToAddRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToAddRows;
				}
				return this.AllowUserToAddRows && this.dataConnection.AllowAdd;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> property changes.</summary>
		// Token: 0x140000EA RID: 234
		// (add) Token: 0x06001529 RID: 5417 RVA: 0x000504F9 File Offset: 0x0004E6F9
		// (remove) Token: 0x0600152A RID: 5418 RVA: 0x0005050C File Offset: 0x0004E70C
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToAddRowsChangedDescr")]
		public event EventHandler AllowUserToAddRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the user is allowed to delete rows from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>
		///     <see langword="true" /> if the user can delete rows; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700050D RID: 1293
		// (get) Token: 0x0600152B RID: 5419 RVA: 0x0005051F File Offset: 0x0004E71F
		// (set) Token: 0x0600152C RID: 5420 RVA: 0x0005052D File Offset: 0x0004E72D
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToDeleteRowsDescr")]
		public bool AllowUserToDeleteRows
		{
			get
			{
				return this.dataGridViewState1[2];
			}
			set
			{
				if (this.AllowUserToDeleteRows != value)
				{
					this.dataGridViewState1[2] = value;
					this.OnAllowUserToDeleteRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1700050E RID: 1294
		// (get) Token: 0x0600152D RID: 5421 RVA: 0x00050550 File Offset: 0x0004E750
		internal bool AllowUserToDeleteRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToDeleteRows;
				}
				return this.AllowUserToDeleteRows && this.dataConnection.AllowRemove;
			}
		}

		/// <summary>Occurs when the value of the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> property changes.</summary>
		// Token: 0x140000EB RID: 235
		// (add) Token: 0x0600152E RID: 5422 RVA: 0x00050576 File Offset: 0x0004E776
		// (remove) Token: 0x0600152F RID: 5423 RVA: 0x00050589 File Offset: 0x0004E789
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToDeleteRowsChangedDescr")]
		public event EventHandler AllowUserToDeleteRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether manual column repositioning is enabled.</summary>
		/// <returns>
		///     <see langword="true" /> if the user can change the column order; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x1700050F RID: 1295
		// (get) Token: 0x06001530 RID: 5424 RVA: 0x0005059C File Offset: 0x0004E79C
		// (set) Token: 0x06001531 RID: 5425 RVA: 0x000505AA File Offset: 0x0004E7AA
		[DefaultValue(false)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToOrderColumnsDescr")]
		public bool AllowUserToOrderColumns
		{
			get
			{
				return this.dataGridViewState1[4];
			}
			set
			{
				if (this.AllowUserToOrderColumns != value)
				{
					this.dataGridViewState1[4] = value;
					this.OnAllowUserToOrderColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" /> property changes.</summary>
		// Token: 0x140000EC RID: 236
		// (add) Token: 0x06001532 RID: 5426 RVA: 0x000505CD File Offset: 0x0004E7CD
		// (remove) Token: 0x06001533 RID: 5427 RVA: 0x000505E0 File Offset: 0x0004E7E0
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToOrderColumnsChangedDescr")]
		public event EventHandler AllowUserToOrderColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether users can resize columns.</summary>
		/// <returns>
		///     <see langword="true" /> if users can resize columns; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000510 RID: 1296
		// (get) Token: 0x06001534 RID: 5428 RVA: 0x000505F3 File Offset: 0x0004E7F3
		// (set) Token: 0x06001535 RID: 5429 RVA: 0x00050601 File Offset: 0x0004E801
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToResizeColumnsDescr")]
		public bool AllowUserToResizeColumns
		{
			get
			{
				return this.dataGridViewState2[2];
			}
			set
			{
				if (this.AllowUserToResizeColumns != value)
				{
					this.dataGridViewState2[2] = value;
					this.OnAllowUserToResizeColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" /> property changes.</summary>
		// Token: 0x140000ED RID: 237
		// (add) Token: 0x06001536 RID: 5430 RVA: 0x00050624 File Offset: 0x0004E824
		// (remove) Token: 0x06001537 RID: 5431 RVA: 0x00050637 File Offset: 0x0004E837
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToResizeColumnsChangedDescr")]
		public event EventHandler AllowUserToResizeColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether users can resize rows.</summary>
		/// <returns>
		///     <see langword="true" /> if all the rows are resizable; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000511 RID: 1297
		// (get) Token: 0x06001538 RID: 5432 RVA: 0x0005064A File Offset: 0x0004E84A
		// (set) Token: 0x06001539 RID: 5433 RVA: 0x00050658 File Offset: 0x0004E858
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToResizeRowsDescr")]
		public bool AllowUserToResizeRows
		{
			get
			{
				return this.dataGridViewState2[4];
			}
			set
			{
				if (this.AllowUserToResizeRows != value)
				{
					this.dataGridViewState2[4] = value;
					this.OnAllowUserToResizeRowsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" /> property changes.</summary>
		// Token: 0x140000EE RID: 238
		// (add) Token: 0x0600153A RID: 5434 RVA: 0x0005067B File Offset: 0x0004E87B
		// (remove) Token: 0x0600153B RID: 5435 RVA: 0x0005068E File Offset: 0x0004E88E
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToResizeRowsChangedDescr")]
		public event EventHandler AllowUserToResizeRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets the default cell style applied to odd-numbered rows of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the odd-numbered rows.</returns>
		// Token: 0x17000512 RID: 1298
		// (get) Token: 0x0600153C RID: 5436 RVA: 0x000506A1 File Offset: 0x0004E8A1
		// (set) Token: 0x0600153D RID: 5437 RVA: 0x000506D0 File Offset: 0x0004E8D0
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_AlternatingRowsDefaultCellStyleDescr")]
		public DataGridViewCellStyle AlternatingRowsDefaultCellStyle
		{
			get
			{
				if (this.alternatingRowsDefaultCellStyle == null)
				{
					this.alternatingRowsDefaultCellStyle = new DataGridViewCellStyle();
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				return this.alternatingRowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.AlternatingRowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.AlternatingRows);
				this.alternatingRowsDefaultCellStyle = value;
				if (value != null)
				{
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.AlternatingRowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = (differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize);
					this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" /> property changes.</summary>
		// Token: 0x140000EF RID: 239
		// (add) Token: 0x0600153E RID: 5438 RVA: 0x00050735 File Offset: 0x0004E935
		// (remove) Token: 0x0600153F RID: 5439 RVA: 0x00050748 File Offset: 0x0004E948
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAlternatingRowsDefaultCellStyleChangedDescr")]
		public event EventHandler AlternatingRowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x17000513 RID: 1299
		// (get) Token: 0x06001540 RID: 5440 RVA: 0x0005075B File Offset: 0x0004E95B
		internal bool ApplyVisualStylesToInnerCells
		{
			get
			{
				return Application.RenderWithVisualStyles;
			}
		}

		// Token: 0x17000514 RID: 1300
		// (get) Token: 0x06001541 RID: 5441 RVA: 0x00050762 File Offset: 0x0004E962
		internal bool ApplyVisualStylesToHeaderCells
		{
			get
			{
				return Application.RenderWithVisualStyles && this.EnableHeadersVisualStyles;
			}
		}

		/// <summary>Gets or sets a value indicating whether columns are created automatically when the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> or <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> properties are set.</summary>
		/// <returns>
		///     <see langword="true" /> if the columns should be created automatically; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000515 RID: 1301
		// (get) Token: 0x06001542 RID: 5442 RVA: 0x00050773 File Offset: 0x0004E973
		// (set) Token: 0x06001543 RID: 5443 RVA: 0x00050785 File Offset: 0x0004E985
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DefaultValue(true)]
		public bool AutoGenerateColumns
		{
			get
			{
				return this.dataGridViewState1[8388608];
			}
			set
			{
				if (this.dataGridViewState1[8388608] != value)
				{
					this.dataGridViewState1[8388608] = value;
					this.OnAutoGenerateColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> property changes.</summary>
		// Token: 0x140000F0 RID: 240
		// (add) Token: 0x06001544 RID: 5444 RVA: 0x000507B6 File Offset: 0x0004E9B6
		// (remove) Token: 0x06001545 RID: 5445 RVA: 0x000507C9 File Offset: 0x0004E9C9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event EventHandler AutoGenerateColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
		}

		/// <summary>This property is not relevant for this class.</summary>
		/// <returns>
		///     <see langword="true" /> if enabled; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000516 RID: 1302
		// (get) Token: 0x06001546 RID: 5446 RVA: 0x000507DC File Offset: 0x0004E9DC
		// (set) Token: 0x06001547 RID: 5447 RVA: 0x000507EE File Offset: 0x0004E9EE
		public override bool AutoSize
		{
			get
			{
				return this.dataGridViewState1[1073741824];
			}
			set
			{
				base.AutoSize = value;
				this.dataGridViewState1[1073741824] = value;
			}
		}

		/// <summary>Gets or sets a value indicating how column widths are determined.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value. The default is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" />. </returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value. </exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" />, column headers are hidden, and at least one visible column has an <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />.-or-The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" /> and at least one visible column with an <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> is frozen.</exception>
		// Token: 0x17000517 RID: 1303
		// (get) Token: 0x06001548 RID: 5448 RVA: 0x00050808 File Offset: 0x0004EA08
		// (set) Token: 0x06001549 RID: 5449 RVA: 0x00050810 File Offset: 0x0004EA10
		[DefaultValue(DataGridViewAutoSizeColumnsMode.None)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_AutoSizeColumnsModeDescr")]
		public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode
		{
			get
			{
				return this.autoSizeColumnsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeColumnsMode.None:
				case DataGridViewAutoSizeColumnsMode.ColumnHeader:
				case DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.AllCells:
				case DataGridViewAutoSizeColumnsMode.DisplayedCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.DisplayedCells:
					goto IL_4B;
				case (DataGridViewAutoSizeColumnsMode)3:
				case (DataGridViewAutoSizeColumnsMode)5:
				case (DataGridViewAutoSizeColumnsMode)7:
				case (DataGridViewAutoSizeColumnsMode)9:
					break;
				default:
					if (value == DataGridViewAutoSizeColumnsMode.Fill)
					{
						goto IL_4B;
					}
					break;
				}
				throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeColumnsMode));
				IL_4B:
				if (this.autoSizeColumnsMode != value)
				{
					foreach (object obj in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
						if (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && dataGridViewColumn.Visible)
						{
							if (value == DataGridViewAutoSizeColumnsMode.ColumnHeader && !this.ColumnHeadersVisible)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders"));
							}
							if (value == DataGridViewAutoSizeColumnsMode.Fill && dataGridViewColumn.Frozen)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoFillFrozenColumns"));
							}
						}
					}
					DataGridViewAutoSizeColumnMode[] array = new DataGridViewAutoSizeColumnMode[this.Columns.Count];
					foreach (object obj2 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
						array[dataGridViewColumn2.Index] = dataGridViewColumn2.InheritedAutoSizeMode;
					}
					DataGridViewAutoSizeColumnsModeEventArgs e = new DataGridViewAutoSizeColumnsModeEventArgs(array);
					this.autoSizeColumnsMode = value;
					this.OnAutoSizeColumnsModeChanged(e);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" /> property changes.</summary>
		// Token: 0x140000F1 RID: 241
		// (add) Token: 0x0600154A RID: 5450 RVA: 0x00050984 File Offset: 0x0004EB84
		// (remove) Token: 0x0600154B RID: 5451 RVA: 0x00050997 File Offset: 0x0004EB97
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeColumnsModeChangedDescr")]
		public event DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating how row heights are determined. </summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value indicating the sizing mode. The default is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value. </exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> and row headers are hidden. </exception>
		// Token: 0x17000518 RID: 1304
		// (get) Token: 0x0600154C RID: 5452 RVA: 0x000509AA File Offset: 0x0004EBAA
		// (set) Token: 0x0600154D RID: 5453 RVA: 0x000509B4 File Offset: 0x0004EBB4
		[DefaultValue(DataGridViewAutoSizeRowsMode.None)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_AutoSizeRowsModeDescr")]
		public DataGridViewAutoSizeRowsMode AutoSizeRowsMode
		{
			get
			{
				return this.autoSizeRowsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeRowsMode.None:
				case DataGridViewAutoSizeRowsMode.AllHeaders:
				case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.AllCells:
				case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCells:
					if ((value == DataGridViewAutoSizeRowsMode.AllHeaders || value == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
					}
					if (this.autoSizeRowsMode != value)
					{
						DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs(this.autoSizeRowsMode > DataGridViewAutoSizeRowsMode.None);
						this.autoSizeRowsMode = value;
						this.OnAutoSizeRowsModeChanged(e);
					}
					return;
				default:
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeRowsMode));
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> property changes.</summary>
		// Token: 0x140000F2 RID: 242
		// (add) Token: 0x0600154E RID: 5454 RVA: 0x00050A54 File Offset: 0x0004EC54
		// (remove) Token: 0x0600154F RID: 5455 RVA: 0x00050A67 File Offset: 0x0004EC67
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeRowsModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets the background color for the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</returns>
		// Token: 0x17000519 RID: 1305
		// (get) Token: 0x06001550 RID: 5456 RVA: 0x00011FB1 File Offset: 0x000101B1
		// (set) Token: 0x06001551 RID: 5457 RVA: 0x00011FB9 File Offset: 0x000101B9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override Color BackColor
		{
			get
			{
				return base.BackColor;
			}
			set
			{
				base.BackColor = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackColor" /> property changes.</summary>
		// Token: 0x140000F3 RID: 243
		// (add) Token: 0x06001552 RID: 5458 RVA: 0x00050A7A File Offset: 0x0004EC7A
		// (remove) Token: 0x06001553 RID: 5459 RVA: 0x00050A83 File Offset: 0x0004EC83
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackColorChanged
		{
			add
			{
				base.BackColorChanged += value;
			}
			remove
			{
				base.BackColorChanged -= value;
			}
		}

		// Token: 0x1700051A RID: 1306
		// (get) Token: 0x06001554 RID: 5460 RVA: 0x00050A8C File Offset: 0x0004EC8C
		internal SolidBrush BackgroundBrush
		{
			get
			{
				return this.backgroundBrush;
			}
		}

		/// <summary>Gets or sets the background color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the background color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is <see cref="P:System.Drawing.SystemColors.AppWorkspace" />. </returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />. -or-The specified value when setting this property has a <see cref="P:System.Drawing.Color.A" /> property value that is less that 255.</exception>
		// Token: 0x1700051B RID: 1307
		// (get) Token: 0x06001555 RID: 5461 RVA: 0x00050A94 File Offset: 0x0004EC94
		// (set) Token: 0x06001556 RID: 5462 RVA: 0x00050AA4 File Offset: 0x0004ECA4
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewBackgroundColorDescr")]
		public Color BackgroundColor
		{
			get
			{
				return this.backgroundBrush.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[]
					{
						"BackgroundColor"
					}));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[]
					{
						"BackgroundColor"
					}));
				}
				if (!value.Equals(this.backgroundBrush.Color))
				{
					this.backgroundBrush = new SolidBrush(value);
					this.OnBackgroundColorChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackgroundColor" /> property changes.</summary>
		// Token: 0x140000F4 RID: 244
		// (add) Token: 0x06001557 RID: 5463 RVA: 0x00050B3A File Offset: 0x0004ED3A
		// (remove) Token: 0x06001558 RID: 5464 RVA: 0x00050B4D File Offset: 0x0004ED4D
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewBackgroundColorChangedDescr")]
		public event EventHandler BackgroundColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
		}

		/// <summary>Gets or sets the background image displayed in the control.</summary>
		/// <returns>An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</returns>
		// Token: 0x1700051C RID: 1308
		// (get) Token: 0x06001559 RID: 5465 RVA: 0x00011FC2 File Offset: 0x000101C2
		// (set) Token: 0x0600155A RID: 5466 RVA: 0x00011FCA File Offset: 0x000101CA
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override Image BackgroundImage
		{
			get
			{
				return base.BackgroundImage;
			}
			set
			{
				base.BackgroundImage = value;
			}
		}

		/// <summary>Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</summary>
		/// <returns>An <see cref="T:System.Windows.Forms.ImageLayout" /> value indicating the background image layout. The default is <see cref="F:System.Windows.Forms.ImageLayout.Tile" />.</returns>
		// Token: 0x1700051D RID: 1309
		// (get) Token: 0x0600155B RID: 5467 RVA: 0x00011FD3 File Offset: 0x000101D3
		// (set) Token: 0x0600155C RID: 5468 RVA: 0x00011FDB File Offset: 0x000101DB
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override ImageLayout BackgroundImageLayout
		{
			get
			{
				return base.BackgroundImageLayout;
			}
			set
			{
				base.BackgroundImageLayout = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackgroundImage" /> property changes.</summary>
		// Token: 0x140000F5 RID: 245
		// (add) Token: 0x0600155D RID: 5469 RVA: 0x0001FD81 File Offset: 0x0001DF81
		// (remove) Token: 0x0600155E RID: 5470 RVA: 0x0001FD8A File Offset: 0x0001DF8A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" /> property changes.</summary>
		// Token: 0x140000F6 RID: 246
		// (add) Token: 0x0600155F RID: 5471 RVA: 0x0001FD93 File Offset: 0x0001DF93
		// (remove) Token: 0x06001560 RID: 5472 RVA: 0x0001FD9C File Offset: 0x0001DF9C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		// Token: 0x06001561 RID: 5473 RVA: 0x00050B60 File Offset: 0x0004ED60
		private bool ShouldSerializeBackgroundColor()
		{
			return !this.BackgroundColor.Equals(DataGridView.DefaultBackgroundBrush.Color);
		}

		/// <summary>Gets or sets the border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.BorderStyle" /> values. The default is <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.BorderStyle" /> value. </exception>
		// Token: 0x1700051E RID: 1310
		// (get) Token: 0x06001562 RID: 5474 RVA: 0x00050B93 File Offset: 0x0004ED93
		// (set) Token: 0x06001563 RID: 5475 RVA: 0x00050B9C File Offset: 0x0004ED9C
		[DefaultValue(BorderStyle.FixedSingle)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_BorderStyleDescr")]
		public BorderStyle BorderStyle
		{
			get
			{
				return this.borderStyle;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(BorderStyle));
				}
				if (this.borderStyle != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.BorderStyle))
					{
						this.borderStyle = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
						this.OnBorderStyleChanged(EventArgs.Empty);
					}
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BorderStyle" /> property changes.</summary>
		// Token: 0x140000F7 RID: 247
		// (add) Token: 0x06001564 RID: 5476 RVA: 0x00050C38 File Offset: 0x0004EE38
		// (remove) Token: 0x06001565 RID: 5477 RVA: 0x00050C4B File Offset: 0x0004EE4B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewBorderStyleChangedDescr")]
		public event EventHandler BorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x1700051F RID: 1311
		// (get) Token: 0x06001566 RID: 5478 RVA: 0x00050C60 File Offset: 0x0004EE60
		private int BorderWidth
		{
			get
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (!Application.RenderWithVisualStyles)
					{
						return SystemInformation.Border3DSize.Width;
					}
					return 1;
				}
				else
				{
					if (this.BorderStyle == BorderStyle.FixedSingle)
					{
						return 1;
					}
					return 0;
				}
			}
		}

		/// <summary>Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</summary>
		/// <returns>
		///     <see langword="true" /> if there is an editable cell selected; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000520 RID: 1312
		// (get) Token: 0x06001567 RID: 5479 RVA: 0x00050C9C File Offset: 0x0004EE9C
		protected override bool CanEnableIme
		{
			get
			{
				bool result = false;
				if (this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X))
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y))
					{
						result = base.CanEnableIme;
					}
				}
				return result;
			}
		}

		/// <summary>Gets the cell border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> that represents the border style of the cells contained in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewCellBorderStyle.Custom" />.</exception>
		// Token: 0x17000521 RID: 1313
		// (get) Token: 0x06001568 RID: 5480 RVA: 0x00050CF0 File Offset: 0x0004EEF0
		// (set) Token: 0x06001569 RID: 5481 RVA: 0x00050E54 File Offset: 0x0004F054
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_CellBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewCellBorderStyle.Single)]
		public DataGridViewCellBorderStyle CellBorderStyle
		{
			get
			{
				switch (this.advancedCellBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.RightToLeftInternal)
						{
							if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Single)
							{
								return DataGridViewCellBorderStyle.SingleVertical;
							}
						}
						else if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenVertical;
						}
					}
					if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenHorizontal;
						}
					}
					return DataGridViewCellBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewCellBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewCellBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.Inset:
					return DataGridViewCellBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.Outset:
					return DataGridViewCellBorderStyle.Raised;
				}
				return DataGridViewCellBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 10))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewCellBorderStyle));
				}
				if (value != this.CellBorderStyle)
				{
					if (value == DataGridViewCellBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[]
						{
							"CellBorderStyle"
						}));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewCellBorderStyle.Single:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.Raised:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.Sunken:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.None:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						case DataGridViewCellBorderStyle.SingleVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							if (this.RightToLeftInternal)
							{
								this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							else
							{
								this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							break;
						case DataGridViewCellBorderStyle.RaisedVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.SingleHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.RaisedHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnCellBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the border style of a cell changes.</summary>
		// Token: 0x140000F8 RID: 248
		// (add) Token: 0x0600156A RID: 5482 RVA: 0x00051064 File Offset: 0x0004F264
		// (remove) Token: 0x0600156B RID: 5483 RVA: 0x00051077 File Offset: 0x0004F277
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellBorderStyleChangedDescr")]
		public event EventHandler CellBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x17000522 RID: 1314
		// (get) Token: 0x0600156C RID: 5484 RVA: 0x0005108A File Offset: 0x0004F28A
		// (set) Token: 0x0600156D RID: 5485 RVA: 0x0005109C File Offset: 0x0004F29C
		internal bool CellMouseDownInContentBounds
		{
			get
			{
				return this.dataGridViewState2[268435456];
			}
			set
			{
				this.dataGridViewState2[268435456] = value;
			}
		}

		// Token: 0x17000523 RID: 1315
		// (get) Token: 0x0600156E RID: 5486 RVA: 0x000510AF File Offset: 0x0004F2AF
		internal DataGridViewCellPaintingEventArgs CellPaintingEventArgs
		{
			get
			{
				if (this.dgvcpe == null)
				{
					this.dgvcpe = new DataGridViewCellPaintingEventArgs(this);
				}
				return this.dgvcpe;
			}
		}

		// Token: 0x17000524 RID: 1316
		// (get) Token: 0x0600156F RID: 5487 RVA: 0x000510CB File Offset: 0x0004F2CB
		private DataGridViewCellStyleChangedEventArgs CellStyleChangedEventArgs
		{
			get
			{
				if (this.dgvcsce == null)
				{
					this.dgvcsce = new DataGridViewCellStyleChangedEventArgs();
				}
				return this.dgvcsce;
			}
		}

		// Token: 0x17000525 RID: 1317
		// (get) Token: 0x06001570 RID: 5488 RVA: 0x000510E6 File Offset: 0x0004F2E6
		internal DataGridViewCellValueEventArgs CellValueEventArgs
		{
			get
			{
				if (this.dgvcve == null)
				{
					this.dgvcve = new DataGridViewCellValueEventArgs();
				}
				return this.dgvcve;
			}
		}

		/// <summary>Gets or sets a value that indicates whether users can copy cell text values to the <see cref="T:System.Windows.Forms.Clipboard" /> and whether row and column header text is included.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> value.</exception>
		// Token: 0x17000526 RID: 1318
		// (get) Token: 0x06001571 RID: 5489 RVA: 0x00051101 File Offset: 0x0004F301
		// (set) Token: 0x06001572 RID: 5490 RVA: 0x00051109 File Offset: 0x0004F309
		[Browsable(true)]
		[DefaultValue(DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ClipboardCopyModeDescr")]
		public DataGridViewClipboardCopyMode ClipboardCopyMode
		{
			get
			{
				return this.clipboardCopyMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewClipboardCopyMode));
				}
				this.clipboardCopyMode = value;
			}
		}

		/// <summary>Gets or sets the number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0. </exception>
		/// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has been set. </exception>
		// Token: 0x17000527 RID: 1319
		// (get) Token: 0x06001573 RID: 5491 RVA: 0x00051138 File Offset: 0x0004F338
		// (set) Token: 0x06001574 RID: 5492 RVA: 0x00051148 File Offset: 0x0004F348
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DefaultValue(0)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public int ColumnCount
		{
			get
			{
				return this.Columns.Count;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("ColumnCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetColumnCountOnDataBoundDataGridView"));
				}
				if (value != this.Columns.Count)
				{
					if (value == 0)
					{
						this.Columns.Clear();
						return;
					}
					if (value < this.Columns.Count)
					{
						while (value < this.Columns.Count)
						{
							int count = this.Columns.Count;
							this.Columns.RemoveAt(count - 1);
							if (this.Columns.Count >= count)
							{
								return;
							}
						}
						return;
					}
					while (value > this.Columns.Count)
					{
						int count2 = this.Columns.Count;
						this.Columns.Add(null, null);
						if (this.Columns.Count <= count2)
						{
							break;
						}
					}
				}
			}
		}

		/// <summary>Gets the border style applied to the column headers.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />.</exception>
		// Token: 0x17000528 RID: 1320
		// (get) Token: 0x06001575 RID: 5493 RVA: 0x00051254 File Offset: 0x0004F454
		// (set) Token: 0x06001576 RID: 5494 RVA: 0x000512A0 File Offset: 0x0004F4A0
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ColumnHeadersBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle
		{
			get
			{
				switch (this.advancedColumnHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.ColumnHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[]
						{
							"ColumnHeadersBorderStyle"
						}));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" /> property changes.</summary>
		// Token: 0x140000F9 RID: 249
		// (add) Token: 0x06001577 RID: 5495 RVA: 0x00051390 File Offset: 0x0004F590
		// (remove) Token: 0x06001578 RID: 5496 RVA: 0x000513A3 File Offset: 0x0004F5A3
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeadersBorderStyleChangedDescr")]
		public event EventHandler ColumnHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the default column header style.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default column header style.</returns>
		// Token: 0x17000529 RID: 1321
		// (get) Token: 0x06001579 RID: 5497 RVA: 0x000513B6 File Offset: 0x0004F5B6
		// (set) Token: 0x0600157A RID: 5498 RVA: 0x000513D4 File Offset: 0x0004F5D4
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ColumnHeadersDefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle ColumnHeadersDefaultCellStyle
		{
			get
			{
				if (this.columnHeadersDefaultCellStyle == null)
				{
					this.columnHeadersDefaultCellStyle = this.DefaultColumnHeadersDefaultCellStyle;
				}
				return this.columnHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.ColumnHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.ColumnHeaders);
				this.columnHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.columnHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.ColumnHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = (differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize);
					this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x1700052A RID: 1322
		// (get) Token: 0x0600157B RID: 5499 RVA: 0x00051434 File Offset: 0x0004F634
		private DataGridViewCellStyle DefaultColumnHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				this.dataGridViewState1[67108864] = true;
				return dataGridViewCellStyle;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" /> property changes.</summary>
		// Token: 0x140000FA RID: 250
		// (add) Token: 0x0600157C RID: 5500 RVA: 0x000514BD File Offset: 0x0004F6BD
		// (remove) Token: 0x0600157D RID: 5501 RVA: 0x000514D0 File Offset: 0x0004F6D0
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewColumnHeadersDefaultCellStyleChangedDescr")]
		public event EventHandler ColumnHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the height, in pixels, of the column headers row </summary>
		/// <returns>The height, in pixels, of the row that contains the column headers. The default is 23.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum height of 4 pixels or is greater than the maximum height of 32768 pixels.</exception>
		// Token: 0x1700052B RID: 1323
		// (get) Token: 0x0600157E RID: 5502 RVA: 0x000514E3 File Offset: 0x0004F6E3
		// (set) Token: 0x0600157F RID: 5503 RVA: 0x000514EC File Offset: 0x0004F6EC
		[SRCategory("CatAppearance")]
		[Localizable(true)]
		[SRDescription("DataGridView_ColumnHeadersHeightDescr")]
		public int ColumnHeadersHeight
		{
			get
			{
				return this.columnHeadersHeight;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.cachedColumnHeadersHeight = value;
					return;
				}
				if (this.columnHeadersHeight != value)
				{
					this.SetColumnHeadersHeightInternal(value, true);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" /> property changes.</summary>
		// Token: 0x140000FB RID: 251
		// (add) Token: 0x06001580 RID: 5504 RVA: 0x000515B1 File Offset: 0x0004F7B1
		// (remove) Token: 0x06001581 RID: 5505 RVA: 0x000515C4 File Offset: 0x0004F7C4
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewColumnHeadersHeightChangedDescr")]
		public event EventHandler ColumnHeadersHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
		}

		// Token: 0x06001582 RID: 5506 RVA: 0x000515D7 File Offset: 0x0004F7D7
		private bool ShouldSerializeColumnHeadersHeight()
		{
			return this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize && 23 != this.ColumnHeadersHeight;
		}

		/// <summary>Gets or sets a value indicating whether the height of the column headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers. </summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value indicating the mode by which the height of the column headers row can be adjusted. The default is <see cref="F:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value.</exception>
		// Token: 0x1700052C RID: 1324
		// (get) Token: 0x06001583 RID: 5507 RVA: 0x000515F1 File Offset: 0x0004F7F1
		// (set) Token: 0x06001584 RID: 5508 RVA: 0x000515FC File Offset: 0x0004F7FC
		[DefaultValue(DataGridViewColumnHeadersHeightSizeMode.EnableResizing)]
		[RefreshProperties(RefreshProperties.All)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeDescr")]
		public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
		{
			get
			{
				return this.columnHeadersHeightSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewColumnHeadersHeightSizeMode));
				}
				if (this.columnHeadersHeightSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs(this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize);
					this.columnHeadersHeightSizeMode = value;
					this.OnColumnHeadersHeightSizeModeChanged(e);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" /> property changes.</summary>
		// Token: 0x140000FC RID: 252
		// (add) Token: 0x06001585 RID: 5509 RVA: 0x00051655 File Offset: 0x0004F855
		// (remove) Token: 0x06001586 RID: 5510 RVA: 0x00051668 File Offset: 0x0004F868
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the column header row is displayed.</summary>
		/// <returns>
		///     <see langword="true" /> if the column headers are displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and one or more columns have an <see cref="P:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" />.</exception>
		// Token: 0x1700052D RID: 1325
		// (get) Token: 0x06001587 RID: 5511 RVA: 0x0005167B File Offset: 0x0004F87B
		// (set) Token: 0x06001588 RID: 5512 RVA: 0x0005168C File Offset: 0x0004F88C
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridViewColumnHeadersVisibleDescr")]
		public bool ColumnHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[8];
			}
			set
			{
				if (this.ColumnHeadersVisible != value)
				{
					if (!value)
					{
						for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_ColumnHeadersCannotBeInvisible"));
							}
						}
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersVisible))
					{
						this.dataGridViewState1[8] = value;
						this.layout.ColumnHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnColumnHeadersGlobalAutoSize();
					}
				}
			}
		}

		/// <summary>Gets a collection that contains all the columns in the control.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" /> that contains all the columns in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</returns>
		// Token: 0x1700052E RID: 1326
		// (get) Token: 0x06001589 RID: 5513 RVA: 0x0005175C File Offset: 0x0004F95C
		[Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[MergableProperty(false)]
		public DataGridViewColumnCollection Columns
		{
			get
			{
				if (this.dataGridViewColumns == null)
				{
					this.dataGridViewColumns = this.CreateColumnsInstance();
				}
				return this.dataGridViewColumns;
			}
		}

		/// <summary>Gets or sets the currently active cell.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> that represents the current cell, or <see langword="null" /> if there is no current cell. The default is the first cell in the first column or <see langword="null" /> if there are no cells in the control.</returns>
		/// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because changes to the current cell cannot be committed or canceled.-or-The specified cell when setting this property is in a hidden row or column. Re-entrant calling is only allowed when the <see cref="T:System.Windows.Forms.DataGridView" /> is bound to a <see cref="P:System.Windows.Forms.DataGridView.DataSource" />. Re-entrant calling results from a change to the underlying data.</exception>
		/// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
		// Token: 0x1700052F RID: 1327
		// (get) Token: 0x0600158A RID: 5514 RVA: 0x00051778 File Offset: 0x0004F978
		// (set) Token: 0x0600158B RID: 5515 RVA: 0x000517D0 File Offset: 0x0004F9D0
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell CurrentCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1 && this.ptCurrentCell.Y == -1)
				{
					return null;
				}
				DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
			set
			{
				if ((value != null && (value.RowIndex != this.ptCurrentCell.Y || value.ColumnIndex != this.ptCurrentCell.X)) || (value == null && this.ptCurrentCell.X != -1))
				{
					if (value == null)
					{
						this.ClearSelection();
						if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
					else
					{
						if (value.DataGridView != this)
						{
							throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
						}
						if (!this.Columns[value.ColumnIndex].Visible || (this.Rows.GetRowState(value.RowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
						}
						if (!this.ScrollIntoView(value.ColumnIndex, value.RowIndex, true))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						if (this.IsInnerCellOutOfBounds(value.ColumnIndex, value.RowIndex))
						{
							return;
						}
						this.ClearSelection(value.ColumnIndex, value.RowIndex, true);
						if (!this.SetCurrentCellAddressCore(value.ColumnIndex, value.RowIndex, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
				}
			}
		}

		/// <summary>Gets the row and column indexes of the currently active cell.</summary>
		/// <returns>A <see cref="T:System.Drawing.Point" /> that represents the row and column indexes of the currently active cell.</returns>
		// Token: 0x17000530 RID: 1328
		// (get) Token: 0x0600158C RID: 5516 RVA: 0x00051911 File Offset: 0x0004FB11
		[Browsable(false)]
		public Point CurrentCellAddress
		{
			get
			{
				return this.ptCurrentCell;
			}
		}

		// Token: 0x17000531 RID: 1329
		// (get) Token: 0x0600158D RID: 5517 RVA: 0x0005191C File Offset: 0x0004FB1C
		private DataGridViewCell CurrentCellInternal
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.ptCurrentCell.Y);
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
		}

		// Token: 0x17000532 RID: 1330
		// (get) Token: 0x0600158E RID: 5518 RVA: 0x00051958 File Offset: 0x0004FB58
		private bool CurrentCellIsFirstVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null;
				bool flag2 = -1 != this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x17000533 RID: 1331
		// (get) Token: 0x0600158F RID: 5519 RVA: 0x000519C8 File Offset: 0x0004FBC8
		private bool CurrentCellIsLastVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null;
				bool flag2 = -1 != this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x17000534 RID: 1332
		// (get) Token: 0x06001590 RID: 5520 RVA: 0x00051A35 File Offset: 0x0004FC35
		private bool CurrentCellIsEditedAndOnlySelectedCell
		{
			get
			{
				return this.ptCurrentCell.X != -1 && (this.editingControl != null && this.GetCellCount(DataGridViewElementStates.Selected) == 1) && this.CurrentCellInternal.Selected;
			}
		}

		/// <summary>Gets the row containing the current cell.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewRow" /> that represents the row containing the current cell, or <see langword="null" /> if there is no current cell.</returns>
		// Token: 0x17000535 RID: 1333
		// (get) Token: 0x06001591 RID: 5521 RVA: 0x00051A67 File Offset: 0x0004FC67
		[Browsable(false)]
		public DataGridViewRow CurrentRow
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.Rows[this.ptCurrentCell.Y];
			}
		}

		// Token: 0x17000536 RID: 1334
		// (set) Token: 0x06001592 RID: 5522 RVA: 0x00051A90 File Offset: 0x0004FC90
		internal Cursor CursorInternal
		{
			set
			{
				this.dataGridViewState2[2097152] = true;
				try
				{
					this.Cursor = value;
				}
				finally
				{
					this.dataGridViewState2[2097152] = false;
				}
			}
		}

		// Token: 0x17000537 RID: 1335
		// (get) Token: 0x06001593 RID: 5523 RVA: 0x00051ADC File Offset: 0x0004FCDC
		internal DataGridView.DataGridViewDataConnection DataConnection
		{
			get
			{
				return this.dataConnection;
			}
		}

		/// <summary>Gets or sets the name of the list or table in the data source for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data.</summary>
		/// <returns>The name of the table or list in the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data. The default is <see cref="F:System.String.Empty" />.</returns>
		/// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x17000538 RID: 1336
		// (get) Token: 0x06001594 RID: 5524 RVA: 0x00051AE4 File Offset: 0x0004FCE4
		// (set) Token: 0x06001595 RID: 5525 RVA: 0x00051B00 File Offset: 0x0004FD00
		[DefaultValue("")]
		[SRCategory("CatData")]
		[Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[SRDescription("DataGridViewDataMemberDescr")]
		public string DataMember
		{
			get
			{
				if (this.dataConnection == null)
				{
					return string.Empty;
				}
				return this.dataConnection.DataMember;
			}
			set
			{
				if (value != this.DataMember)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
					}
					this.dataConnection.SetDataConnection(this.DataSource, value);
					this.OnDataMemberChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when value of the <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> property changes.</summary>
		// Token: 0x140000FD RID: 253
		// (add) Token: 0x06001596 RID: 5526 RVA: 0x00051B53 File Offset: 0x0004FD53
		// (remove) Token: 0x06001597 RID: 5527 RVA: 0x00051B66 File Offset: 0x0004FD66
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDataMemberChangedDescr")]
		public event EventHandler DataMemberChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
		}

		/// <summary>Gets or sets the data source that the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data for.</summary>
		/// <returns>The object that contains data for the <see cref="T:System.Windows.Forms.DataGridView" /> to display.</returns>
		/// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x17000539 RID: 1337
		// (get) Token: 0x06001598 RID: 5528 RVA: 0x00051B79 File Offset: 0x0004FD79
		// (set) Token: 0x06001599 RID: 5529 RVA: 0x00051B90 File Offset: 0x0004FD90
		[DefaultValue(null)]
		[SRCategory("CatData")]
		[RefreshProperties(RefreshProperties.Repaint)]
		[AttributeProvider(typeof(IListSource))]
		[SRDescription("DataGridViewDataSourceDescr")]
		public object DataSource
		{
			get
			{
				if (this.dataConnection == null)
				{
					return null;
				}
				return this.dataConnection.DataSource;
			}
			set
			{
				if (value != this.DataSource)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
						this.dataConnection.SetDataConnection(value, this.DataMember);
					}
					else
					{
						if (this.dataConnection.ShouldChangeDataMember(value))
						{
							this.DataMember = "";
						}
						this.dataConnection.SetDataConnection(value, this.DataMember);
						if (value == null)
						{
							this.dataConnection = null;
						}
					}
					this.OnDataSourceChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property changes.</summary>
		// Token: 0x140000FE RID: 254
		// (add) Token: 0x0600159A RID: 5530 RVA: 0x00051C15 File Offset: 0x0004FE15
		// (remove) Token: 0x0600159B RID: 5531 RVA: 0x00051C28 File Offset: 0x0004FE28
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDataSourceChangedDescr")]
		public event EventHandler DataSourceChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
		}

		// Token: 0x1700053A RID: 1338
		// (get) Token: 0x0600159C RID: 5532 RVA: 0x0003C48E File Offset: 0x0003A68E
		private static SolidBrush DefaultBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Window;
			}
		}

		// Token: 0x1700053B RID: 1339
		// (get) Token: 0x0600159D RID: 5533 RVA: 0x0003C4A6 File Offset: 0x0003A6A6
		private static SolidBrush DefaultBackgroundBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.AppWorkspace;
			}
		}

		/// <summary>Gets or sets the default cell style to be applied to the cells in the <see cref="T:System.Windows.Forms.DataGridView" /> if no other cell style properties are set.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied as the default style.</returns>
		// Token: 0x1700053C RID: 1340
		// (get) Token: 0x0600159E RID: 5534 RVA: 0x00051C3C File Offset: 0x0004FE3C
		// (set) Token: 0x0600159F RID: 5535 RVA: 0x00051E0C File Offset: 0x0005000C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_DefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle DefaultCellStyle
		{
			get
			{
				if (this.defaultCellStyle == null)
				{
					this.defaultCellStyle = this.DefaultDefaultCellStyle;
					return this.defaultCellStyle;
				}
				if (this.defaultCellStyle.BackColor == Color.Empty || this.defaultCellStyle.ForeColor == Color.Empty || this.defaultCellStyle.SelectionBackColor == Color.Empty || this.defaultCellStyle.SelectionForeColor == Color.Empty || this.defaultCellStyle.Font == null || this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet || this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
				{
					DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle(this.defaultCellStyle);
					dataGridViewCellStyle.Scope = DataGridViewCellStyleScopes.None;
					if (this.defaultCellStyle.BackColor == Color.Empty)
					{
						dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
					}
					if (this.defaultCellStyle.ForeColor == Color.Empty)
					{
						dataGridViewCellStyle.ForeColor = base.ForeColor;
						this.dataGridViewState1[1024] = true;
					}
					if (this.defaultCellStyle.SelectionBackColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
					}
					if (this.defaultCellStyle.SelectionForeColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
					}
					if (this.defaultCellStyle.Font == null)
					{
						dataGridViewCellStyle.Font = base.Font;
						this.dataGridViewState1[33554432] = true;
					}
					if (this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet)
					{
						dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
					}
					if (this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
					{
						dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
					}
					dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
					return dataGridViewCellStyle;
				}
				return this.defaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.DefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.DataGridView);
				this.defaultCellStyle = value;
				if (value != null)
				{
					this.defaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.DefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = (differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize);
					this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x1700053D RID: 1341
		// (get) Token: 0x060015A0 RID: 5536 RVA: 0x00051E6C File Offset: 0x0005006C
		private DataGridViewCellStyle DefaultDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
				dataGridViewCellStyle.ForeColor = base.ForeColor;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				this.dataGridViewState1[33554432] = true;
				this.dataGridViewState1[1024] = true;
				return dataGridViewCellStyle;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" /> property changes.</summary>
		// Token: 0x140000FF RID: 255
		// (add) Token: 0x060015A1 RID: 5537 RVA: 0x00051F01 File Offset: 0x00050101
		// (remove) Token: 0x060015A2 RID: 5538 RVA: 0x00051F14 File Offset: 0x00050114
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDefaultCellStyleChangedDescr")]
		public event EventHandler DefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x1700053E RID: 1342
		// (get) Token: 0x060015A3 RID: 5539 RVA: 0x0003C49A File Offset: 0x0003A69A
		private static SolidBrush DefaultForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.WindowText;
			}
		}

		// Token: 0x1700053F RID: 1343
		// (get) Token: 0x060015A4 RID: 5540 RVA: 0x00051F27 File Offset: 0x00050127
		private static Color DefaultGridColor
		{
			get
			{
				return SystemColors.ControlDark;
			}
		}

		// Token: 0x17000540 RID: 1344
		// (get) Token: 0x060015A5 RID: 5541 RVA: 0x0003C4B2 File Offset: 0x0003A6B2
		private static SolidBrush DefaultHeadersBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Control;
			}
		}

		// Token: 0x17000541 RID: 1345
		// (get) Token: 0x060015A6 RID: 5542 RVA: 0x00051F30 File Offset: 0x00050130
		private DataGridViewCellStyle DefaultRowHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				this.dataGridViewState1[134217728] = true;
				return dataGridViewCellStyle;
			}
		}

		// Token: 0x17000542 RID: 1346
		// (get) Token: 0x060015A7 RID: 5543 RVA: 0x00051FB9 File Offset: 0x000501B9
		private static SolidBrush DefaultSelectionBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Highlight;
			}
		}

		// Token: 0x17000543 RID: 1347
		// (get) Token: 0x060015A8 RID: 5544 RVA: 0x00051FC5 File Offset: 0x000501C5
		private static SolidBrush DefaultSelectionForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.HighlightText;
			}
		}

		/// <summary>Gets the default initial size of the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Size" /> representing the initial size of the control, which is 240 pixels wide by 150 pixels high.</returns>
		// Token: 0x17000544 RID: 1348
		// (get) Token: 0x060015A9 RID: 5545 RVA: 0x00051FD1 File Offset: 0x000501D1
		protected override Size DefaultSize
		{
			get
			{
				return new Size(240, 150);
			}
		}

		// Token: 0x17000545 RID: 1349
		// (get) Token: 0x060015AA RID: 5546 RVA: 0x00051FE2 File Offset: 0x000501E2
		internal DataGridView.DisplayedBandsData DisplayedBandsInfo
		{
			get
			{
				return this.displayedBandsInfo;
			}
		}

		/// <summary>Gets the rectangle that represents the display area of the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</returns>
		// Token: 0x17000546 RID: 1350
		// (get) Token: 0x060015AB RID: 5547 RVA: 0x00051FEC File Offset: 0x000501EC
		public override Rectangle DisplayRectangle
		{
			get
			{
				Rectangle clientRectangle = base.ClientRectangle;
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					clientRectangle.Height -= this.horizScrollBar.Height;
				}
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					clientRectangle.Width -= this.vertScrollBar.Width;
					if (this.RightToLeftInternal)
					{
						clientRectangle.X = this.vertScrollBar.Width;
					}
				}
				return clientRectangle;
			}
		}

		/// <summary>Gets or sets a value indicating how to begin editing a cell.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> value.</exception>
		/// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x17000547 RID: 1351
		// (get) Token: 0x060015AC RID: 5548 RVA: 0x00052077 File Offset: 0x00050277
		// (set) Token: 0x060015AD RID: 5549 RVA: 0x00052080 File Offset: 0x00050280
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewEditMode.EditOnKeystrokeOrF2)]
		[SRDescription("DataGridView_EditModeDescr")]
		public DataGridViewEditMode EditMode
		{
			get
			{
				return this.editMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewEditMode));
				}
				if (this.editMode != value)
				{
					this.editMode = value;
					this.OnEditModeChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.EditMode" /> property changes.</summary>
		// Token: 0x14000100 RID: 256
		// (add) Token: 0x060015AE RID: 5550 RVA: 0x000520CE File Offset: 0x000502CE
		// (remove) Token: 0x060015AF RID: 5551 RVA: 0x000520E1 File Offset: 0x000502E1
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_EditModeChangedDescr")]
		public event EventHandler EditModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
		}

		// Token: 0x17000548 RID: 1352
		// (get) Token: 0x060015B0 RID: 5552 RVA: 0x000520F4 File Offset: 0x000502F4
		internal Point MouseEnteredCellAddress
		{
			get
			{
				return this.ptMouseEnteredCell;
			}
		}

		// Token: 0x17000549 RID: 1353
		// (get) Token: 0x060015B1 RID: 5553 RVA: 0x000520FC File Offset: 0x000502FC
		private bool MouseOverEditingControl
		{
			get
			{
				if (this.editingControl != null)
				{
					Point pt = base.PointToClient(Control.MousePosition);
					return this.editingControl.Bounds.Contains(pt);
				}
				return false;
			}
		}

		// Token: 0x1700054A RID: 1354
		// (get) Token: 0x060015B2 RID: 5554 RVA: 0x00052134 File Offset: 0x00050334
		private bool MouseOverEditingPanel
		{
			get
			{
				if (this.editingPanel != null)
				{
					Point pt = base.PointToClient(Control.MousePosition);
					return this.editingPanel.Bounds.Contains(pt);
				}
				return false;
			}
		}

		// Token: 0x1700054B RID: 1355
		// (get) Token: 0x060015B3 RID: 5555 RVA: 0x0005216C File Offset: 0x0005036C
		private bool MouseOverScrollBar
		{
			get
			{
				Point pt = base.PointToClient(Control.MousePosition);
				return (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(pt)) || (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(pt));
			}
		}

		/// <summary>Gets the control hosted by the current cell, if a cell with an editing control is in edit mode.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.Control" /> hosted by the current cell.</returns>
		// Token: 0x1700054C RID: 1356
		// (get) Token: 0x060015B4 RID: 5556 RVA: 0x000521DD File Offset: 0x000503DD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Control EditingControl
		{
			get
			{
				return this.editingControl;
			}
		}

		// Token: 0x1700054D RID: 1357
		// (get) Token: 0x060015B5 RID: 5557 RVA: 0x000521E5 File Offset: 0x000503E5
		internal AccessibleObject EditingControlAccessibleObject
		{
			get
			{
				return this.EditingControl.AccessibilityObject;
			}
		}

		/// <summary>Gets the panel that contains the <see cref="P:System.Windows.Forms.DataGridView.EditingControl" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.Panel" /> that contains the <see cref="P:System.Windows.Forms.DataGridView.EditingControl" />.</returns>
		// Token: 0x1700054E RID: 1358
		// (get) Token: 0x060015B6 RID: 5558 RVA: 0x000521F2 File Offset: 0x000503F2
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Panel EditingPanel
		{
			get
			{
				if (this.editingPanel == null)
				{
					this.editingPanel = (AccessibilityImprovements.Level3 ? new DataGridView.DataGridViewEditingPanel(this) : new Panel());
					this.editingPanel.AccessibleName = SR.GetString("DataGridView_AccEditingPanelAccName");
				}
				return this.editingPanel;
			}
		}

		// Token: 0x1700054F RID: 1359
		// (get) Token: 0x060015B7 RID: 5559 RVA: 0x00052234 File Offset: 0x00050434
		internal DataGridView.DataGridViewEditingPanelAccessibleObject EditingPanelAccessibleObject
		{
			get
			{
				if (this.editingPanelAccessibleObject == null)
				{
					IntSecurity.UnmanagedCode.Assert();
					try
					{
						this.editingPanelAccessibleObject = new DataGridView.DataGridViewEditingPanelAccessibleObject(this, this.EditingPanel);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
				}
				return this.editingPanelAccessibleObject;
			}
		}

		/// <summary>Gets or sets a value indicating whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
		/// <returns>
		///     <see langword="true" /> if visual styles are enabled for the headers; otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
		// Token: 0x17000550 RID: 1360
		// (get) Token: 0x060015B8 RID: 5560 RVA: 0x00052284 File Offset: 0x00050484
		// (set) Token: 0x060015B9 RID: 5561 RVA: 0x00052293 File Offset: 0x00050493
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_EnableHeadersVisualStylesDescr")]
		public bool EnableHeadersVisualStyles
		{
			get
			{
				return this.dataGridViewState2[64];
			}
			set
			{
				if (this.dataGridViewState2[64] != value)
				{
					this.dataGridViewState2[64] = value;
					this.OnGlobalAutoSize();
				}
			}
		}

		/// <summary>Gets or sets the first cell currently displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; typically, this cell is in the upper left corner.</summary>
		/// <returns>The first <see cref="T:System.Windows.Forms.DataGridViewCell" /> currently displayed in the control.</returns>
		/// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />. </exception>
		/// <exception cref="T:System.InvalidOperationException">The specified cell when setting this property has a <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> or <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> property value of -1, indicating that it is a header cell or a shared cell. -or-The specified cell when setting this property has a <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> property value of <see langword="false" />.</exception>
		// Token: 0x17000551 RID: 1361
		// (get) Token: 0x060015BA RID: 5562 RVA: 0x000522BC File Offset: 0x000504BC
		// (set) Token: 0x060015BB RID: 5563 RVA: 0x00052300 File Offset: 0x00050500
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell FirstDisplayedCell
		{
			get
			{
				Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
				if (firstDisplayedCellAddress.X >= 0)
				{
					return this.Rows[firstDisplayedCellAddress.Y].Cells[firstDisplayedCellAddress.X];
				}
				return null;
			}
			set
			{
				if (value != null)
				{
					if (value.DataGridView != this)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
					}
					if (value.RowIndex == -1 || value.ColumnIndex == -1)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell"));
					}
					if (!value.Visible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeInvisible"));
					}
					if (!value.Frozen)
					{
						if (!this.Rows[value.RowIndex].Frozen)
						{
							this.FirstDisplayedScrollingRowIndex = value.RowIndex;
						}
						if (!this.Columns[value.ColumnIndex].Frozen)
						{
							this.FirstDisplayedScrollingColumnIndex = value.ColumnIndex;
						}
					}
				}
			}
		}

		// Token: 0x17000552 RID: 1362
		// (get) Token: 0x060015BC RID: 5564 RVA: 0x000523B8 File Offset: 0x000505B8
		private Point FirstDisplayedCellAddress
		{
			get
			{
				Point result = new Point(-1, -1);
				result.Y = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (result.Y == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					result.Y = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				if (result.Y >= 0)
				{
					result.X = this.FirstDisplayedColumnIndex;
				}
				return result;
			}
		}

		// Token: 0x17000553 RID: 1363
		// (get) Token: 0x060015BD RID: 5565 RVA: 0x00052424 File Offset: 0x00050624
		internal int FirstDisplayedColumnIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int result = -1;
				DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
				if (firstColumn != null)
				{
					if (firstColumn.Frozen)
					{
						result = firstColumn.Index;
					}
					else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
					{
						result = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					}
				}
				return result;
			}
		}

		// Token: 0x17000554 RID: 1364
		// (get) Token: 0x060015BE RID: 5566 RVA: 0x0005247C File Offset: 0x0005067C
		internal int FirstDisplayedRowIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num != -1 && (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				return num;
			}
		}

		/// <summary>Gets the width of the portion of the column that is currently scrolled out of view..</summary>
		/// <returns>The width of the portion of the column that is scrolled out of view.</returns>
		// Token: 0x17000555 RID: 1365
		// (get) Token: 0x060015BF RID: 5567 RVA: 0x000524D0 File Offset: 0x000506D0
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingColumnHiddenWidth
		{
			get
			{
				return this.negOffset;
			}
		}

		/// <summary>Gets or sets the index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of columns in the control minus 1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> property value of <see langword="false" />.-or-The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewColumn.Frozen" /> property value of <see langword="true" />.</exception>
		// Token: 0x17000556 RID: 1366
		// (get) Token: 0x060015C0 RID: 5568 RVA: 0x000524D8 File Offset: 0x000506D8
		// (set) Token: 0x060015C1 RID: 5569 RVA: 0x000524E8 File Offset: 0x000506E8
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingColumnIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingCol;
			}
			set
			{
				if (value < 0 || value >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if (!this.Columns[value].Visible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible"));
				}
				if (this.Columns[value].Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int width = this.layout.Data.Width;
				if (width <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedColumns"));
				}
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (columnsWidth >= width)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsColumnOutOfBounds(value))
				{
					return;
				}
				bool flag = this.ScrollColumnIntoView(value, -1, true, false);
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - width;
				while (this.displayedBandsInfo.FirstDisplayedScrollingCol != value && this.HorizontalOffset < num)
				{
					this.ScrollColumns(1);
				}
			}
		}

		/// <summary>Gets or sets the index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of rows in the control minus 1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a row with a <see cref="P:System.Windows.Forms.DataGridViewRow.Visible" /> property value of <see langword="false" />.-or-The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewRow.Frozen" /> property value of <see langword="true" />.</exception>
		// Token: 0x17000557 RID: 1367
		// (get) Token: 0x060015C2 RID: 5570 RVA: 0x0005261F File Offset: 0x0005081F
		// (set) Token: 0x060015C3 RID: 5571 RVA: 0x0005262C File Offset: 0x0005082C
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingRowIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingRow;
			}
			set
			{
				if (value < 0 || value >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeInvisible"));
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int height = this.layout.Data.Height;
				if (height <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedRows"));
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (rowsHeight >= height)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsRowOutOfBounds(value))
				{
					return;
				}
				if (value > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, value);
					this.ScrollRowsByCount(rowCount, (rowCount > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					return;
				}
				bool flag = this.ScrollRowIntoView(-1, value, true, false);
			}
		}

		/// <summary>Gets or sets the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</returns>
		// Token: 0x17000558 RID: 1368
		// (get) Token: 0x060015C4 RID: 5572 RVA: 0x00012082 File Offset: 0x00010282
		// (set) Token: 0x060015C5 RID: 5573 RVA: 0x0001208A File Offset: 0x0001028A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override Color ForeColor
		{
			get
			{
				return base.ForeColor;
			}
			set
			{
				base.ForeColor = value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ForeColor" /> property value changes. </summary>
		// Token: 0x14000101 RID: 257
		// (add) Token: 0x060015C6 RID: 5574 RVA: 0x00052766 File Offset: 0x00050966
		// (remove) Token: 0x060015C7 RID: 5575 RVA: 0x0005276F File Offset: 0x0005096F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		/// <summary>Gets or sets the font of the text displayed by the <see cref="T:System.Windows.Forms.DataGridView" />. </summary>
		/// <returns>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</returns>
		// Token: 0x17000559 RID: 1369
		// (get) Token: 0x060015C8 RID: 5576 RVA: 0x00012071 File Offset: 0x00010271
		// (set) Token: 0x060015C9 RID: 5577 RVA: 0x00012079 File Offset: 0x00010279
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.Font" /> property value changes. </summary>
		// Token: 0x14000102 RID: 258
		// (add) Token: 0x060015CA RID: 5578 RVA: 0x00052778 File Offset: 0x00050978
		// (remove) Token: 0x060015CB RID: 5579 RVA: 0x00052781 File Offset: 0x00050981
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		/// <summary>Gets or sets the color of the grid lines separating the cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> or <see cref="T:System.Drawing.SystemColors" /> that represents the color of the grid lines. The default is <see cref="F:System.Drawing.KnownColor.ControlDarkDark" />.</returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />. -or-The specified value when setting this property has a <see cref="P:System.Drawing.Color.A" /> property value that is less that 255.</exception>
		// Token: 0x1700055A RID: 1370
		// (get) Token: 0x060015CC RID: 5580 RVA: 0x0005278A File Offset: 0x0005098A
		// (set) Token: 0x060015CD RID: 5581 RVA: 0x00052798 File Offset: 0x00050998
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewGridColorDescr")]
		public Color GridColor
		{
			get
			{
				return this.gridPen.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[]
					{
						"GridColor"
					}));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[]
					{
						"GridColor"
					}));
				}
				if (!value.Equals(this.gridPen.Color))
				{
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
					}
					this.gridPen = new Pen(value);
					this.OnGridColorChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.GridColor" /> property changes.</summary>
		// Token: 0x14000103 RID: 259
		// (add) Token: 0x060015CE RID: 5582 RVA: 0x00052841 File Offset: 0x00050A41
		// (remove) Token: 0x060015CF RID: 5583 RVA: 0x00052854 File Offset: 0x00050A54
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnGridColorChangedDescr")]
		public event EventHandler GridColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
		}

		// Token: 0x060015D0 RID: 5584 RVA: 0x00052868 File Offset: 0x00050A68
		private bool ShouldSerializeGridColor()
		{
			return !this.GridPen.Color.Equals(DataGridView.DefaultGridColor);
		}

		// Token: 0x1700055B RID: 1371
		// (get) Token: 0x060015D1 RID: 5585 RVA: 0x0005289B File Offset: 0x00050A9B
		internal Pen GridPen
		{
			get
			{
				return this.gridPen;
			}
		}

		// Token: 0x1700055C RID: 1372
		// (get) Token: 0x060015D2 RID: 5586 RVA: 0x000528A3 File Offset: 0x00050AA3
		// (set) Token: 0x060015D3 RID: 5587 RVA: 0x000528AC File Offset: 0x00050AAC
		internal int HorizontalOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width;
				if (value > num && num > 0)
				{
					value = num;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				int num2 = this.horizontalOffset - value;
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = value;
				}
				this.horizontalOffset = value;
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleVerticalBorderAdded)
				{
					int num3;
					if (!this.RightToLeftInternal)
					{
						num3 = rectangle.X;
						rectangle.X = num3 - 1;
					}
					num3 = rectangle.Width;
					rectangle.Width = num3 + 1;
				}
				if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					int num3;
					if (!this.RightToLeftInternal)
					{
						num3 = rectangle.X;
						rectangle.X = num3 + 1;
					}
					num3 = rectangle.Width;
					rectangle.Width = num3 - 1;
				}
				if (!this.RightToLeftInternal)
				{
					rectangle.X += columnsWidth;
				}
				rectangle.Width -= columnsWidth;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (this.editingControl != null && !this.Columns[this.ptCurrentCell.X].Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol > -1)
				{
					this.PositionEditingControl(true, false, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				ScrollEventType scrollEventType;
				if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					scrollEventType = ((num2 > 0) ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement);
				}
				else if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
				}
				else
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				NativeMethods.RECT[] rects = this.CreateScrollableRegion(rectangle);
				if (this.RightToLeftInternal)
				{
					num2 = -num2;
				}
				this.ScrollRectangles(rects, num2);
				if (!this.dataGridViewState2[32768])
				{
					this.OnScroll(scrollEventType, this.horizontalOffset + num2, this.horizontalOffset, ScrollOrientation.HorizontalScroll);
				}
				this.FlushDisplayedChanged();
			}
		}

		/// <summary>Gets the horizontal scroll bar of the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the horizontal scroll bar.</returns>
		// Token: 0x1700055D RID: 1373
		// (get) Token: 0x060015D4 RID: 5588 RVA: 0x00052B1E File Offset: 0x00050D1E
		protected ScrollBar HorizontalScrollBar
		{
			get
			{
				return this.horizScrollBar;
			}
		}

		/// <summary>Gets or sets the number of pixels by which the control is scrolled horizontally. </summary>
		/// <returns>The number of pixels by which the control is scrolled horizontally.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
		// Token: 0x1700055E RID: 1374
		// (get) Token: 0x060015D5 RID: 5589 RVA: 0x000528A3 File Offset: 0x00050AA3
		// (set) Token: 0x060015D6 RID: 5590 RVA: 0x00052B28 File Offset: 0x00050D28
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int HorizontalScrollingOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("HorizontalScrollingOffset", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"HorizontalScrollingOffset",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 0 && this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width <= 0)
				{
					return;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				this.HorizontalOffset = value;
			}
		}

		// Token: 0x1700055F RID: 1375
		// (get) Token: 0x060015D7 RID: 5591 RVA: 0x00052BB3 File Offset: 0x00050DB3
		private Timer HorizScrollTimer
		{
			get
			{
				if (this.horizScrollTimer == null)
				{
					this.horizScrollTimer = new Timer();
					this.horizScrollTimer.Tick += this.HorizScrollTimer_Tick;
				}
				return this.horizScrollTimer;
			}
		}

		// Token: 0x17000560 RID: 1376
		// (get) Token: 0x060015D8 RID: 5592 RVA: 0x00052BE5 File Offset: 0x00050DE5
		private bool InAdjustFillingColumns
		{
			get
			{
				return this.dataGridViewOper[524288] || this.dataGridViewOper[262144];
			}
		}

		// Token: 0x17000561 RID: 1377
		// (get) Token: 0x060015D9 RID: 5593 RVA: 0x00052C0B File Offset: 0x00050E0B
		internal bool InBeginEdit
		{
			get
			{
				return this.dataGridViewOper[2097152];
			}
		}

		// Token: 0x17000562 RID: 1378
		// (get) Token: 0x060015DA RID: 5594 RVA: 0x00052C1D File Offset: 0x00050E1D
		// (set) Token: 0x060015DB RID: 5595 RVA: 0x00052C2F File Offset: 0x00050E2F
		internal bool InDisplayIndexAdjustments
		{
			get
			{
				return this.dataGridViewOper[2048];
			}
			set
			{
				this.dataGridViewOper[2048] = value;
			}
		}

		// Token: 0x17000563 RID: 1379
		// (get) Token: 0x060015DC RID: 5596 RVA: 0x00052C42 File Offset: 0x00050E42
		internal bool InEndEdit
		{
			get
			{
				return this.dataGridViewOper[4194304];
			}
		}

		// Token: 0x17000564 RID: 1380
		// (get) Token: 0x060015DD RID: 5597 RVA: 0x00052C54 File Offset: 0x00050E54
		private DataGridViewCellStyle InheritedEditingCellStyle
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.CurrentCellInternal.GetInheritedStyleInternal(this.ptCurrentCell.Y);
			}
		}

		// Token: 0x17000565 RID: 1381
		// (get) Token: 0x060015DE RID: 5598 RVA: 0x00052C7C File Offset: 0x00050E7C
		internal bool InInitialization
		{
			get
			{
				return this.dataGridViewState2[524288];
			}
		}

		// Token: 0x17000566 RID: 1382
		// (get) Token: 0x060015DF RID: 5599 RVA: 0x00052C8E File Offset: 0x00050E8E
		internal bool InSortOperation
		{
			get
			{
				return this.dataGridViewOper[64];
			}
		}

		/// <summary>Gets a value indicating whether the current cell has uncommitted changes.</summary>
		/// <returns>
		///     <see langword="true" /> if the current cell has uncommitted changes; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000567 RID: 1383
		// (get) Token: 0x060015E0 RID: 5600 RVA: 0x00052C9D File Offset: 0x00050E9D
		[Browsable(false)]
		public bool IsCurrentCellDirty
		{
			get
			{
				return this.dataGridViewState1[131072];
			}
		}

		// Token: 0x17000568 RID: 1384
		// (set) Token: 0x060015E1 RID: 5601 RVA: 0x00052CAF File Offset: 0x00050EAF
		private bool IsCurrentCellDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[131072])
				{
					this.dataGridViewState1[131072] = value;
					this.OnCurrentCellDirtyStateChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Gets a value indicating whether the currently active cell is being edited.</summary>
		/// <returns>
		///     <see langword="true" /> if the current cell is being edited; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000569 RID: 1385
		// (get) Token: 0x060015E2 RID: 5602 RVA: 0x00052CE0 File Offset: 0x00050EE0
		[Browsable(false)]
		public bool IsCurrentCellInEditMode
		{
			get
			{
				return this.editingControl != null || this.dataGridViewState1[32768];
			}
		}

		/// <summary>Gets a value indicating whether the current row has uncommitted changes.</summary>
		/// <returns>
		///     <see langword="true" /> if the current row has uncommitted changes; otherwise, <see langword="false" />.</returns>
		// Token: 0x1700056A RID: 1386
		// (get) Token: 0x060015E3 RID: 5603 RVA: 0x00052CFC File Offset: 0x00050EFC
		[Browsable(false)]
		public bool IsCurrentRowDirty
		{
			get
			{
				if (!this.VirtualMode)
				{
					return this.dataGridViewState1[262144] || this.IsCurrentCellDirty;
				}
				QuestionEventArgs questionEventArgs = new QuestionEventArgs(this.dataGridViewState1[262144] || this.IsCurrentCellDirty);
				this.OnRowDirtyStateNeeded(questionEventArgs);
				return questionEventArgs.Response;
			}
		}

		// Token: 0x1700056B RID: 1387
		// (set) Token: 0x060015E4 RID: 5604 RVA: 0x00052D5C File Offset: 0x00050F5C
		internal bool IsCurrentRowDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[262144])
				{
					this.dataGridViewState1[262144] = value;
					if (this.RowHeadersVisible && this.ShowEditingIcon && this.ptCurrentCell.Y >= 0)
					{
						this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
					}
				}
			}
		}

		// Token: 0x1700056C RID: 1388
		// (get) Token: 0x060015E5 RID: 5605 RVA: 0x00052DC0 File Offset: 0x00050FC0
		private bool IsEscapeKeyEffective
		{
			get
			{
				return this.dataGridViewOper[1] || this.dataGridViewOper[2] || this.dataGridViewOper[128] || this.dataGridViewOper[256] || this.dataGridViewOper[32] || this.IsCurrentCellDirty || ((this.VirtualMode || this.DataSource != null) && this.IsCurrentRowDirty) || (this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null) || this.dataGridViewState1[524288];
			}
		}

		// Token: 0x1700056D RID: 1389
		// (get) Token: 0x060015E6 RID: 5606 RVA: 0x00052E64 File Offset: 0x00051064
		private bool IsMinimized
		{
			get
			{
				Form form = base.TopLevelControlInternal as Form;
				return form != null && form.WindowState == FormWindowState.Minimized;
			}
		}

		// Token: 0x1700056E RID: 1390
		// (get) Token: 0x060015E7 RID: 5607 RVA: 0x00052E8C File Offset: 0x0005108C
		internal bool IsRestricted
		{
			get
			{
				if (!this.dataGridViewState1[268435456])
				{
					this.dataGridViewState1[536870912] = false;
					try
					{
						IntSecurity.AllWindows.Demand();
					}
					catch (SecurityException)
					{
						this.dataGridViewState1[536870912] = true;
					}
					catch
					{
						this.dataGridViewState1[536870912] = true;
						this.dataGridViewState1[268435456] = true;
						throw;
					}
					this.dataGridViewState1[268435456] = true;
				}
				return this.dataGridViewState1[536870912];
			}
		}

		// Token: 0x060015E8 RID: 5608 RVA: 0x00052F40 File Offset: 0x00051140
		private bool IsSharedCellReadOnly(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.ReadOnly) || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly);
		}

		// Token: 0x060015E9 RID: 5609 RVA: 0x00052F88 File Offset: 0x00051188
		internal bool IsSharedCellSelected(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Selected) || dataGridViewCell.StateIncludes(DataGridViewElementStates.Selected);
		}

		// Token: 0x060015EA RID: 5610 RVA: 0x00052FC8 File Offset: 0x000511C8
		internal bool IsSharedCellVisible(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Visible;
		}

		// Token: 0x1700056F RID: 1391
		// (get) Token: 0x060015EB RID: 5611 RVA: 0x00052FFF File Offset: 0x000511FF
		internal DataGridView.LayoutData LayoutInfo
		{
			get
			{
				if (this.layout.dirty && base.IsHandleCreated)
				{
					this.PerformLayoutPrivate(false, true, false, false);
				}
				return this.layout;
			}
		}

		// Token: 0x17000570 RID: 1392
		// (get) Token: 0x060015EC RID: 5612 RVA: 0x00053026 File Offset: 0x00051226
		internal Point MouseDownCellAddress
		{
			get
			{
				return this.ptMouseDownCell;
			}
		}

		/// <summary>Gets or sets a value indicating whether the user is allowed to select more than one cell, row, or column of the <see cref="T:System.Windows.Forms.DataGridView" /> at a time.</summary>
		/// <returns>
		///     <see langword="true" /> if the user can select more than one cell, row, or column at a time; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000571 RID: 1393
		// (get) Token: 0x060015ED RID: 5613 RVA: 0x0005302E File Offset: 0x0005122E
		// (set) Token: 0x060015EE RID: 5614 RVA: 0x00053040 File Offset: 0x00051240
		[SRCategory("CatBehavior")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_MultiSelectDescr")]
		public bool MultiSelect
		{
			get
			{
				return this.dataGridViewState1[128];
			}
			set
			{
				if (this.MultiSelect != value)
				{
					this.ClearSelection();
					this.dataGridViewState1[128] = value;
					this.OnMultiSelectChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.MultiSelect" /> property changes.</summary>
		// Token: 0x14000104 RID: 260
		// (add) Token: 0x060015EF RID: 5615 RVA: 0x0005306D File Offset: 0x0005126D
		// (remove) Token: 0x060015F0 RID: 5616 RVA: 0x00053080 File Offset: 0x00051280
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnMultiSelectChangedDescr")]
		public event EventHandler MultiSelectChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
		}

		/// <summary>Gets the index of the row for new records.</summary>
		/// <returns>The index of the row for new records, or -1 if <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> is <see langword="false" />.</returns>
		// Token: 0x17000572 RID: 1394
		// (get) Token: 0x060015F1 RID: 5617 RVA: 0x00053093 File Offset: 0x00051293
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int NewRowIndex
		{
			get
			{
				return this.newRowIndex;
			}
		}

		// Token: 0x17000573 RID: 1395
		// (get) Token: 0x060015F2 RID: 5618 RVA: 0x0005309B File Offset: 0x0005129B
		internal bool NoDimensionChangeAllowed
		{
			get
			{
				return this.noDimensionChangeCount > 0;
			}
		}

		// Token: 0x17000574 RID: 1396
		// (get) Token: 0x060015F3 RID: 5619 RVA: 0x000530A6 File Offset: 0x000512A6
		// (set) Token: 0x060015F4 RID: 5620 RVA: 0x000530AE File Offset: 0x000512AE
		private int NoSelectionChangeCount
		{
			get
			{
				return this.noSelectionChangeCount;
			}
			set
			{
				this.noSelectionChangeCount = value;
				if (value == 0)
				{
					this.FlushSelectionChanged();
				}
			}
		}

		/// <summary>This property is not relevant for this control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> instance.</returns>
		// Token: 0x17000575 RID: 1397
		// (get) Token: 0x060015F5 RID: 5621 RVA: 0x0002049A File Offset: 0x0001E69A
		// (set) Token: 0x060015F6 RID: 5622 RVA: 0x000204A2 File Offset: 0x0001E6A2
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new Padding Padding
		{
			get
			{
				return base.Padding;
			}
			set
			{
				base.Padding = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.Padding" /> property changes.</summary>
		// Token: 0x14000105 RID: 261
		// (add) Token: 0x060015F7 RID: 5623 RVA: 0x000204AB File Offset: 0x0001E6AB
		// (remove) Token: 0x060015F8 RID: 5624 RVA: 0x000204B4 File Offset: 0x0001E6B4
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new event EventHandler PaddingChanged
		{
			add
			{
				base.PaddingChanged += value;
			}
			remove
			{
				base.PaddingChanged -= value;
			}
		}

		// Token: 0x17000576 RID: 1398
		// (get) Token: 0x060015F9 RID: 5625 RVA: 0x000530C0 File Offset: 0x000512C0
		internal DataGridViewCellStyle PlaceholderCellStyle
		{
			get
			{
				if (this.placeholderCellStyle == null)
				{
					this.placeholderCellStyle = new DataGridViewCellStyle();
				}
				return this.placeholderCellStyle;
			}
		}

		/// <summary>Gets or sets a value indicating whether the user can edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>
		///     <see langword="true" /> if the user cannot edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="true" />, the current cell is in edit mode, and the current cell contains changes that cannot be committed. </exception>
		/// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x17000577 RID: 1399
		// (get) Token: 0x060015FA RID: 5626 RVA: 0x000530DB File Offset: 0x000512DB
		// (set) Token: 0x060015FB RID: 5627 RVA: 0x000530F0 File Offset: 0x000512F0
		[Browsable(true)]
		[DefaultValue(false)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ReadOnlyDescr")]
		public bool ReadOnly
		{
			get
			{
				return this.dataGridViewState1[1048576];
			}
			set
			{
				if (value != this.dataGridViewState1[1048576])
				{
					if (value && this.ptCurrentCell.X != -1 && this.IsCurrentCellInEditMode && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
					}
					this.dataGridViewState1[1048576] = value;
					if (value)
					{
						try
						{
							this.dataGridViewOper[16384] = true;
							for (int i = 0; i < this.Columns.Count; i++)
							{
								this.SetReadOnlyColumnCore(i, false);
							}
							int count = this.Rows.Count;
							for (int j = 0; j < count; j++)
							{
								this.SetReadOnlyRowCore(j, false);
							}
						}
						finally
						{
							this.dataGridViewOper[16384] = false;
						}
					}
					this.OnReadOnlyChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ReadOnly" /> property changes.</summary>
		// Token: 0x14000106 RID: 262
		// (add) Token: 0x060015FC RID: 5628 RVA: 0x000531E4 File Offset: 0x000513E4
		// (remove) Token: 0x060015FD RID: 5629 RVA: 0x000531F7 File Offset: 0x000513F7
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnReadOnlyChangedDescr")]
		public event EventHandler ReadOnlyChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
		}

		// Token: 0x060015FE RID: 5630 RVA: 0x0005320A File Offset: 0x0005140A
		private void ResetCurrentCell()
		{
			if (this.ptCurrentCell.X != -1 && !this.SetCurrentCellAddressCore(-1, -1, true, true, false))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
			}
		}

		// Token: 0x17000578 RID: 1400
		// (get) Token: 0x060015FF RID: 5631 RVA: 0x00053237 File Offset: 0x00051437
		internal bool ResizingOperationAboutToStart
		{
			get
			{
				return this.dataGridViewOper[8388608];
			}
		}

		// Token: 0x17000579 RID: 1401
		// (get) Token: 0x06001600 RID: 5632 RVA: 0x0005324C File Offset: 0x0005144C
		internal bool RightToLeftInternal
		{
			get
			{
				if (this.dataGridViewState2[4096])
				{
					return this.dataGridViewState2[2048];
				}
				this.dataGridViewState2[2048] = (this.RightToLeft == RightToLeft.Yes);
				this.dataGridViewState2[4096] = true;
				return this.dataGridViewState2[2048];
			}
		}

		/// <summary>Gets or sets the number of rows displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The number of rows to display in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is less than 0.-or-The specified value is less than 1 and <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> is set to <see langword="true" />. </exception>
		/// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property is set. </exception>
		// Token: 0x1700057A RID: 1402
		// (get) Token: 0x06001601 RID: 5633 RVA: 0x000532B6 File Offset: 0x000514B6
		// (set) Token: 0x06001602 RID: 5634 RVA: 0x000532C4 File Offset: 0x000514C4
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DefaultValue(0)]
		public int RowCount
		{
			get
			{
				return this.Rows.Count;
			}
			set
			{
				if (this.AllowUserToAddRowsInternal)
				{
					if (value < 1)
					{
						throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
						{
							"RowCount",
							value.ToString(CultureInfo.CurrentCulture),
							1.ToString(CultureInfo.CurrentCulture)
						}));
					}
				}
				else if (value < 0)
				{
					throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetRowCountOnDataBoundDataGridView"));
				}
				if (value != this.Rows.Count)
				{
					if (value == 0)
					{
						this.Rows.Clear();
						return;
					}
					if (value < this.Rows.Count)
					{
						while (value < this.Rows.Count)
						{
							int count = this.Rows.Count;
							this.Rows.RemoveAt(count - (this.AllowUserToAddRowsInternal ? 2 : 1));
							if (this.Rows.Count >= count)
							{
								return;
							}
						}
						return;
					}
					if (this.Columns.Count == 0)
					{
						DataGridViewTextBoxColumn dataGridViewColumn = new DataGridViewTextBoxColumn();
						this.Columns.Add(dataGridViewColumn);
					}
					int num = value - this.Rows.Count;
					if (num > 0)
					{
						this.Rows.Add(num);
					}
				}
			}
		}

		/// <summary>Gets or sets the border style of the row header cells.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />.</exception>
		// Token: 0x1700057B RID: 1403
		// (get) Token: 0x06001603 RID: 5635 RVA: 0x00053434 File Offset: 0x00051634
		// (set) Token: 0x06001604 RID: 5636 RVA: 0x00053480 File Offset: 0x00051680
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowHeadersBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		public DataGridViewHeaderBorderStyle RowHeadersBorderStyle
		{
			get
			{
				switch (this.advancedRowHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.RowHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[]
						{
							"RowHeadersBorderStyle"
						}));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" /> property changes.</summary>
		// Token: 0x14000107 RID: 263
		// (add) Token: 0x06001605 RID: 5637 RVA: 0x00053570 File Offset: 0x00051770
		// (remove) Token: 0x06001606 RID: 5638 RVA: 0x00053583 File Offset: 0x00051783
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeadersBorderStyleChangedDescr")]
		public event EventHandler RowHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the default style applied to the row header cells.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default style applied to the row header cells.</returns>
		// Token: 0x1700057C RID: 1404
		// (get) Token: 0x06001607 RID: 5639 RVA: 0x00053596 File Offset: 0x00051796
		// (set) Token: 0x06001608 RID: 5640 RVA: 0x000535B4 File Offset: 0x000517B4
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowHeadersDefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle RowHeadersDefaultCellStyle
		{
			get
			{
				if (this.rowHeadersDefaultCellStyle == null)
				{
					this.rowHeadersDefaultCellStyle = this.DefaultRowHeadersDefaultCellStyle;
				}
				return this.rowHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.RowHeaders);
				this.rowHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.rowHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = (differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize);
					this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" /> property changes.</summary>
		// Token: 0x14000108 RID: 264
		// (add) Token: 0x06001609 RID: 5641 RVA: 0x00053613 File Offset: 0x00051813
		// (remove) Token: 0x0600160A RID: 5642 RVA: 0x00053626 File Offset: 0x00051826
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowHeadersDefaultCellStyleChangedDescr")]
		public event EventHandler RowHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the column that contains row headers is displayed.</summary>
		/// <returns>
		///     <see langword="true" /> if the column that contains row headers is displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and the <see cref="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" /> property is set to <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />.</exception>
		// Token: 0x1700057D RID: 1405
		// (get) Token: 0x0600160B RID: 5643 RVA: 0x00053639 File Offset: 0x00051839
		// (set) Token: 0x0600160C RID: 5644 RVA: 0x00053648 File Offset: 0x00051848
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridViewRowHeadersVisibleDescr")]
		public bool RowHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[16];
			}
			set
			{
				if (this.RowHeadersVisible != value)
				{
					if (!value && (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_RowHeadersCannotBeInvisible"));
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersVisible))
					{
						this.dataGridViewState1[16] = value;
						this.layout.RowHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnRowHeadersGlobalAutoSize(value);
					}
				}
			}
		}

		/// <summary>Gets or sets the width, in pixels, of the column that contains the row headers.</summary>
		/// <returns>The width, in pixels, of the column that contains row headers. The default is 43.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum width of 4 pixels or is greater than the maximum width of 32768 pixels.</exception>
		// Token: 0x1700057E RID: 1406
		// (get) Token: 0x0600160D RID: 5645 RVA: 0x00053700 File Offset: 0x00051900
		// (set) Token: 0x0600160E RID: 5646 RVA: 0x00053708 File Offset: 0x00051908
		[SRCategory("CatLayout")]
		[Localizable(true)]
		[SRDescription("DataGridView_RowHeadersWidthDescr")]
		public int RowHeadersWidth
		{
			get
			{
				return this.rowHeadersWidth;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
				{
					this.cachedRowHeadersWidth = value;
					return;
				}
				if (this.rowHeadersWidth != value)
				{
					this.RowHeadersWidthInternal = value;
				}
			}
		}

		// Token: 0x1700057F RID: 1407
		// (set) Token: 0x0600160F RID: 5647 RVA: 0x000537D4 File Offset: 0x000519D4
		private int RowHeadersWidthInternal
		{
			set
			{
				using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersWidth))
				{
					this.rowHeadersWidth = value;
					if (this.AutoSize)
					{
						this.InvalidateInside();
					}
					else if (this.layout.RowHeadersVisible)
					{
						this.PerformLayoutPrivate(false, false, true, true);
						this.InvalidateInside();
					}
					this.OnRowHeadersWidthChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidth" /> property changes.</summary>
		// Token: 0x14000109 RID: 265
		// (add) Token: 0x06001610 RID: 5648 RVA: 0x00053854 File Offset: 0x00051A54
		// (remove) Token: 0x06001611 RID: 5649 RVA: 0x00053867 File Offset: 0x00051A67
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowHeadersWidthChangedDescr")]
		public event EventHandler RowHeadersWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
		}

		// Token: 0x06001612 RID: 5650 RVA: 0x0005387A File Offset: 0x00051A7A
		private bool ShouldSerializeRowHeadersWidth()
		{
			return (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing) && 41 != this.RowHeadersWidth;
		}

		/// <summary>Gets or sets a value indicating whether the width of the row headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers. </summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value indicating the mode by which the width of the row headers can be adjusted. The default is <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x17000580 RID: 1408
		// (get) Token: 0x06001613 RID: 5651 RVA: 0x0005389C File Offset: 0x00051A9C
		// (set) Token: 0x06001614 RID: 5652 RVA: 0x000538A4 File Offset: 0x00051AA4
		[DefaultValue(DataGridViewRowHeadersWidthSizeMode.EnableResizing)]
		[RefreshProperties(RefreshProperties.All)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowHeadersWidthSizeModeDescr")]
		public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode
		{
			get
			{
				return this.rowHeadersWidthSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewRowHeadersWidthSizeMode));
				}
				if (this.rowHeadersWidthSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs(this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
					this.rowHeadersWidthSizeMode = value;
					this.OnRowHeadersWidthSizeModeChanged(e);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" /> property changes.</summary>
		// Token: 0x1400010A RID: 266
		// (add) Token: 0x06001615 RID: 5653 RVA: 0x0005390B File Offset: 0x00051B0B
		// (remove) Token: 0x06001616 RID: 5654 RVA: 0x0005391E File Offset: 0x00051B1E
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeadersWidthSizeModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
		}

		/// <summary>Gets a collection that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRowCollection" /> that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000581 RID: 1409
		// (get) Token: 0x06001617 RID: 5655 RVA: 0x00053931 File Offset: 0x00051B31
		[Browsable(false)]
		public DataGridViewRowCollection Rows
		{
			get
			{
				if (this.dataGridViewRows == null)
				{
					this.dataGridViewRows = this.CreateRowsInstance();
				}
				return this.dataGridViewRows;
			}
		}

		/// <summary>Gets or sets the default style applied to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000582 RID: 1410
		// (get) Token: 0x06001618 RID: 5656 RVA: 0x0005394D File Offset: 0x00051B4D
		// (set) Token: 0x06001619 RID: 5657 RVA: 0x00053978 File Offset: 0x00051B78
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowsDefaultCellStyleDescr")]
		public DataGridViewCellStyle RowsDefaultCellStyle
		{
			get
			{
				if (this.rowsDefaultCellStyle == null)
				{
					this.rowsDefaultCellStyle = new DataGridViewCellStyle();
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				return this.rowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.Rows);
				this.rowsDefaultCellStyle = value;
				if (value != null)
				{
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = (differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize);
					this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" /> property changes.</summary>
		// Token: 0x1400010B RID: 267
		// (add) Token: 0x0600161A RID: 5658 RVA: 0x000539D7 File Offset: 0x00051BD7
		// (remove) Token: 0x0600161B RID: 5659 RVA: 0x000539EA File Offset: 0x00051BEA
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowsDefaultCellStyleChangedDescr")]
		public event EventHandler RowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the row that represents the template for all the rows in the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRow" /> representing the row template.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified row when setting this property has its <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property set.</exception>
		// Token: 0x17000583 RID: 1411
		// (get) Token: 0x0600161C RID: 5660 RVA: 0x000539FD File Offset: 0x00051BFD
		// (set) Token: 0x0600161D RID: 5661 RVA: 0x00053A18 File Offset: 0x00051C18
		[SRCategory("CatAppearance")]
		[Browsable(true)]
		[SRDescription("DataGridView_RowTemplateDescr")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DataGridViewRow RowTemplate
		{
			get
			{
				if (this.rowTemplate == null)
				{
					this.rowTemplate = new DataGridViewRow();
				}
				return this.rowTemplate;
			}
			set
			{
				if (value != null && value.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				this.rowTemplate = value;
			}
		}

		// Token: 0x0600161E RID: 5662 RVA: 0x00053A49 File Offset: 0x00051C49
		private bool ShouldSerializeRowTemplate()
		{
			return this.rowTemplate != null;
		}

		// Token: 0x17000584 RID: 1412
		// (get) Token: 0x0600161F RID: 5663 RVA: 0x00053A54 File Offset: 0x00051C54
		internal DataGridViewRow RowTemplateClone
		{
			get
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)this.RowTemplate.Clone();
				this.CompleteCellsCollection(dataGridViewRow);
				return dataGridViewRow;
			}
		}

		/// <summary>Gets or sets the type of scroll bars to display for the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ScrollBars" /> values. The default is <see cref="F:System.Windows.Forms.ScrollBars.Both" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.ScrollBars" /> value. </exception>
		/// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because the <see cref="T:System.Windows.Forms.DataGridView" /> is unable to scroll due to a cell change that cannot be committed or canceled. </exception>
		// Token: 0x17000585 RID: 1413
		// (get) Token: 0x06001620 RID: 5664 RVA: 0x00053A7A File Offset: 0x00051C7A
		// (set) Token: 0x06001621 RID: 5665 RVA: 0x00053A84 File Offset: 0x00051C84
		[DefaultValue(ScrollBars.Both)]
		[Localizable(true)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_ScrollBarsDescr")]
		public ScrollBars ScrollBars
		{
			get
			{
				return this.scrollBars;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(ScrollBars));
				}
				if (this.scrollBars != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ScrollBars))
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstColumn != null && firstRow != -1 && !this.ScrollIntoView(firstColumn.Index, firstRow, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						this.scrollBars = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
					}
				}
			}
		}

		/// <summary>Gets the collection of cells selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection" /> that represents the cells selected by the user.</returns>
		// Token: 0x17000586 RID: 1414
		// (get) Token: 0x06001622 RID: 5666 RVA: 0x00053B5C File Offset: 0x00051D5C
		[Browsable(false)]
		public DataGridViewSelectedCellCollection SelectedCells
		{
			get
			{
				DataGridViewSelectedCellCollection dataGridViewSelectedCellCollection = new DataGridViewSelectedCellCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int index = (int)obj;
						DataGridViewRow dataGridViewRow = this.Rows[index];
						foreach (object obj2 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)obj2;
							dataGridViewSelectedCellCollection.Add(dataGridViewCell);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int index2 = (int)obj3;
						foreach (object obj4 in ((IEnumerable)this.Rows))
						{
							DataGridViewRow dataGridViewRow2 = (DataGridViewRow)obj4;
							dataGridViewSelectedCellCollection.Add(dataGridViewRow2.Cells[index2]);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				}
				return dataGridViewSelectedCellCollection;
			}
		}

		/// <summary>Gets the collection of columns selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection" /> that represents the columns selected by the user.</returns>
		// Token: 0x17000587 RID: 1415
		// (get) Token: 0x06001623 RID: 5667 RVA: 0x00053D2C File Offset: 0x00051F2C
		[Browsable(false)]
		public DataGridViewSelectedColumnCollection SelectedColumns
		{
			get
			{
				DataGridViewSelectedColumnCollection dataGridViewSelectedColumnCollection = new DataGridViewSelectedColumnCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int index = (int)obj;
						dataGridViewSelectedColumnCollection.Add(this.Columns[index]);
					}
					break;
				}
				return dataGridViewSelectedColumnCollection;
			}
		}

		/// <summary>Gets the collection of rows selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection" /> that contains the rows selected by the user.</returns>
		// Token: 0x17000588 RID: 1416
		// (get) Token: 0x06001624 RID: 5668 RVA: 0x00053DC0 File Offset: 0x00051FC0
		[Browsable(false)]
		public DataGridViewSelectedRowCollection SelectedRows
		{
			get
			{
				DataGridViewSelectedRowCollection dataGridViewSelectedRowCollection = new DataGridViewSelectedRowCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int index = (int)obj;
						dataGridViewSelectedRowCollection.Add(this.Rows[index]);
					}
					break;
				}
				return dataGridViewSelectedRowCollection;
			}
		}

		/// <summary>Gets or sets a value indicating how the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> can be selected.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> value.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> or <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect" /> and the <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> property of one or more columns is set to <see cref="F:System.Windows.Forms.DataGridViewColumnSortMode.Automatic" />.</exception>
		// Token: 0x17000589 RID: 1417
		// (get) Token: 0x06001625 RID: 5669 RVA: 0x00053E54 File Offset: 0x00052054
		// (set) Token: 0x06001626 RID: 5670 RVA: 0x00053E5C File Offset: 0x0005205C
		[Browsable(true)]
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewSelectionMode.RowHeaderSelect)]
		[SRDescription("DataGridView_SelectionModeDescr")]
		public DataGridViewSelectionMode SelectionMode
		{
			get
			{
				return this.selectionMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewSelectionMode));
				}
				if (this.SelectionMode != value)
				{
					if (!this.dataGridViewState2[524288] && (value == DataGridViewSelectionMode.FullColumnSelect || value == DataGridViewSelectionMode.ColumnHeaderSelect))
					{
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
							if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[]
								{
									value.ToString()
								}));
							}
						}
					}
					this.ClearSelection();
					this.selectionMode = value;
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether to show cell errors.</summary>
		/// <returns>
		///     <see langword="true" /> if a red glyph will appear in a cell that fails validation; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700058A RID: 1418
		// (get) Token: 0x06001627 RID: 5671 RVA: 0x00053F38 File Offset: 0x00052138
		// (set) Token: 0x06001628 RID: 5672 RVA: 0x00053F4C File Offset: 0x0005214C
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowCellErrorsDescr")]
		public bool ShowCellErrors
		{
			get
			{
				return this.dataGridViewState2[128];
			}
			set
			{
				if (this.ShowCellErrors != value)
				{
					this.dataGridViewState2[128] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						this.OnGlobalAutoSize();
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(Rectangle.Union(this.layout.Data, this.layout.ColumnHeaders));
						base.Invalidate(this.layout.TopLeftHeader);
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
		/// <returns>
		///     <see langword="true" /> if cell ToolTips are enabled; otherwise, <see langword="false" />.</returns>
		// Token: 0x1700058B RID: 1419
		// (get) Token: 0x06001629 RID: 5673 RVA: 0x0005405B File Offset: 0x0005225B
		// (set) Token: 0x0600162A RID: 5674 RVA: 0x00054070 File Offset: 0x00052270
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowCellToolTipsDescr")]
		public bool ShowCellToolTips
		{
			get
			{
				return this.dataGridViewState2[256];
			}
			set
			{
				if (this.ShowCellToolTips != value)
				{
					this.dataGridViewState2[256] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellErrors))
						{
							bool flag = !string.IsNullOrEmpty(this.toolTipCaption);
							Point mousePosition = Control.MousePosition;
							flag &= base.ClientRectangle.Contains(base.PointToClient(mousePosition));
							this.toolTipControl.Activate(flag);
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.Data);
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
		/// <returns>
		///     <see langword="true" /> if the editing glyph is visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700058C RID: 1420
		// (get) Token: 0x0600162B RID: 5675 RVA: 0x00054178 File Offset: 0x00052378
		// (set) Token: 0x0600162C RID: 5676 RVA: 0x00054188 File Offset: 0x00052388
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowEditingIconDescr")]
		public bool ShowEditingIcon
		{
			get
			{
				return this.dataGridViewState2[1];
			}
			set
			{
				if (this.ShowEditingIcon != value)
				{
					this.dataGridViewState2[1] = value;
					if (this.RowHeadersVisible)
					{
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.IsCurrentRowDirty)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
								return;
							}
						}
						else if (this.IsCurrentCellDirty)
						{
							this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
						}
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether row headers will display error glyphs for each row that contains a data entry error. </summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridViewRow" /> indicates there is an error; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700058D RID: 1421
		// (get) Token: 0x0600162D RID: 5677 RVA: 0x000541F8 File Offset: 0x000523F8
		// (set) Token: 0x0600162E RID: 5678 RVA: 0x0005420C File Offset: 0x0005240C
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowRowErrorsDescr")]
		public bool ShowRowErrors
		{
			get
			{
				return this.dataGridViewState2[512];
			}
			set
			{
				if (this.ShowRowErrors != value)
				{
					this.dataGridViewState2[512] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowCellErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.RowHeaders);
					}
				}
			}
		}

		// Token: 0x1700058E RID: 1422
		// (get) Token: 0x0600162F RID: 5679 RVA: 0x000542F4 File Offset: 0x000524F4
		internal bool SingleHorizontalBorderAdded
		{
			get
			{
				return !this.layout.ColumnHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleHorizontal);
			}
		}

		// Token: 0x1700058F RID: 1423
		// (get) Token: 0x06001630 RID: 5680 RVA: 0x0005431E File Offset: 0x0005251E
		internal bool SingleVerticalBorderAdded
		{
			get
			{
				return !this.layout.RowHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleVertical);
			}
		}

		/// <summary>Gets the column by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewColumn" /> by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</returns>
		// Token: 0x17000590 RID: 1424
		// (get) Token: 0x06001631 RID: 5681 RVA: 0x00054348 File Offset: 0x00052548
		[Browsable(false)]
		public DataGridViewColumn SortedColumn
		{
			get
			{
				return this.sortedColumn;
			}
		}

		/// <summary>Gets a value indicating whether the items in the <see cref="T:System.Windows.Forms.DataGridView" /> control are sorted in ascending or descending order, or are not sorted.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.SortOrder" /> values.</returns>
		// Token: 0x17000591 RID: 1425
		// (get) Token: 0x06001632 RID: 5682 RVA: 0x00054350 File Offset: 0x00052550
		[Browsable(false)]
		public SortOrder SortOrder
		{
			get
			{
				return this.sortOrder;
			}
		}

		/// <summary>Gets or sets a value indicating whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
		/// <returns>
		///     <see langword="true" /> if the TAB key moves the focus to the next control in the tab order; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000592 RID: 1426
		// (get) Token: 0x06001633 RID: 5683 RVA: 0x00054358 File Offset: 0x00052558
		// (set) Token: 0x06001634 RID: 5684 RVA: 0x0005436A File Offset: 0x0005256A
		[SRCategory("CatBehavior")]
		[DefaultValue(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_StandardTabDescr")]
		public bool StandardTab
		{
			get
			{
				return this.dataGridViewState1[8192];
			}
			set
			{
				if (this.dataGridViewState1[8192] != value)
				{
					this.dataGridViewState1[8192] = value;
				}
			}
		}

		// Token: 0x17000593 RID: 1427
		// (get) Token: 0x06001635 RID: 5685 RVA: 0x00020C1B File Offset: 0x0001EE1B
		internal override bool SupportsUiaProviders
		{
			get
			{
				return AccessibilityImprovements.Level3 && !base.DesignMode;
			}
		}

		/// <summary>Gets or sets the text associated with the control.</summary>
		/// <returns>The text associated with the control.</returns>
		// Token: 0x17000594 RID: 1428
		// (get) Token: 0x06001636 RID: 5686 RVA: 0x0001BFA5 File Offset: 0x0001A1A5
		// (set) Token: 0x06001637 RID: 5687 RVA: 0x0001BFAD File Offset: 0x0001A1AD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Bindable(false)]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.Text" /> property changes.</summary>
		// Token: 0x1400010C RID: 268
		// (add) Token: 0x06001638 RID: 5688 RVA: 0x0003E435 File Offset: 0x0003C635
		// (remove) Token: 0x06001639 RID: 5689 RVA: 0x0003E43E File Offset: 0x0003C63E
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		/// <summary>Provides an indexer to get or set the cell located at the intersection of the column and row with the specified indexes. </summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.-or-
		///         <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x17000595 RID: 1429
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell this[int columnIndex, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnIndex];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnIndex] = value;
			}
		}

		/// <summary>Provides an indexer to get or set the cell located at the intersection of the row with the specified index and the column with the specified name. </summary>
		/// <param name="columnName">The name of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</returns>
		// Token: 0x17000596 RID: 1430
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell this[string columnName, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnName];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnName] = value;
			}
		}

		// Token: 0x17000597 RID: 1431
		// (get) Token: 0x0600163E RID: 5694 RVA: 0x0005442F File Offset: 0x0005262F
		private string ToolTipPrivate
		{
			get
			{
				return this.toolTipCaption;
			}
		}

		/// <summary>Gets or sets the header cell located in the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> located at the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000598 RID: 1432
		// (get) Token: 0x0600163F RID: 5695 RVA: 0x00054437 File Offset: 0x00052637
		// (set) Token: 0x06001640 RID: 5696 RVA: 0x00054454 File Offset: 0x00052654
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewHeaderCell TopLeftHeaderCell
		{
			get
			{
				if (this.topLeftHeaderCell == null)
				{
					this.TopLeftHeaderCell = new DataGridViewTopLeftHeaderCell();
				}
				return this.topLeftHeaderCell;
			}
			set
			{
				if (this.topLeftHeaderCell != value)
				{
					if (this.topLeftHeaderCell != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = null;
					}
					this.topLeftHeaderCell = value;
					if (value != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = this;
					}
					if (this.ColumnHeadersVisible && this.RowHeadersVisible)
					{
						this.OnColumnHeadersGlobalAutoSize();
						base.Invalidate(new Rectangle(this.layout.Inside.X, this.layout.Inside.Y, this.RowHeadersWidth, this.ColumnHeadersHeight));
					}
				}
			}
		}

		/// <summary>Gets the default or user-specified value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property. </summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Cursor" /> representing the normal value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property.</returns>
		// Token: 0x17000599 RID: 1433
		// (get) Token: 0x06001641 RID: 5697 RVA: 0x000544E1 File Offset: 0x000526E1
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Cursor UserSetCursor
		{
			get
			{
				if (this.dataGridViewState1[16777216])
				{
					return this.oldCursor;
				}
				return this.Cursor;
			}
		}

		// Token: 0x1700059A RID: 1434
		// (get) Token: 0x06001642 RID: 5698 RVA: 0x00054502 File Offset: 0x00052702
		// (set) Token: 0x06001643 RID: 5699 RVA: 0x0005450C File Offset: 0x0005270C
		internal int VerticalOffset
		{
			get
			{
				return this.verticalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
				if (value > this.vertScrollBar.Maximum - num)
				{
					value = this.vertScrollBar.Maximum - num;
				}
				if (value == this.verticalOffset)
				{
					return;
				}
				int height = value - this.verticalOffset;
				if (this.vertScrollBar.Enabled)
				{
					this.vertScrollBar.Value = value;
				}
				this.ScrollRowsByHeight(height);
			}
		}

		/// <summary>Gets the vertical scroll bar of the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the vertical scroll bar.</returns>
		// Token: 0x1700059B RID: 1435
		// (get) Token: 0x06001644 RID: 5700 RVA: 0x00054588 File Offset: 0x00052788
		protected ScrollBar VerticalScrollBar
		{
			get
			{
				return this.vertScrollBar;
			}
		}

		/// <summary>Gets the number of pixels by which the control is scrolled vertically.</summary>
		/// <returns>The number of pixels by which the control is scrolled vertically.</returns>
		// Token: 0x1700059C RID: 1436
		// (get) Token: 0x06001645 RID: 5701 RVA: 0x00054502 File Offset: 0x00052702
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int VerticalScrollingOffset
		{
			get
			{
				return this.verticalOffset;
			}
		}

		// Token: 0x1700059D RID: 1437
		// (get) Token: 0x06001646 RID: 5702 RVA: 0x00054590 File Offset: 0x00052790
		private Timer VertScrollTimer
		{
			get
			{
				if (this.vertScrollTimer == null)
				{
					this.vertScrollTimer = new Timer();
					this.vertScrollTimer.Tick += this.VertScrollTimer_Tick;
				}
				return this.vertScrollTimer;
			}
		}

		/// <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.DataGridView" /> control. </summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridView" /> uses data-management operations that you provide; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x1700059E RID: 1438
		// (get) Token: 0x06001647 RID: 5703 RVA: 0x000545C2 File Offset: 0x000527C2
		// (set) Token: 0x06001648 RID: 5704 RVA: 0x000545D4 File Offset: 0x000527D4
		[SRCategory("CatBehavior")]
		[DefaultValue(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridViewVirtualModeDescr")]
		public bool VirtualMode
		{
			get
			{
				return this.dataGridViewState1[65536];
			}
			set
			{
				if (this.dataGridViewState1[65536] != value)
				{
					this.dataGridViewState1[65536] = value;
					this.InvalidateRowHeights();
				}
			}
		}

		// Token: 0x1700059F RID: 1439
		// (get) Token: 0x06001649 RID: 5705 RVA: 0x00054600 File Offset: 0x00052800
		private bool VisibleCellExists
		{
			get
			{
				return this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) != null && -1 != this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property of a column changes.</summary>
		// Token: 0x1400010D RID: 269
		// (add) Token: 0x0600164A RID: 5706 RVA: 0x00054626 File Offset: 0x00052826
		// (remove) Token: 0x0600164B RID: 5707 RVA: 0x00054639 File Offset: 0x00052839
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeColumnModeChangedDescr")]
		public event DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of a <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the cancels edits in a row.</summary>
		// Token: 0x1400010E RID: 270
		// (add) Token: 0x0600164C RID: 5708 RVA: 0x0005464C File Offset: 0x0005284C
		// (remove) Token: 0x0600164D RID: 5709 RVA: 0x0005465F File Offset: 0x0005285F
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CancelRowEditDescr")]
		public event QuestionEventHandler CancelRowEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
		}

		/// <summary>Occurs when edit mode starts for the selected cell.</summary>
		// Token: 0x1400010F RID: 271
		// (add) Token: 0x0600164E RID: 5710 RVA: 0x00054672 File Offset: 0x00052872
		// (remove) Token: 0x0600164F RID: 5711 RVA: 0x00054685 File Offset: 0x00052885
		[SRCategory("CatData")]
		[SRDescription("DataGridView_CellBeginEditDescr")]
		public event DataGridViewCellCancelEventHandler CellBeginEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
		}

		/// <summary>Occurs when any part of a cell is clicked.</summary>
		// Token: 0x14000110 RID: 272
		// (add) Token: 0x06001650 RID: 5712 RVA: 0x00054698 File Offset: 0x00052898
		// (remove) Token: 0x06001651 RID: 5713 RVA: 0x000546AB File Offset: 0x000528AB
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellClickDescr")]
		public event DataGridViewCellEventHandler CellClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
		}

		/// <summary>Occurs when the content within a cell is clicked.</summary>
		// Token: 0x14000111 RID: 273
		// (add) Token: 0x06001652 RID: 5714 RVA: 0x000546BE File Offset: 0x000528BE
		// (remove) Token: 0x06001653 RID: 5715 RVA: 0x000546D1 File Offset: 0x000528D1
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellContentClick")]
		public event DataGridViewCellEventHandler CellContentClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
		}

		/// <summary>Occurs when the user double-clicks a cell's contents.</summary>
		// Token: 0x14000112 RID: 274
		// (add) Token: 0x06001654 RID: 5716 RVA: 0x000546E4 File Offset: 0x000528E4
		// (remove) Token: 0x06001655 RID: 5717 RVA: 0x000546F7 File Offset: 0x000528F7
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellContentDoubleClick")]
		public event DataGridViewCellEventHandler CellContentDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" /> property changes. </summary>
		// Token: 0x14000113 RID: 275
		// (add) Token: 0x06001656 RID: 5718 RVA: 0x0005470A File Offset: 0x0005290A
		// (remove) Token: 0x06001657 RID: 5719 RVA: 0x0005471D File Offset: 0x0005291D
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CellContextMenuStripChanged")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellEventHandler CellContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's shortcut menu is needed. </summary>
		// Token: 0x14000114 RID: 276
		// (add) Token: 0x06001658 RID: 5720 RVA: 0x00054730 File Offset: 0x00052930
		// (remove) Token: 0x06001659 RID: 5721 RVA: 0x00054743 File Offset: 0x00052943
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellContextMenuStripNeeded")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
		// Token: 0x14000115 RID: 277
		// (add) Token: 0x0600165A RID: 5722 RVA: 0x00054756 File Offset: 0x00052956
		// (remove) Token: 0x0600165B RID: 5723 RVA: 0x00054769 File Offset: 0x00052969
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellDoubleClickDescr")]
		public event DataGridViewCellEventHandler CellDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when edit mode stops for the currently selected cell.</summary>
		// Token: 0x14000116 RID: 278
		// (add) Token: 0x0600165C RID: 5724 RVA: 0x0005477C File Offset: 0x0005297C
		// (remove) Token: 0x0600165D RID: 5725 RVA: 0x0005478F File Offset: 0x0005298F
		[SRCategory("CatData")]
		[SRDescription("DataGridView_CellEndEditDescr")]
		public event DataGridViewCellEventHandler CellEndEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
		}

		/// <summary>Occurs when the current cell changes in the <see cref="T:System.Windows.Forms.DataGridView" /> control or when the control receives input focus. </summary>
		// Token: 0x14000117 RID: 279
		// (add) Token: 0x0600165E RID: 5726 RVA: 0x000547A2 File Offset: 0x000529A2
		// (remove) Token: 0x0600165F RID: 5727 RVA: 0x000547B5 File Offset: 0x000529B5
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellEnterDescr")]
		public event DataGridViewCellEventHandler CellEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" /> property of a cell changes.</summary>
		// Token: 0x14000118 RID: 280
		// (add) Token: 0x06001660 RID: 5728 RVA: 0x000547C8 File Offset: 0x000529C8
		// (remove) Token: 0x06001661 RID: 5729 RVA: 0x000547DB File Offset: 0x000529DB
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellErrorTextChangedDescr")]
		public event DataGridViewCellEventHandler CellErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's error text is needed.</summary>
		// Token: 0x14000119 RID: 281
		// (add) Token: 0x06001662 RID: 5730 RVA: 0x000547EE File Offset: 0x000529EE
		// (remove) Token: 0x06001663 RID: 5731 RVA: 0x00054801 File Offset: 0x00052A01
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellErrorTextNeededDescr")]
		public event DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
		// Token: 0x1400011A RID: 282
		// (add) Token: 0x06001664 RID: 5732 RVA: 0x00054814 File Offset: 0x00052A14
		// (remove) Token: 0x06001665 RID: 5733 RVA: 0x00054827 File Offset: 0x00052A27
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellFormattingDescr")]
		public event DataGridViewCellFormattingEventHandler CellFormatting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
		}

		/// <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
		// Token: 0x1400011B RID: 283
		// (add) Token: 0x06001666 RID: 5734 RVA: 0x0005483A File Offset: 0x00052A3A
		// (remove) Token: 0x06001667 RID: 5735 RVA: 0x0005484D File Offset: 0x00052A4D
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellLeaveDescr")]
		public event DataGridViewCellEventHandler CellLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
		}

		/// <summary>Occurs whenever the user clicks anywhere on a cell with the mouse.</summary>
		// Token: 0x1400011C RID: 284
		// (add) Token: 0x06001668 RID: 5736 RVA: 0x00054860 File Offset: 0x00052A60
		// (remove) Token: 0x06001669 RID: 5737 RVA: 0x00054873 File Offset: 0x00052A73
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a cell within the <see cref="T:System.Windows.Forms.DataGridView" /> is double-clicked.</summary>
		// Token: 0x1400011D RID: 285
		// (add) Token: 0x0600166A RID: 5738 RVA: 0x00054886 File Offset: 0x00052A86
		// (remove) Token: 0x0600166B RID: 5739 RVA: 0x00054899 File Offset: 0x00052A99
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
		// Token: 0x1400011E RID: 286
		// (add) Token: 0x0600166C RID: 5740 RVA: 0x000548AC File Offset: 0x00052AAC
		// (remove) Token: 0x0600166D RID: 5741 RVA: 0x000548BF File Offset: 0x00052ABF
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseDownDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseDown
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
		}

		/// <summary>Occurs when the mouse pointer enters a cell.</summary>
		// Token: 0x1400011F RID: 287
		// (add) Token: 0x0600166E RID: 5742 RVA: 0x000548D2 File Offset: 0x00052AD2
		// (remove) Token: 0x0600166F RID: 5743 RVA: 0x000548E5 File Offset: 0x00052AE5
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseEnterDescr")]
		public event DataGridViewCellEventHandler CellMouseEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
		}

		/// <summary>Occurs when the mouse pointer leaves a cell.</summary>
		// Token: 0x14000120 RID: 288
		// (add) Token: 0x06001670 RID: 5744 RVA: 0x000548F8 File Offset: 0x00052AF8
		// (remove) Token: 0x06001671 RID: 5745 RVA: 0x0005490B File Offset: 0x00052B0B
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseLeaveDescr")]
		public event DataGridViewCellEventHandler CellMouseLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
		}

		/// <summary>Occurs when the mouse pointer moves over the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000121 RID: 289
		// (add) Token: 0x06001672 RID: 5746 RVA: 0x0005491E File Offset: 0x00052B1E
		// (remove) Token: 0x06001673 RID: 5747 RVA: 0x00054931 File Offset: 0x00052B31
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseMoveDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseMove
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
		}

		/// <summary>Occurs when the user releases a mouse button while over a cell.</summary>
		// Token: 0x14000122 RID: 290
		// (add) Token: 0x06001674 RID: 5748 RVA: 0x00054944 File Offset: 0x00052B44
		// (remove) Token: 0x06001675 RID: 5749 RVA: 0x00054957 File Offset: 0x00052B57
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseUpDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseUp
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
		}

		/// <summary>Occurs when a cell needs to be drawn.</summary>
		// Token: 0x14000123 RID: 291
		// (add) Token: 0x06001676 RID: 5750 RVA: 0x0005496A File Offset: 0x00052B6A
		// (remove) Token: 0x06001677 RID: 5751 RVA: 0x0005497D File Offset: 0x00052B7D
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellPaintingDescr")]
		public event DataGridViewCellPaintingEventHandler CellPainting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
		}

		/// <summary>Occurs when a cell leaves edit mode if the cell value has been modified.</summary>
		// Token: 0x14000124 RID: 292
		// (add) Token: 0x06001678 RID: 5752 RVA: 0x00054990 File Offset: 0x00052B90
		// (remove) Token: 0x06001679 RID: 5753 RVA: 0x000549A3 File Offset: 0x00052BA3
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellParsingDescr")]
		public event DataGridViewCellParsingEventHandler CellParsing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
		}

		/// <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
		// Token: 0x14000125 RID: 293
		// (add) Token: 0x0600167A RID: 5754 RVA: 0x000549B6 File Offset: 0x00052BB6
		// (remove) Token: 0x0600167B RID: 5755 RVA: 0x000549C9 File Offset: 0x00052BC9
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellStateChangedDescr")]
		public event DataGridViewCellStateChangedEventHandler CellStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> property of a <see cref="T:System.Windows.Forms.DataGridViewCell" /> changes.</summary>
		// Token: 0x14000126 RID: 294
		// (add) Token: 0x0600167C RID: 5756 RVA: 0x000549DC File Offset: 0x00052BDC
		// (remove) Token: 0x0600167D RID: 5757 RVA: 0x000549EF File Offset: 0x00052BEF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellStyleChangedDescr")]
		public event DataGridViewCellEventHandler CellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when one of the values of a cell style changes.</summary>
		// Token: 0x14000127 RID: 295
		// (add) Token: 0x0600167E RID: 5758 RVA: 0x00054A02 File Offset: 0x00052C02
		// (remove) Token: 0x0600167F RID: 5759 RVA: 0x00054A15 File Offset: 0x00052C15
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellStyleContentChangedDescr")]
		public event DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" /> property value changes for a cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000128 RID: 296
		// (add) Token: 0x06001680 RID: 5760 RVA: 0x00054A28 File Offset: 0x00052C28
		// (remove) Token: 0x06001681 RID: 5761 RVA: 0x00054A3B File Offset: 0x00052C3B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellToolTipTextChangedDescr")]
		public event DataGridViewCellEventHandler CellToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's ToolTip text is needed.</summary>
		// Token: 0x14000129 RID: 297
		// (add) Token: 0x06001682 RID: 5762 RVA: 0x00054A4E File Offset: 0x00052C4E
		// (remove) Token: 0x06001683 RID: 5763 RVA: 0x00054A61 File Offset: 0x00052C61
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellToolTipTextNeededDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs after the cell has finished validating.</summary>
		// Token: 0x1400012A RID: 298
		// (add) Token: 0x06001684 RID: 5764 RVA: 0x00054A74 File Offset: 0x00052C74
		// (remove) Token: 0x06001685 RID: 5765 RVA: 0x00054A87 File Offset: 0x00052C87
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellValidatedDescr")]
		public event DataGridViewCellEventHandler CellValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
		}

		/// <summary>Occurs when a cell loses input focus, enabling content validation.</summary>
		// Token: 0x1400012B RID: 299
		// (add) Token: 0x06001686 RID: 5766 RVA: 0x00054A9A File Offset: 0x00052C9A
		// (remove) Token: 0x06001687 RID: 5767 RVA: 0x00054AAD File Offset: 0x00052CAD
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellValidatingDescr")]
		public event DataGridViewCellValidatingEventHandler CellValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
		}

		/// <summary>Occurs when the value of a cell changes.</summary>
		// Token: 0x1400012C RID: 300
		// (add) Token: 0x06001688 RID: 5768 RVA: 0x00054AC0 File Offset: 0x00052CC0
		// (remove) Token: 0x06001689 RID: 5769 RVA: 0x00054AD3 File Offset: 0x00052CD3
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CellValueChangedDescr")]
		public event DataGridViewCellEventHandler CellValueChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> requires a value for a cell in order to format and display the cell.</summary>
		// Token: 0x1400012D RID: 301
		// (add) Token: 0x0600168A RID: 5770 RVA: 0x00054AE6 File Offset: 0x00052CE6
		// (remove) Token: 0x0600168B RID: 5771 RVA: 0x00054AF9 File Offset: 0x00052CF9
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellValueNeededDescr")]
		public event DataGridViewCellValueEventHandler CellValueNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and a cell value has changed and requires storage in the underlying data source.</summary>
		// Token: 0x1400012E RID: 302
		// (add) Token: 0x0600168C RID: 5772 RVA: 0x00054B0C File Offset: 0x00052D0C
		// (remove) Token: 0x0600168D RID: 5773 RVA: 0x00054B1F File Offset: 0x00052D1F
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellValuePushedDescr")]
		public event DataGridViewCellValueEventHandler CellValuePushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
		}

		/// <summary>Occurs when a column is added to the control.</summary>
		// Token: 0x1400012F RID: 303
		// (add) Token: 0x0600168E RID: 5774 RVA: 0x00054B32 File Offset: 0x00052D32
		// (remove) Token: 0x0600168F RID: 5775 RVA: 0x00054B45 File Offset: 0x00052D45
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnAddedDescr")]
		public event DataGridViewColumnEventHandler ColumnAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip" /> property of a column changes.</summary>
		// Token: 0x14000130 RID: 304
		// (add) Token: 0x06001690 RID: 5776 RVA: 0x00054B58 File Offset: 0x00052D58
		// (remove) Token: 0x06001691 RID: 5777 RVA: 0x00054B6B File Offset: 0x00052D6B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnContextMenuStripChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" /> property for a column changes.</summary>
		// Token: 0x14000131 RID: 305
		// (add) Token: 0x06001692 RID: 5778 RVA: 0x00054B7E File Offset: 0x00052D7E
		// (remove) Token: 0x06001693 RID: 5779 RVA: 0x00054B91 File Offset: 0x00052D91
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDataPropertyNameChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDataPropertyNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> property for a column changes.</summary>
		// Token: 0x14000132 RID: 306
		// (add) Token: 0x06001694 RID: 5780 RVA: 0x00054BA4 File Offset: 0x00052DA4
		// (remove) Token: 0x06001695 RID: 5781 RVA: 0x00054BB7 File Offset: 0x00052DB7
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDefaultCellStyleChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when the value the <see cref="P:System.Windows.Forms.DataGridViewColumn.DisplayIndex" /> property for a column changes.</summary>
		// Token: 0x14000133 RID: 307
		// (add) Token: 0x06001696 RID: 5782 RVA: 0x00054BCA File Offset: 0x00052DCA
		// (remove) Token: 0x06001697 RID: 5783 RVA: 0x00054BDD File Offset: 0x00052DDD
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDisplayIndexChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDisplayIndexChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks a divider between two columns.</summary>
		// Token: 0x14000134 RID: 308
		// (add) Token: 0x06001698 RID: 5784 RVA: 0x00054BF0 File Offset: 0x00052DF0
		// (remove) Token: 0x06001699 RID: 5785 RVA: 0x00054C03 File Offset: 0x00052E03
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnDividerDoubleClickDescr")]
		public event DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.DividerWidth" /> property changes.</summary>
		// Token: 0x14000135 RID: 309
		// (add) Token: 0x0600169A RID: 5786 RVA: 0x00054C16 File Offset: 0x00052E16
		// (remove) Token: 0x0600169B RID: 5787 RVA: 0x00054C29 File Offset: 0x00052E29
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDividerWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDividerWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the user clicks a column header.</summary>
		// Token: 0x14000136 RID: 310
		// (add) Token: 0x0600169C RID: 5788 RVA: 0x00054C3C File Offset: 0x00052E3C
		// (remove) Token: 0x0600169D RID: 5789 RVA: 0x00054C4F File Offset: 0x00052E4F
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnHeaderMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a column header is double-clicked.</summary>
		// Token: 0x14000137 RID: 311
		// (add) Token: 0x0600169E RID: 5790 RVA: 0x00054C62 File Offset: 0x00052E62
		// (remove) Token: 0x0600169F RID: 5791 RVA: 0x00054C75 File Offset: 0x00052E75
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnHeaderMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the contents of a column header cell change.</summary>
		// Token: 0x14000138 RID: 312
		// (add) Token: 0x060016A0 RID: 5792 RVA: 0x00054C88 File Offset: 0x00052E88
		// (remove) Token: 0x060016A1 RID: 5793 RVA: 0x00054C9B File Offset: 0x00052E9B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeaderCellChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.MinimumWidth" /> property for a column changes.</summary>
		// Token: 0x14000139 RID: 313
		// (add) Token: 0x060016A2 RID: 5794 RVA: 0x00054CAE File Offset: 0x00052EAE
		// (remove) Token: 0x060016A3 RID: 5795 RVA: 0x00054CC1 File Offset: 0x00052EC1
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnMinimumWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnMinimumWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.Name" /> property for a column changes.</summary>
		// Token: 0x1400013A RID: 314
		// (add) Token: 0x060016A4 RID: 5796 RVA: 0x00054CD4 File Offset: 0x00052ED4
		// (remove) Token: 0x060016A5 RID: 5797 RVA: 0x00054CE7 File Offset: 0x00052EE7
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnNameChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
		}

		/// <summary>Occurs when a column is removed from the control.</summary>
		// Token: 0x1400013B RID: 315
		// (add) Token: 0x060016A6 RID: 5798 RVA: 0x00054CFA File Offset: 0x00052EFA
		// (remove) Token: 0x060016A7 RID: 5799 RVA: 0x00054D0D File Offset: 0x00052F0D
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnRemovedDescr")]
		public event DataGridViewColumnEventHandler ColumnRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> property for a column changes.</summary>
		// Token: 0x1400013C RID: 316
		// (add) Token: 0x060016A8 RID: 5800 RVA: 0x00054D20 File Offset: 0x00052F20
		// (remove) Token: 0x060016A9 RID: 5801 RVA: 0x00054D33 File Offset: 0x00052F33
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridViewColumnSortModeChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnSortModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
		}

		/// <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
		// Token: 0x1400013D RID: 317
		// (add) Token: 0x060016AA RID: 5802 RVA: 0x00054D46 File Offset: 0x00052F46
		// (remove) Token: 0x060016AB RID: 5803 RVA: 0x00054D59 File Offset: 0x00052F59
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ColumnStateChangedDescr")]
		public event DataGridViewColumnStateChangedEventHandler ColumnStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.ToolTipText" /> property value changes for a column in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x1400013E RID: 318
		// (add) Token: 0x060016AC RID: 5804 RVA: 0x00054D6C File Offset: 0x00052F6C
		// (remove) Token: 0x060016AD RID: 5805 RVA: 0x00054D7F File Offset: 0x00052F7F
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnToolTipTextChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.Width" /> property for a column changes.</summary>
		// Token: 0x1400013F RID: 319
		// (add) Token: 0x060016AE RID: 5806 RVA: 0x00054D92 File Offset: 0x00052F92
		// (remove) Token: 0x060016AF RID: 5807 RVA: 0x00054DA5 File Offset: 0x00052FA5
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> property changes.</summary>
		// Token: 0x14000140 RID: 320
		// (add) Token: 0x060016B0 RID: 5808 RVA: 0x00054DB8 File Offset: 0x00052FB8
		// (remove) Token: 0x060016B1 RID: 5809 RVA: 0x00054DCB File Offset: 0x00052FCB
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CurrentCellChangedDescr")]
		public event EventHandler CurrentCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
		// Token: 0x14000141 RID: 321
		// (add) Token: 0x060016B2 RID: 5810 RVA: 0x00054DDE File Offset: 0x00052FDE
		// (remove) Token: 0x060016B3 RID: 5811 RVA: 0x00054DF1 File Offset: 0x00052FF1
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CurrentCellDirtyStateChangedDescr")]
		public event EventHandler CurrentCellDirtyStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
		}

		/// <summary>Occurs after a data-binding operation has finished.</summary>
		// Token: 0x14000142 RID: 322
		// (add) Token: 0x060016B4 RID: 5812 RVA: 0x00054E04 File Offset: 0x00053004
		// (remove) Token: 0x060016B5 RID: 5813 RVA: 0x00054E17 File Offset: 0x00053017
		[SRCategory("CatData")]
		[SRDescription("DataGridView_DataBindingCompleteDescr")]
		public event DataGridViewBindingCompleteEventHandler DataBindingComplete
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
		}

		/// <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source fails.</summary>
		// Token: 0x14000143 RID: 323
		// (add) Token: 0x060016B6 RID: 5814 RVA: 0x00054E2A File Offset: 0x0005302A
		// (remove) Token: 0x060016B7 RID: 5815 RVA: 0x00054E3D File Offset: 0x0005303D
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_DataErrorDescr")]
		public event DataGridViewDataErrorEventHandler DataError
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
		}

		/// <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
		// Token: 0x14000144 RID: 324
		// (add) Token: 0x060016B8 RID: 5816 RVA: 0x00054E50 File Offset: 0x00053050
		// (remove) Token: 0x060016B9 RID: 5817 RVA: 0x00054E63 File Offset: 0x00053063
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_DefaultValuesNeededDescr")]
		public event DataGridViewRowEventHandler DefaultValuesNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
		}

		/// <summary>Occurs when a control for editing a cell is showing.</summary>
		// Token: 0x14000145 RID: 325
		// (add) Token: 0x060016BA RID: 5818 RVA: 0x00054E76 File Offset: 0x00053076
		// (remove) Token: 0x060016BB RID: 5819 RVA: 0x00054E89 File Offset: 0x00053089
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_EditingControlShowingDescr")]
		public event DataGridViewEditingControlShowingEventHandler EditingControlShowing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> is <see langword="true" /> and the user navigates to the new row at the bottom of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000146 RID: 326
		// (add) Token: 0x060016BC RID: 5820 RVA: 0x00054E9C File Offset: 0x0005309C
		// (remove) Token: 0x060016BD RID: 5821 RVA: 0x00054EAF File Offset: 0x000530AF
		[SRCategory("CatData")]
		[SRDescription("DataGridView_NewRowNeededDescr")]
		public event DataGridViewRowEventHandler NewRowNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" /> property changes.</summary>
		// Token: 0x14000147 RID: 327
		// (add) Token: 0x060016BE RID: 5822 RVA: 0x00054EC2 File Offset: 0x000530C2
		// (remove) Token: 0x060016BF RID: 5823 RVA: 0x00054ED5 File Offset: 0x000530D5
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowContextMenuStripChangedDescr")]
		public event DataGridViewRowEventHandler RowContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when a row's shortcut menu is needed.</summary>
		// Token: 0x14000148 RID: 328
		// (add) Token: 0x060016C0 RID: 5824 RVA: 0x00054EE8 File Offset: 0x000530E8
		// (remove) Token: 0x060016C1 RID: 5825 RVA: 0x00054EFB File Offset: 0x000530FB
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowContextMenuStripNeededDescr")]
		public event DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> property for a row changes.</summary>
		// Token: 0x14000149 RID: 329
		// (add) Token: 0x060016C2 RID: 5826 RVA: 0x00054F0E File Offset: 0x0005310E
		// (remove) Token: 0x060016C3 RID: 5827 RVA: 0x00054F21 File Offset: 0x00053121
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowDefaultCellStyleChangedDescr")]
		public event DataGridViewRowEventHandler RowDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> needs to determine whether the current row has uncommitted changes.</summary>
		// Token: 0x1400014A RID: 330
		// (add) Token: 0x060016C4 RID: 5828 RVA: 0x00054F34 File Offset: 0x00053134
		// (remove) Token: 0x060016C5 RID: 5829 RVA: 0x00054F47 File Offset: 0x00053147
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowDirtyStateNeededDescr")]
		public event QuestionEventHandler RowDirtyStateNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks the divider between two rows.</summary>
		// Token: 0x1400014B RID: 331
		// (add) Token: 0x060016C6 RID: 5830 RVA: 0x00054F5A File Offset: 0x0005315A
		// (remove) Token: 0x060016C7 RID: 5831 RVA: 0x00054F6D File Offset: 0x0005316D
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowDividerDoubleClickDescr")]
		public event DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.DividerHeight" /> property changes. </summary>
		// Token: 0x1400014C RID: 332
		// (add) Token: 0x060016C8 RID: 5832 RVA: 0x00054F80 File Offset: 0x00053180
		// (remove) Token: 0x060016C9 RID: 5833 RVA: 0x00054F93 File Offset: 0x00053193
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowDividerHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowDividerHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs when a row receives input focus but before it becomes the current row.</summary>
		// Token: 0x1400014D RID: 333
		// (add) Token: 0x060016CA RID: 5834 RVA: 0x00054FA6 File Offset: 0x000531A6
		// (remove) Token: 0x060016CB RID: 5835 RVA: 0x00054FB9 File Offset: 0x000531B9
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowEnterDescr")]
		public event DataGridViewCellEventHandler RowEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" /> property of a row changes.</summary>
		// Token: 0x1400014E RID: 334
		// (add) Token: 0x060016CC RID: 5836 RVA: 0x00054FCC File Offset: 0x000531CC
		// (remove) Token: 0x060016CD RID: 5837 RVA: 0x00054FDF File Offset: 0x000531DF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowErrorTextChangedDescr")]
		public event DataGridViewRowEventHandler RowErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a row's error text is needed.</summary>
		// Token: 0x1400014F RID: 335
		// (add) Token: 0x060016CE RID: 5838 RVA: 0x00054FF2 File Offset: 0x000531F2
		// (remove) Token: 0x060016CF RID: 5839 RVA: 0x00055005 File Offset: 0x00053205
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowErrorTextNeededDescr")]
		public event DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
		// Token: 0x14000150 RID: 336
		// (add) Token: 0x060016D0 RID: 5840 RVA: 0x00055018 File Offset: 0x00053218
		// (remove) Token: 0x060016D1 RID: 5841 RVA: 0x0005502B File Offset: 0x0005322B
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowHeaderMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a row header is double-clicked.</summary>
		// Token: 0x14000151 RID: 337
		// (add) Token: 0x060016D2 RID: 5842 RVA: 0x0005503E File Offset: 0x0005323E
		// (remove) Token: 0x060016D3 RID: 5843 RVA: 0x00055051 File Offset: 0x00053251
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowHeaderMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the user changes the contents of a row header cell.</summary>
		// Token: 0x14000152 RID: 338
		// (add) Token: 0x060016D4 RID: 5844 RVA: 0x00055064 File Offset: 0x00053264
		// (remove) Token: 0x060016D5 RID: 5845 RVA: 0x00055077 File Offset: 0x00053277
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeaderCellChangedDescr")]
		public event DataGridViewRowEventHandler RowHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewRow.Height" /> property for a row changes.</summary>
		// Token: 0x14000153 RID: 339
		// (add) Token: 0x060016D6 RID: 5846 RVA: 0x0005508A File Offset: 0x0005328A
		// (remove) Token: 0x060016D7 RID: 5847 RVA: 0x0005509D File Offset: 0x0005329D
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs when information about row height is requested. </summary>
		// Token: 0x14000154 RID: 340
		// (add) Token: 0x060016D8 RID: 5848 RVA: 0x000550B0 File Offset: 0x000532B0
		// (remove) Token: 0x060016D9 RID: 5849 RVA: 0x000550C3 File Offset: 0x000532C3
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowHeightInfoNeededDescr")]
		public event DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
		}

		// Token: 0x170005A0 RID: 1440
		// (get) Token: 0x060016DA RID: 5850 RVA: 0x000550D6 File Offset: 0x000532D6
		internal DataGridViewRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs
		{
			get
			{
				if (this.dgvrhine == null)
				{
					this.dgvrhine = new DataGridViewRowHeightInfoNeededEventArgs();
				}
				return this.dgvrhine;
			}
		}

		/// <summary>Occurs when the user changes the height of a row.</summary>
		// Token: 0x14000155 RID: 341
		// (add) Token: 0x060016DB RID: 5851 RVA: 0x000550F1 File Offset: 0x000532F1
		// (remove) Token: 0x060016DC RID: 5852 RVA: 0x00055104 File Offset: 0x00053304
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowHeightInfoPushedDescr")]
		public event DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
		}

		/// <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
		// Token: 0x14000156 RID: 342
		// (add) Token: 0x060016DD RID: 5853 RVA: 0x00055117 File Offset: 0x00053317
		// (remove) Token: 0x060016DE RID: 5854 RVA: 0x0005512A File Offset: 0x0005332A
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowLeaveDescr")]
		public event DataGridViewCellEventHandler RowLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewRow.MinimumHeight" /> property for a row changes.</summary>
		// Token: 0x14000157 RID: 343
		// (add) Token: 0x060016DF RID: 5855 RVA: 0x0005513D File Offset: 0x0005333D
		// (remove) Token: 0x060016E0 RID: 5856 RVA: 0x00055150 File Offset: 0x00053350
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowMinimumHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowMinimumHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs after a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted.</summary>
		// Token: 0x14000158 RID: 344
		// (add) Token: 0x060016E1 RID: 5857 RVA: 0x00055163 File Offset: 0x00053363
		// (remove) Token: 0x060016E2 RID: 5858 RVA: 0x00055176 File Offset: 0x00053376
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_RowPostPaintDescr")]
		public event DataGridViewRowPostPaintEventHandler RowPostPaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
		}

		// Token: 0x170005A1 RID: 1441
		// (get) Token: 0x060016E3 RID: 5859 RVA: 0x00055189 File Offset: 0x00053389
		internal DataGridViewRowPostPaintEventArgs RowPostPaintEventArgs
		{
			get
			{
				if (this.dgvrpope == null)
				{
					this.dgvrpope = new DataGridViewRowPostPaintEventArgs(this);
				}
				return this.dgvrpope;
			}
		}

		/// <summary>Occurs before a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted</summary>
		// Token: 0x14000159 RID: 345
		// (add) Token: 0x060016E4 RID: 5860 RVA: 0x000551A5 File Offset: 0x000533A5
		// (remove) Token: 0x060016E5 RID: 5861 RVA: 0x000551B8 File Offset: 0x000533B8
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_RowPrePaintDescr")]
		public event DataGridViewRowPrePaintEventHandler RowPrePaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
		}

		// Token: 0x170005A2 RID: 1442
		// (get) Token: 0x060016E6 RID: 5862 RVA: 0x000551CB File Offset: 0x000533CB
		internal DataGridViewRowPrePaintEventArgs RowPrePaintEventArgs
		{
			get
			{
				if (this.dgvrprpe == null)
				{
					this.dgvrprpe = new DataGridViewRowPrePaintEventArgs(this);
				}
				return this.dgvrprpe;
			}
		}

		/// <summary>Occurs after a new row is added to the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x1400015A RID: 346
		// (add) Token: 0x060016E7 RID: 5863 RVA: 0x000551E7 File Offset: 0x000533E7
		// (remove) Token: 0x060016E8 RID: 5864 RVA: 0x000551FA File Offset: 0x000533FA
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_RowsAddedDescr")]
		public event DataGridViewRowsAddedEventHandler RowsAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
		}

		/// <summary>Occurs when a row or rows are deleted from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x1400015B RID: 347
		// (add) Token: 0x060016E9 RID: 5865 RVA: 0x0005520D File Offset: 0x0005340D
		// (remove) Token: 0x060016EA RID: 5866 RVA: 0x00055220 File Offset: 0x00053420
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_RowsRemovedDescr")]
		public event DataGridViewRowsRemovedEventHandler RowsRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
		}

		/// <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
		// Token: 0x1400015C RID: 348
		// (add) Token: 0x060016EB RID: 5867 RVA: 0x00055233 File Offset: 0x00053433
		// (remove) Token: 0x060016EC RID: 5868 RVA: 0x00055246 File Offset: 0x00053446
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowStateChangedDescr")]
		public event DataGridViewRowStateChangedEventHandler RowStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when a row's state changes from shared to unshared.</summary>
		// Token: 0x1400015D RID: 349
		// (add) Token: 0x060016ED RID: 5869 RVA: 0x00055259 File Offset: 0x00053459
		// (remove) Token: 0x060016EE RID: 5870 RVA: 0x0005526C File Offset: 0x0005346C
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowUnsharedDescr")]
		public event DataGridViewRowEventHandler RowUnshared
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
		}

		/// <summary>Occurs after a row has finished validating.</summary>
		// Token: 0x1400015E RID: 350
		// (add) Token: 0x060016EF RID: 5871 RVA: 0x0005527F File Offset: 0x0005347F
		// (remove) Token: 0x060016F0 RID: 5872 RVA: 0x00055292 File Offset: 0x00053492
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowValidatedDescr")]
		public event DataGridViewCellEventHandler RowValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
		}

		/// <summary>Occurs when a row is validating.</summary>
		// Token: 0x1400015F RID: 351
		// (add) Token: 0x060016F1 RID: 5873 RVA: 0x000552A5 File Offset: 0x000534A5
		// (remove) Token: 0x060016F2 RID: 5874 RVA: 0x000552B8 File Offset: 0x000534B8
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowValidatingDescr")]
		public event DataGridViewCellCancelEventHandler RowValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
		}

		/// <summary>Occurs when the user scrolls through the control contents.</summary>
		// Token: 0x14000160 RID: 352
		// (add) Token: 0x060016F3 RID: 5875 RVA: 0x000552CB File Offset: 0x000534CB
		// (remove) Token: 0x060016F4 RID: 5876 RVA: 0x000552DE File Offset: 0x000534DE
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ScrollDescr")]
		public event ScrollEventHandler Scroll
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
		}

		/// <summary>Occurs when the current selection changes.</summary>
		// Token: 0x14000161 RID: 353
		// (add) Token: 0x060016F5 RID: 5877 RVA: 0x000552F1 File Offset: 0x000534F1
		// (remove) Token: 0x060016F6 RID: 5878 RVA: 0x00055304 File Offset: 0x00053504
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_SelectionChangedDescr")]
		public event EventHandler SelectionChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> compares two cell values to perform a sort operation.</summary>
		// Token: 0x14000162 RID: 354
		// (add) Token: 0x060016F7 RID: 5879 RVA: 0x00055317 File Offset: 0x00053517
		// (remove) Token: 0x060016F8 RID: 5880 RVA: 0x0005532A File Offset: 0x0005352A
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_SortCompareDescr")]
		public event DataGridViewSortCompareEventHandler SortCompare
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> control completes a sorting operation.</summary>
		// Token: 0x14000163 RID: 355
		// (add) Token: 0x060016F9 RID: 5881 RVA: 0x0005533D File Offset: 0x0005353D
		// (remove) Token: 0x060016FA RID: 5882 RVA: 0x00055350 File Offset: 0x00053550
		[SRCategory("CatData")]
		[SRDescription("DataGridView_SortedDescr")]
		public event EventHandler Sorted
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
		}

		/// <summary>Occurs when the control style changes.</summary>
		// Token: 0x14000164 RID: 356
		// (add) Token: 0x060016FB RID: 5883 RVA: 0x00055363 File Offset: 0x00053563
		// (remove) Token: 0x060016FC RID: 5884 RVA: 0x0005536C File Offset: 0x0005356C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		/// <summary>Occurs when the user has finished adding a row to the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000165 RID: 357
		// (add) Token: 0x060016FD RID: 5885 RVA: 0x00055375 File Offset: 0x00053575
		// (remove) Token: 0x060016FE RID: 5886 RVA: 0x00055388 File Offset: 0x00053588
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserAddedRowDescr")]
		public event DataGridViewRowEventHandler UserAddedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
		}

		/// <summary>Occurs when the user has finished deleting a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000166 RID: 358
		// (add) Token: 0x060016FF RID: 5887 RVA: 0x0005539B File Offset: 0x0005359B
		// (remove) Token: 0x06001700 RID: 5888 RVA: 0x000553AE File Offset: 0x000535AE
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserDeletedRowDescr")]
		public event DataGridViewRowEventHandler UserDeletedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
		}

		/// <summary>Occurs when the user deletes a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000167 RID: 359
		// (add) Token: 0x06001701 RID: 5889 RVA: 0x000553C1 File Offset: 0x000535C1
		// (remove) Token: 0x06001702 RID: 5890 RVA: 0x000553D4 File Offset: 0x000535D4
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserDeletingRowDescr")]
		public event DataGridViewRowCancelEventHandler UserDeletingRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
		}

		/// <summary>For a description of this member, see <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />.</summary>
		/// <exception cref="T:System.InvalidOperationException">This method has already been called for this control.</exception>
		// Token: 0x06001703 RID: 5891 RVA: 0x000553E7 File Offset: 0x000535E7
		void ISupportInitialize.BeginInit()
		{
			if (this.dataGridViewState2[524288])
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewBeginInit"));
			}
			this.dataGridViewState2[524288] = true;
		}

		/// <summary>For a description of this member, see <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />.</summary>
		// Token: 0x06001704 RID: 5892 RVA: 0x0005541C File Offset: 0x0005361C
		void ISupportInitialize.EndInit()
		{
			this.dataGridViewState2[524288] = false;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn2.SortMode == DataGridViewColumnSortMode.Automatic)
					{
						this.SelectionMode = DataGridViewSelectionMode.RowHeaderSelect;
						throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeReset", new object[]
						{
							SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[]
							{
								dataGridViewSelectionMode.ToString()
							}),
							DataGridViewSelectionMode.RowHeaderSelect.ToString()
						}));
					}
				}
			}
		}

		/// <summary>Notifies the accessible client applications when a new cell becomes the current cell. </summary>
		/// <param name="cellAddress">A <see cref="T:System.Drawing.Point" /> indicating the row and column indexes of the new current cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Drawing.Point.X" /> property of <paramref name="cellAddress" /> is less than 0 or greater than the number of columns in the control minus 1. -or-The value of the <see cref="P:System.Drawing.Point.Y" /> property of <paramref name="cellAddress" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001705 RID: 5893 RVA: 0x00055558 File Offset: 0x00053758
		protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
		{
			if (cellAddress.X < 0 || cellAddress.X >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			if (cellAddress.Y < 0 || cellAddress.Y >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, 0, cellAddress.Y);
			int num = this.Columns.ColumnIndexToActualDisplayIndex(cellAddress.X, DataGridViewElementStates.Visible);
			int num2 = this.ColumnHeadersVisible ? 1 : 0;
			int num3 = this.RowHeadersVisible ? 1 : 0;
			int objectID = rowCount + num2 + 1;
			int childID = num + num3;
			if (base.ContainsFocus)
			{
				base.AccessibilityNotifyClients(AccessibleEvents.Focus, objectID, childID);
				if (AccessibilityImprovements.Level3)
				{
					DataGridViewCell currentCell = this.CurrentCell;
					if (currentCell != null)
					{
						currentCell.AccessibilityObject.SetFocus();
					}
				}
			}
			base.AccessibilityNotifyClients(AccessibleEvents.Selection, objectID, childID);
		}

		// Token: 0x06001706 RID: 5894 RVA: 0x0005564B File Offset: 0x0005384B
		internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex)
		{
			this.toolTipCaption = toolTipText;
			this.ptToolTipCell = new Point(columnIndex, rowIndex);
			this.toolTipControl.Activate(activate);
		}

		// Token: 0x06001707 RID: 5895 RVA: 0x00055670 File Offset: 0x00053870
		internal void AddNewRow(bool createdByEditing)
		{
			this.Rows.AddInternal(true, null);
			this.newRowIndex = this.Rows.Count - 1;
			this.dataGridViewState1[2097152] = createdByEditing;
			if (createdByEditing)
			{
				DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
				this.OnUserAddedRow(e);
			}
		}

		/// <summary>Adjusts the <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> for a column header cell of a <see cref="T:System.Windows.Forms.DataGridView" /> that is currently being painted.</summary>
		/// <param name="dataGridViewAdvancedBorderStyleInput">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that that represents the column header border style to modify.</param>
		/// <param name="dataGridViewAdvancedBorderStylePlaceholder">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that is used to store intermediate changes to the column header border style.</param>
		/// <param name="isFirstDisplayedColumn">
		///       <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
		/// <param name="isLastVisibleColumn">
		///       <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the last column in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style for the current column header.</returns>
		// Token: 0x06001708 RID: 5896 RVA: 0x000556D0 File Offset: 0x000538D0
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
		{
			if (this.ApplyVisualStylesToHeaderCells)
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
				case DataGridViewAdvancedCellBorderStyle.Inset:
				case DataGridViewAdvancedCellBorderStyle.Outset:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = dataGridViewAdvancedBorderStyleInput.All;
					}
					else
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Inset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Outset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			else
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
						}
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.Single;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					break;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			return dataGridViewAdvancedBorderStyleInput;
		}

		// Token: 0x06001709 RID: 5897 RVA: 0x00055A04 File Offset: 0x00053C04
		private bool AdjustExpandingColumn(DataGridViewColumn dataGridViewColumn, int rowIndex)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool result = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num = dataGridViewRow.Cells[dataGridViewColumn.Index].GetPreferredWidth(rowIndex, dataGridViewRow.GetHeight(rowIndex));
				if (num > 65536)
				{
					num = 65536;
				}
				if (dataGridViewColumn.Width < num)
				{
					dataGridViewColumn.ThicknessInternal = num;
					result = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return result;
		}

		// Token: 0x0600170A RID: 5898 RVA: 0x00055AAC File Offset: 0x00053CAC
		private bool AdjustExpandingColumns(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AdjustExpandingColumn(dataGridViewColumn, rowIndex);
				}
			}
			return flag;
		}

		// Token: 0x0600170B RID: 5899 RVA: 0x00055AF8 File Offset: 0x00053CF8
		private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth)
		{
			int width = 0;
			DataGridViewCell dataGridViewCell;
			if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				if (fixedWidth)
				{
					width = this.Columns[columnIndex].Thickness;
				}
			}
			else
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).HeaderCell;
				if (fixedWidth)
				{
					width = this.RowHeadersWidth;
				}
			}
			int num;
			if (fixedWidth)
			{
				num = dataGridViewCell.GetPreferredHeight(rowIndex, width);
			}
			else
			{
				num = dataGridViewCell.GetPreferredSize(rowIndex).Height;
			}
			int num2;
			int num3;
			this.Rows.SharedRow(rowIndex).GetHeightInfo(rowIndex, out num2, out num3);
			if (num < num2)
			{
				num = num2;
			}
			if (num > 65536)
			{
				num = 65536;
			}
			if (num2 != num)
			{
				this.Rows[rowIndex].Thickness = num;
			}
			return num;
		}

		// Token: 0x0600170C RID: 5900 RVA: 0x00055BC0 File Offset: 0x00053DC0
		private void AdjustExpandingRows(int columnIndex, bool fixedWidth)
		{
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				if (!base.IsHandleCreated)
				{
					this.dataGridViewState2[1048576] = true;
					return;
				}
				this.inBulkPaintCount++;
				try
				{
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								int width = 0;
								DataGridViewCell dataGridViewCell;
								if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
								{
									dataGridViewCell = this.Rows.SharedRow(num).Cells[columnIndex];
									if (fixedWidth)
									{
										width = this.Columns[columnIndex].Thickness;
									}
								}
								else
								{
									dataGridViewCell = this.Rows.SharedRow(num).HeaderCell;
									if (fixedWidth)
									{
										width = this.RowHeadersWidth;
									}
								}
								int num2;
								if (fixedWidth)
								{
									num2 = dataGridViewCell.GetPreferredHeight(num, width);
								}
								else
								{
									num2 = dataGridViewCell.GetPreferredSize(num).Height;
								}
								if (this.Rows.SharedRow(num).Height < num2)
								{
									this.Rows[num].Height = num2;
								}
							}
							return;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num4 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num4 != -1 && num3 < height)
					{
						num3 += this.AdjustExpandingRow(num4, columnIndex, fixedWidth);
						num4 = this.Rows.GetNextRow(num4, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						num4 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						while (num4 != -1 && num3 < height)
						{
							num3 += this.AdjustExpandingRow(num4, columnIndex, fixedWidth);
							num4 = this.Rows.GetNextRow(num4, DataGridViewElementStates.Visible);
						}
					}
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x0600170D RID: 5901 RVA: 0x00055DD8 File Offset: 0x00053FD8
		internal void AdjustFillingColumn(DataGridViewColumn dataGridViewColumn, int width)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			this.dataGridViewOper[524288] = true;
			try
			{
				if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) <= this.layout.Data.Width)
				{
					int num = this.layout.Data.Width;
					if (base.DesignMode || dataGridViewColumn == this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) || dataGridViewColumn == this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
					{
						float num2 = 0f;
						int num3 = 0;
						int num4 = 0;
						bool flag = false;
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (dataGridViewColumn2.Visible)
							{
								if (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									num3 += dataGridViewColumn2.Width;
									if (dataGridViewColumn2.Index != dataGridViewColumn.Index)
									{
										num4 += dataGridViewColumn2.MinimumWidth;
										flag = true;
									}
									num2 += dataGridViewColumn2.FillWeight;
								}
								else
								{
									num4 += dataGridViewColumn2.Width;
									num -= dataGridViewColumn2.Width;
								}
							}
						}
						if (!flag)
						{
							return;
						}
						int num5 = this.layout.Data.Width - num4;
						if (width > num5)
						{
							width = num5;
						}
						float fillWeight = dataGridViewColumn.FillWeight;
						float num6 = (float)width * num2 / (float)num3;
						bool flag2 = false;
						foreach (object obj2 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
							if (dataGridViewColumn3.Index != dataGridViewColumn.Index && dataGridViewColumn3.Visible && dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn3.FillWeightInternal = (num2 - num6) * dataGridViewColumn3.FillWeight / (num2 - fillWeight);
								if (dataGridViewColumn3.FillWeight < (float)dataGridViewColumn3.MinimumWidth * num2 / (float)num3)
								{
									flag2 = true;
									dataGridViewColumn3.DesiredFillWidth = -1;
								}
								else
								{
									dataGridViewColumn3.DesiredFillWidth = 0;
								}
							}
						}
						dataGridViewColumn.FillWeightInternal = num6;
						if (flag2)
						{
							float num7 = num2;
							float num8 = num2;
							float num9 = 0f;
							foreach (object obj3 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)obj3;
								if (dataGridViewColumn4.Visible && dataGridViewColumn4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									if (dataGridViewColumn4.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn4.UsedFillWeight = dataGridViewColumn4.FillWeight;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
									else if (dataGridViewColumn4.DesiredFillWidth == -1)
									{
										dataGridViewColumn4.UsedFillWeight = num2 * (float)dataGridViewColumn4.MinimumWidth / (float)num3;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
								}
							}
							foreach (object obj4 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)obj4;
								if (dataGridViewColumn5.Index != dataGridViewColumn.Index && dataGridViewColumn5.Visible && dataGridViewColumn5.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn5.DesiredFillWidth != -1)
								{
									dataGridViewColumn5.UsedFillWeight = Math.Max(dataGridViewColumn5.FillWeight * num7 / num8, num2 * (float)dataGridViewColumn5.MinimumWidth / (float)num3);
									num9 += dataGridViewColumn5.UsedFillWeight;
								}
							}
							dataGridViewColumn.UsedFillWeight += num2 - num9;
							goto IL_8B3;
						}
						using (IEnumerator enumerator5 = this.Columns.GetEnumerator())
						{
							while (enumerator5.MoveNext())
							{
								object obj5 = enumerator5.Current;
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)obj5;
								if (dataGridViewColumn6.Visible && dataGridViewColumn6.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight;
								}
							}
							goto IL_8B3;
						}
					}
					int num10 = 0;
					float num11 = 0f;
					float num12 = 0f;
					bool flag3 = false;
					foreach (object obj6 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)obj6;
						if (dataGridViewColumn7.Visible)
						{
							if (dataGridViewColumn7.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn7.Index != dataGridViewColumn.Index)
								{
									if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn7.Index))
									{
										num10 += dataGridViewColumn7.MinimumWidth;
										num12 += dataGridViewColumn7.FillWeight;
									}
									else
									{
										num10 += dataGridViewColumn7.Width;
									}
									flag3 = true;
								}
								num11 += dataGridViewColumn7.FillWeight;
							}
							else
							{
								num10 += dataGridViewColumn7.Width;
								num -= dataGridViewColumn7.Width;
							}
						}
					}
					if (!flag3)
					{
						return;
					}
					int num13 = this.layout.Data.Width - num10;
					if (width > num13)
					{
						width = num13;
					}
					float fillWeight2 = dataGridViewColumn.FillWeight;
					float num14 = num11 * (float)width / (float)num;
					float num15 = num12 + fillWeight2 - num14;
					foreach (object obj7 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)obj7;
						if (dataGridViewColumn8.Index != dataGridViewColumn.Index && dataGridViewColumn8.Visible && dataGridViewColumn8.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn8.Index))
						{
							dataGridViewColumn8.FillWeightInternal = dataGridViewColumn8.FillWeight * num15 / num12;
						}
					}
					dataGridViewColumn.FillWeightInternal = num14;
					bool flag4 = false;
					foreach (object obj8 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)obj8;
						if (dataGridViewColumn9.Visible && dataGridViewColumn9.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							if (dataGridViewColumn9.FillWeight < (float)dataGridViewColumn9.MinimumWidth * num11 / (float)num)
							{
								flag4 = true;
								dataGridViewColumn9.DesiredFillWidth = -1;
							}
							else
							{
								dataGridViewColumn9.DesiredFillWidth = 0;
							}
						}
					}
					if (flag4)
					{
						float num16 = num11;
						float num17 = num11;
						float num18 = 0f;
						foreach (object obj9 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)obj9;
							if (dataGridViewColumn10.Visible && dataGridViewColumn10.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn10.Index == dataGridViewColumn.Index || this.Columns.DisplayInOrder(dataGridViewColumn10.Index, dataGridViewColumn.Index))
								{
									if (dataGridViewColumn10.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn10.UsedFillWeight = dataGridViewColumn10.FillWeight;
									}
									else
									{
										dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.Width / (float)num;
									}
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
								else if (dataGridViewColumn10.DesiredFillWidth == -1)
								{
									dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.MinimumWidth / (float)num;
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
							}
						}
						foreach (object obj10 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)obj10;
							if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn11.Index) && dataGridViewColumn11.Visible && dataGridViewColumn11.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn11.DesiredFillWidth != -1)
							{
								dataGridViewColumn11.UsedFillWeight = Math.Max(dataGridViewColumn11.FillWeight * num16 / num17, num11 * (float)dataGridViewColumn11.MinimumWidth / (float)num);
								num18 += dataGridViewColumn11.UsedFillWeight;
							}
						}
						dataGridViewColumn.UsedFillWeight += num11 - num18;
					}
					else
					{
						foreach (object obj11 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)obj11;
							if (dataGridViewColumn12.Visible && dataGridViewColumn12.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn12.UsedFillWeight = dataGridViewColumn12.FillWeight;
							}
						}
					}
					IL_8B3:
					this.dataGridViewState2[67108864] = false;
					this.availableWidthForFillColumns = num;
					this.PerformLayoutPrivate(false, true, false, false);
				}
			}
			finally
			{
				this.dataGridViewOper[524288] = false;
			}
		}

		// Token: 0x0600170E RID: 5902 RVA: 0x000567F4 File Offset: 0x000549F4
		private bool AdjustFillingColumns()
		{
			if (this.dataGridViewOper[262144])
			{
				return false;
			}
			this.dataGridViewOper[262144] = true;
			bool result = false;
			try
			{
				int num = 0;
				int num2 = 0;
				int num3 = 0;
				float num4 = 0f;
				ArrayList arrayList = null;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
					if (dataGridViewColumn.Visible)
					{
						if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							num++;
							num3 += ((dataGridViewColumn.DesiredMinimumWidth > 0) ? dataGridViewColumn.DesiredMinimumWidth : dataGridViewColumn.MinimumWidth);
							num4 += dataGridViewColumn.FillWeight;
							if (arrayList == null)
							{
								arrayList = new ArrayList(this.Columns.Count);
							}
							arrayList.Add(dataGridViewColumn);
						}
						else
						{
							num2 += dataGridViewColumn.Width;
						}
					}
				}
				if (num > 0)
				{
					int num5 = this.layout.Data.Width - num2;
					if (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical)
					{
						int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
						int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
						int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && SystemInformation.VerticalScrollBarWidth <= this.layout.Data.Width)
						{
							num5 -= SystemInformation.VerticalScrollBarWidth;
						}
					}
					if (num5 <= num3)
					{
						num5 = 0;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)arrayList[i];
							int num6 = (dataGridViewColumn2.DesiredMinimumWidth > 0) ? dataGridViewColumn2.DesiredMinimumWidth : dataGridViewColumn2.MinimumWidth;
							if (dataGridViewColumn2.Thickness != num6)
							{
								result = true;
								dataGridViewColumn2.ThicknessInternal = num6;
							}
							num5 += dataGridViewColumn2.Thickness;
						}
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)arrayList[i];
							dataGridViewColumn3.UsedFillWeight = (float)dataGridViewColumn3.Width * num4 / (float)num5;
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
						return result;
					}
					int num7 = 0;
					if (this.dataGridViewState2[67108864])
					{
						bool flag = false;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)arrayList[i];
							if (i == arrayList.Count - 1)
							{
								dataGridViewColumn4.DesiredFillWidth = num5 - num7;
							}
							else
							{
								float num8 = dataGridViewColumn4.FillWeight / num4 * (float)num5;
								dataGridViewColumn4.DesiredFillWidth = (int)Math.Round((double)num8, MidpointRounding.AwayFromZero);
								num7 += dataGridViewColumn4.DesiredFillWidth;
							}
							int num9 = (dataGridViewColumn4.DesiredMinimumWidth > 0) ? dataGridViewColumn4.DesiredMinimumWidth : dataGridViewColumn4.MinimumWidth;
							if (dataGridViewColumn4.DesiredFillWidth < num9)
							{
								flag = true;
								dataGridViewColumn4.DesiredFillWidth = -1;
							}
						}
						if (flag)
						{
							float num10 = num4;
							float num11 = num4;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn5.DesiredFillWidth == -1)
								{
									int num12 = (dataGridViewColumn5.DesiredMinimumWidth > 0) ? dataGridViewColumn5.DesiredMinimumWidth : dataGridViewColumn5.MinimumWidth;
									dataGridViewColumn5.UsedFillWeight = num4 * (float)num12 / (float)num5;
									num10 -= dataGridViewColumn5.UsedFillWeight;
									num11 -= dataGridViewColumn5.FillWeight;
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn6.DesiredFillWidth != -1)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight * num10 / num11;
								}
							}
						}
						else
						{
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn7.UsedFillWeight = dataGridViewColumn7.FillWeight;
							}
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
					}
					else if (num5 != this.availableWidthForFillColumns)
					{
						if (num5 > this.availableWidthForFillColumns)
						{
							int num13 = num5 - this.availableWidthForFillColumns;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn8.DesiredFillWidth = dataGridViewColumn8.Width;
							}
							float[] array = new float[arrayList.Count];
							for (int j = 0; j < num13; j++)
							{
								float num14 = 0f;
								bool flag2 = false;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)arrayList[i];
									num14 += dataGridViewColumn9.FillWeight / dataGridViewColumn9.UsedFillWeight;
									if (dataGridViewColumn9.DesiredFillWidth <= dataGridViewColumn9.MinimumWidth)
									{
										flag2 = true;
									}
								}
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)arrayList[i];
									if (j == 0)
									{
										array[i] = (float)this.availableWidthForFillColumns * dataGridViewColumn10.UsedFillWeight / num4;
									}
									if (flag2)
									{
										array[i] += dataGridViewColumn10.FillWeight / dataGridViewColumn10.UsedFillWeight / num14;
									}
									else
									{
										array[i] += dataGridViewColumn10.FillWeight / num4;
									}
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn11.UsedFillWeight = num4 / (float)num5 * array[i];
							}
						}
						else
						{
							int num15 = this.availableWidthForFillColumns - num5;
							int num16 = 0;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn12.DesiredFillWidth = dataGridViewColumn12.Width;
							}
							do
							{
								int num17 = this.availableWidthForFillColumns - num16;
								int num18 = Math.Min(num17 - num5, Math.Max(1, (int)((float)num17 * 0.1f)));
								num16 += num18;
								bool flag3;
								do
								{
									flag3 = false;
									float num19 = 0f;
									float num20 = 0f;
									DataGridViewColumn dataGridViewColumn13 = null;
									for (int i = 0; i < arrayList.Count; i++)
									{
										DataGridViewColumn dataGridViewColumn14 = (DataGridViewColumn)arrayList[i];
										if (dataGridViewColumn14.DesiredFillWidth > dataGridViewColumn14.MinimumWidth)
										{
											float num21 = dataGridViewColumn14.UsedFillWeight / dataGridViewColumn14.FillWeight;
											num20 += num21;
											if (num21 > num19)
											{
												dataGridViewColumn13 = dataGridViewColumn14;
												num19 = num21;
											}
										}
									}
									if (dataGridViewColumn13 != null)
									{
										float num22 = (float)num17 * dataGridViewColumn13.UsedFillWeight / num4 - (float)num18 * dataGridViewColumn13.UsedFillWeight / dataGridViewColumn13.FillWeight / num20;
										if (num22 < (float)dataGridViewColumn13.MinimumWidth)
										{
											num22 = (float)dataGridViewColumn13.MinimumWidth;
										}
										int desiredFillWidth = dataGridViewColumn13.DesiredFillWidth;
										dataGridViewColumn13.DesiredFillWidth = Math.Min(desiredFillWidth, (int)Math.Round((double)num22, MidpointRounding.AwayFromZero));
										flag3 = (desiredFillWidth != dataGridViewColumn13.DesiredFillWidth);
										if (!flag3 && num18 == 1 && desiredFillWidth > dataGridViewColumn13.MinimumWidth)
										{
											DataGridViewColumn dataGridViewColumn15 = dataGridViewColumn13;
											int desiredFillWidth2 = dataGridViewColumn15.DesiredFillWidth;
											dataGridViewColumn15.DesiredFillWidth = desiredFillWidth2 - 1;
											flag3 = true;
										}
										num18 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
										if (flag3)
										{
											num17 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
											for (int i = 0; i < arrayList.Count; i++)
											{
												DataGridViewColumn dataGridViewColumn16 = (DataGridViewColumn)arrayList[i];
												dataGridViewColumn16.UsedFillWeight = num4 / (float)num17 * (float)dataGridViewColumn16.DesiredFillWidth;
											}
										}
									}
								}
								while (flag3 && num18 > 0);
							}
							while (num16 < num15);
						}
						this.availableWidthForFillColumns = num5;
					}
					try
					{
						this.dataGridViewState2[33554432] = false;
						num7 = 0;
						float num23 = 0f;
						while (arrayList.Count > 0)
						{
							DataGridViewColumn dataGridViewColumn17 = null;
							if (arrayList.Count == 1)
							{
								dataGridViewColumn17 = (DataGridViewColumn)arrayList[0];
								dataGridViewColumn17.DesiredFillWidth = Math.Max(num5 - num7, dataGridViewColumn17.MinimumWidth);
								arrayList.Clear();
							}
							else
							{
								float num24 = 0f;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn18 = (DataGridViewColumn)arrayList[i];
									float num25 = Math.Abs(dataGridViewColumn18.UsedFillWeight - dataGridViewColumn18.FillWeight) / dataGridViewColumn18.FillWeight;
									if (num25 > num24 || dataGridViewColumn17 == null)
									{
										dataGridViewColumn17 = dataGridViewColumn18;
										num24 = num25;
									}
								}
								float num26 = dataGridViewColumn17.UsedFillWeight * (float)num5 / num4 + num23;
								dataGridViewColumn17.DesiredFillWidth = Math.Max(dataGridViewColumn17.MinimumWidth, (int)Math.Round((double)num26, MidpointRounding.AwayFromZero));
								num23 = num26 - (float)dataGridViewColumn17.DesiredFillWidth;
								num7 += dataGridViewColumn17.DesiredFillWidth;
								arrayList.Remove(dataGridViewColumn17);
							}
							if (dataGridViewColumn17.DesiredFillWidth != dataGridViewColumn17.Thickness)
							{
								result = true;
								dataGridViewColumn17.ThicknessInternal = dataGridViewColumn17.DesiredFillWidth;
							}
						}
					}
					finally
					{
						this.dataGridViewState2[33554432] = true;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[262144] = false;
			}
			return result;
		}

		// Token: 0x0600170F RID: 5903 RVA: 0x000571AC File Offset: 0x000553AC
		private void AdjustShrinkingRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing)
		{
			if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				this.inBulkPaintCount++;
				try
				{
					if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								this.AutoResizeRowInternal(num, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							}
							return;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num2 = 0;
					int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num3 != -1 && num2 < height)
					{
						this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
						num2 += this.Rows.SharedRow(num3).GetHeight(num3);
						num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num2 < height)
					{
						int num4 = num2;
						int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						num3 = firstDisplayedScrollingRow;
						while (num3 != -1 && num2 < height && firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow)
						{
							this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							num2 += this.Rows.SharedRow(num3).GetHeight(num3);
							num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
						}
						do
						{
							firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							if (num2 < height)
							{
								int previousRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
								if (previousRow != -1)
								{
									this.AutoResizeRowInternal(previousRow, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								}
							}
							num2 = num4;
							num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							while (num3 != -1 && num2 < height)
							{
								this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								num2 += this.Rows.SharedRow(num3).GetHeight(num3);
								num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
							}
						}
						while (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		/// <summary>Returns a value indicating whether all the <see cref="T:System.Windows.Forms.DataGridView" /> cells are currently selected.</summary>
		/// <param name="includeInvisibleCells">
		///       <see langword="true" /> to include the rows and columns with <see cref="P:System.Windows.Forms.DataGridViewBand.Visible" /> property values of <see langword="false" />; otherwise, <see langword="false" />. </param>
		/// <returns>
		///     <see langword="true" /> if all cells (or all visible cells) are selected or if there are no cells (or no visible cells); otherwise, <see langword="false" />.</returns>
		// Token: 0x06001710 RID: 5904 RVA: 0x000573D4 File Offset: 0x000555D4
		public bool AreAllCellsSelected(bool includeInvisibleCells)
		{
			if (this.Columns.Count == 0 && this.Rows.Count == 0)
			{
				return true;
			}
			if (!includeInvisibleCells && (this.Rows.GetFirstRow(DataGridViewElementStates.Visible) == -1 || this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) == null))
			{
				return true;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			{
				bool flag = this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows[num];
					for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						if (!dataGridViewRow.Cells[dataGridViewColumn.Index].Selected)
						{
							return false;
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Columns.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
				{
					if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
					{
						DataGridViewRow dataGridViewRow = this.Rows[num2];
						for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn2 != null; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (!dataGridViewRow.Cells[dataGridViewColumn2.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Rows.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn3 != null; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
				{
					if (!this.selectedBandIndexes.Contains(dataGridViewColumn3.Index))
					{
						for (int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num3 != -1; num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible))
						{
							DataGridViewRow dataGridViewRow = this.Rows[num3];
							if (!dataGridViewRow.Cells[dataGridViewColumn3.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			default:
				return false;
			}
		}

		// Token: 0x06001711 RID: 5905 RVA: 0x0005768A File Offset: 0x0005588A
		internal override void AssignParent(Control value)
		{
			if (this.toolTipControl.Activated)
			{
				this.toolTipControl.Activate(false);
			}
			base.AssignParent(value);
		}

		// Token: 0x06001712 RID: 5906 RVA: 0x000576AC File Offset: 0x000558AC
		private void AutoGenerateDataBoundColumns(DataGridViewColumn[] boundColumns)
		{
			DataGridViewColumnCollection columns = this.Columns;
			DataGridViewColumn[] array = new DataGridViewColumn[columns.Count];
			int num = 0;
			int i;
			for (i = 0; i < columns.Count; i++)
			{
				if (this.DataSource != null && !string.IsNullOrEmpty(columns[i].DataPropertyName) && !columns[i].IsDataBound)
				{
					this.MapDataGridViewColumnToDataBoundField(columns[i]);
				}
				if (columns[i].IsDataBound && this.dataConnection != null && this.dataConnection.BoundColumnIndex(columns[i].DataPropertyName) != -1)
				{
					array[num] = (DataGridViewColumn)columns[i].Clone();
					array[num].DisplayIndex = columns[i].DisplayIndex;
					num++;
				}
			}
			i = 0;
			while (i < columns.Count)
			{
				if (columns[i].IsDataBound)
				{
					columns.RemoveAtInternal(i, true);
				}
				else
				{
					i++;
				}
			}
			DataGridViewColumn[] array2;
			if (array.Length == num)
			{
				array2 = array;
			}
			else
			{
				array2 = new DataGridViewColumn[num];
				Array.Copy(array, array2, num);
			}
			Array.Sort(array2, DataGridViewColumnCollection.ColumnCollectionOrderComparer);
			if (boundColumns != null)
			{
				for (int j = 0; j < boundColumns.Length; j++)
				{
					if (boundColumns[j] != null && boundColumns[j].IsBrowsableInternal)
					{
						bool flag = true;
						int k;
						for (k = 0; k < num; k++)
						{
							if (array2[k] != null && string.Compare(array2[k].DataPropertyName, boundColumns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								flag = false;
								break;
							}
						}
						if (flag)
						{
							columns.Add(boundColumns[j]);
						}
						else
						{
							columns.Add(array2[k]);
							this.MapDataGridViewColumnToDataBoundField(array2[k]);
							array2[k] = null;
						}
					}
				}
			}
			if (num > 0)
			{
				for (int l = 0; l < array2.Length; l++)
				{
					if (array2[l] != null)
					{
						columns.Add(array2[l]);
						this.MapDataGridViewColumnToDataBoundField(array2[l]);
					}
				}
			}
		}

		// Token: 0x06001713 RID: 5907 RVA: 0x0005789C File Offset: 0x00055A9C
		private bool AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AutoResizeColumnInternal(dataGridViewColumn.Index, inheritedAutoSizeMode, fixedHeight);
				}
			}
			return flag;
		}

		/// <summary>Adjusts the width of the specified column to fit the contents of all its cells, including the header cell. </summary>
		/// <param name="columnIndex">The index of the column to resize.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		// Token: 0x06001714 RID: 5908 RVA: 0x000578EE File Offset: 0x00055AEE
		public void AutoResizeColumn(int columnIndex)
		{
			this.AutoResizeColumn(columnIndex, DataGridViewAutoSizeColumnMode.AllCells);
		}

		/// <summary>Adjusts the width of the specified column using the specified size mode.</summary>
		/// <param name="columnIndex">The index of the column to resize. </param>
		/// <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values. </param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />, <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />, or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />. </exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
		// Token: 0x06001715 RID: 5909 RVA: 0x000578F8 File Offset: 0x00055AF8
		public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode)
		{
			this.AutoResizeColumn(columnIndex, autoSizeColumnMode, true);
		}

		/// <summary>Adjusts the width of the specified column using the specified size mode, optionally calculating the width with the expectation that row heights will subsequently be adjusted. </summary>
		/// <param name="columnIndex">The index of the column to resize. </param>
		/// <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values. </param>
		/// <param name="fixedHeight">
		///       <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />, <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />, or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />. </exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
		// Token: 0x06001716 RID: 5910 RVA: 0x00057904 File Offset: 0x00055B04
		protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
		{
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.NotSet || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.None || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedColumnAutoSizingCriteria", new object[]
				{
					"autoSizeColumnMode"
				}));
			}
			switch (autoSizeColumnMode)
			{
			case DataGridViewAutoSizeColumnMode.NotSet:
			case DataGridViewAutoSizeColumnMode.None:
			case DataGridViewAutoSizeColumnMode.ColumnHeader:
			case DataGridViewAutoSizeColumnMode.AllCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.AllCells:
			case DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.DisplayedCells:
				goto IL_77;
			case (DataGridViewAutoSizeColumnMode)3:
			case (DataGridViewAutoSizeColumnMode)5:
			case (DataGridViewAutoSizeColumnMode)7:
			case (DataGridViewAutoSizeColumnMode)9:
				break;
			default:
				if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					goto IL_77;
				}
				break;
			}
			throw new InvalidEnumArgumentException("autoSizeColumnMode", (int)autoSizeColumnMode, typeof(DataGridViewAutoSizeColumnMode));
			IL_77:
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeInvisibleColumnHeader"));
			}
			this.AutoResizeColumnInternal(columnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)autoSizeColumnMode, fixedHeight);
		}

		/// <summary>Adjusts the height of the column headers to fit the contents of the largest column header.</summary>
		// Token: 0x06001717 RID: 5911 RVA: 0x000579CB File Offset: 0x00055BCB
		public void AutoResizeColumnHeadersHeight()
		{
			this.AutoResizeColumnHeadersHeight(true, true);
		}

		/// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column.</summary>
		/// <param name="columnIndex">The index of the column containing the header with the changed content.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001718 RID: 5912 RVA: 0x000579D5 File Offset: 0x00055BD5
		public void AutoResizeColumnHeadersHeight(int columnIndex)
		{
			this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
		}

		/// <summary>Adjusts the height of the column headers to fit their contents, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
		/// <param name="fixedRowHeadersWidth">
		///       <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted. </param>
		/// <param name="fixedColumnsWidth">
		///       <see langword="true" /> to calculate the new height based on the current column widths; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
		// Token: 0x06001719 RID: 5913 RVA: 0x000579E0 File Offset: 0x00055BE0
		protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (fixedColumnsWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnsWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
		/// <param name="columnIndex">The index of the column header whose contents should be used to determine new height.</param>
		/// <param name="fixedRowHeadersWidth">
		///       <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted.</param>
		/// <param name="fixedColumnWidth">
		///       <see langword="true" /> to calculate the new height based on the current width of the specified column; <see langword="false" /> to calculate the height with the expectation that the column width will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		// Token: 0x0600171A RID: 5914 RVA: 0x00057B48 File Offset: 0x00055D48
		protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (columnIndex != -1 || fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (columnIndex != i || fixedColumnWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x0600171B RID: 5915 RVA: 0x00057CDC File Offset: 0x00055EDC
		private bool AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool result = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewColumn dataGridViewColumn = this.Columns[columnIndex];
				int num = dataGridViewColumn.GetPreferredWidth((DataGridViewAutoSizeColumnMode)autoSizeColumnCriteriaInternal, fixedHeight);
				if (num < dataGridViewColumn.MinimumThickness)
				{
					num = dataGridViewColumn.MinimumThickness;
				}
				if (num > 65536)
				{
					num = 65536;
				}
				if (num != dataGridViewColumn.Thickness)
				{
					if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AdjustFillingColumn(dataGridViewColumn, num);
					}
					else
					{
						this.Columns[columnIndex].ThicknessInternal = num;
					}
					result = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return result;
		}

		/// <summary>Adjusts the width of all columns to fit the contents of all their cells, including the header cells.</summary>
		// Token: 0x0600171C RID: 5916 RVA: 0x00057D9C File Offset: 0x00055F9C
		public void AutoResizeColumns()
		{
			this.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
		}

		/// <summary>Adjusts the width of all columns using the specified size mode.</summary>
		/// <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values. </param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
		// Token: 0x0600171D RID: 5917 RVA: 0x00057DA5 File Offset: 0x00055FA5
		public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
		{
			this.AutoResizeColumns(autoSizeColumnsMode, true);
		}

		/// <summary>Adjusts the width of all columns using the specified size mode, optionally calculating the widths with the expectation that row heights will subsequently be adjusted. </summary>
		/// <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values. </param>
		/// <param name="fixedHeight">
		///       <see langword="true" /> to calculate the new widths based on the current row heights; <see langword="false" /> to calculate the widths with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
		// Token: 0x0600171E RID: 5918 RVA: 0x00057DB0 File Offset: 0x00055FB0
		protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
		{
			for (int i = 0; i < this.Columns.Count; i++)
			{
				this.AutoResizeColumn(i, (DataGridViewAutoSizeColumnMode)autoSizeColumnsMode, fixedHeight);
			}
		}

		/// <summary>Adjusts the height of the specified row to fit the contents of all its cells including the header cell.</summary>
		/// <param name="rowIndex">The index of the row to resize.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1. </exception>
		// Token: 0x0600171F RID: 5919 RVA: 0x00057DDC File Offset: 0x00055FDC
		public void AutoResizeRow(int rowIndex)
		{
			this.AutoResizeRow(rowIndex, DataGridViewAutoSizeRowMode.AllCells);
		}

		/// <summary>Adjusts the height of the specified row using the specified size mode.</summary>
		/// <param name="rowIndex">The index of the row to resize. </param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values. </param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeRowMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value. </exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001720 RID: 5920 RVA: 0x00057DE6 File Offset: 0x00055FE6
		public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode)
		{
			this.AutoResizeRow(rowIndex, autoSizeRowMode, true);
		}

		/// <summary>Adjusts the height of the specified row using the specified size mode, optionally calculating the height with the expectation that column widths will subsequently be adjusted. </summary>
		/// <param name="rowIndex">The index of the row to resize. </param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values. </param>
		/// <param name="fixedWidth">
		///       <see langword="true" /> to calculate the new height based on the current width of the columns; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeRowMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value. </exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001721 RID: 5921 RVA: 0x00057DF4 File Offset: 0x00055FF4
		protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowInvisibleRowHeader"));
			}
			this.AutoResizeRowInternal(rowIndex, autoSizeRowMode, fixedWidth, false);
		}

		/// <summary>Adjusts the width of the row headers using the specified size mode.</summary>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value. </exception>
		// Token: 0x06001722 RID: 5922 RVA: 0x00057E60 File Offset: 0x00056060
		public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode, true, true);
		}

		/// <summary>Adjusts the width of the row headers using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <param name="fixedColumnHeadersHeight">
		///       <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
		/// <param name="fixedRowsHeight">
		///       <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value. </exception>
		// Token: 0x06001723 RID: 5923 RVA: 0x00057E6C File Offset: 0x0005606C
		protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
		{
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[]
				{
					"rowHeadersWidthSizeMode"
				}));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (fixedRowsHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (fixedRowsHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode.</summary>
		/// <param name="rowIndex">The index of the row header with the changed content.</param>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /></exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value. </exception>
		// Token: 0x06001724 RID: 5924 RVA: 0x000581A8 File Offset: 0x000563A8
		public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode, true, true);
		}

		/// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
		/// <param name="rowIndex">The index of the row containing the header with the changed content.</param>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <param name="fixedColumnHeadersHeight">
		///       <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
		/// <param name="fixedRowHeight">
		///       <see langword="true" /> to calculate the new width based on the current height of the specified row; <see langword="false" /> to calculate the width with the expectation that the row height will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value. </exception>
		// Token: 0x06001725 RID: 5925 RVA: 0x000581B4 File Offset: 0x000563B4
		protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
		{
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[]
				{
					"rowHeadersWidthSizeMode"
				}));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex != this.Rows.GetFirstRow(DataGridViewElementStates.Visible))
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Displayed) <= DataGridViewElementStates.None)
				{
					return;
				}
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (rowIndex != -1 || fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (rowIndex != num2 || fixedRowHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06001726 RID: 5926 RVA: 0x00058580 File Offset: 0x00056780
		private void AutoResizeRowInternal(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(rowIndex, out num, out num2);
				int num3 = dataGridViewRow.GetPreferredHeight(rowIndex, autoSizeRowMode, fixedWidth);
				if (num3 < num2)
				{
					num3 = num2;
				}
				if (num3 > 65536)
				{
					num3 = 65536;
				}
				if (num != num3)
				{
					if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						if (!this.OnRowHeightInfoPushed(rowIndex, num3, num2))
						{
							this.Rows[rowIndex].ThicknessInternal = num3;
						}
					}
					else if (internalAutosizing)
					{
						this.Rows[rowIndex].ThicknessInternal = num3;
					}
					else
					{
						this.Rows[rowIndex].Thickness = num3;
					}
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the heights of all rows to fit the contents of all their cells, including the header cells.</summary>
		// Token: 0x06001727 RID: 5927 RVA: 0x00058664 File Offset: 0x00056864
		public void AutoResizeRows()
		{
			this.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCells);
		}

		/// <summary>Adjusts the heights of the rows using the specified size mode value.</summary>
		/// <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values. </param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		// Token: 0x06001728 RID: 5928 RVA: 0x0005866D File Offset: 0x0005686D
		public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			this.AutoResizeRows(autoSizeRowsMode, true);
		}

		/// <summary>Adjusts the heights of all rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted. </summary>
		/// <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values.</param>
		/// <param name="fixedWidth">
		///       <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		// Token: 0x06001729 RID: 5929 RVA: 0x00058678 File Offset: 0x00056878
		protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.None:
			case DataGridViewAutoSizeRowsMode.AllHeaders:
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.AllCells:
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				if (autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[]
					{
						"autoSizeRowsMode"
					}));
				}
				if ((autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
				}
				this.AdjustShrinkingRows(autoSizeRowsMode, fixedWidth, false);
				return;
			default:
				throw new InvalidEnumArgumentException("value", (int)autoSizeRowsMode, typeof(DataGridViewAutoSizeRowsMode));
			}
		}

		/// <summary>Adjusts the heights of the specified rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted. </summary>
		/// <param name="rowIndexStart">The index of the first row to resize. </param>
		/// <param name="rowsCount">The number of rows to resize. </param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values. </param>
		/// <param name="fixedWidth">
		///       <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />. </exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///         <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value. </exception>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndexStart" /> is less than 0.-or-
		///         <paramref name="rowsCount" /> is less than 0.</exception>
		// Token: 0x0600172A RID: 5930 RVA: 0x0005871C File Offset: 0x0005691C
		protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
			}
			if (rowsCount < 0)
			{
				throw new ArgumentOutOfRangeException("rowsCount");
			}
			if (rowIndexStart < 0)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				int nextRow = this.Rows.GetNextRow(rowIndexStart - 1, DataGridViewElementStates.Visible);
				int num = 0;
				while (nextRow != -1 && num < rowsCount)
				{
					this.AutoResizeRowInternal(nextRow, autoSizeRowMode, fixedWidth, false);
					num++;
					if (num < rowsCount)
					{
						nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x0600172B RID: 5931 RVA: 0x00058818 File Offset: 0x00056A18
		private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle rectangle = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			rectangle.Y += 4 - mouseBarOffset - 1;
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[128] = true;
			this.trackRowAnchor = mouseY;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x0600172C RID: 5932 RVA: 0x000588C4 File Offset: 0x00056AC4
		private void BeginColumnRelocation(int mouseX, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle columnHeaders = this.layout.ColumnHeaders;
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - columnsWidth;
			if (this.Columns[index].Frozen)
			{
				if (this.RightToLeftInternal)
				{
					columnHeaders.X += columnHeaders.Width - columnsWidth;
				}
				columnHeaders.Width = Math.Min(columnsWidth, this.layout.Data.Width);
			}
			else
			{
				if (!this.RightToLeftInternal)
				{
					columnHeaders.X += columnsWidth;
				}
				else if (this.layout.Data.Width > columnsWidth + num)
				{
					columnHeaders.X += this.layout.Data.Width - columnsWidth - num;
				}
				columnHeaders.Width = Math.Min(num, this.layout.Data.Width);
			}
			this.CaptureMouse(columnHeaders);
			this.dataGridViewOper[32] = true;
			this.dataGridViewState2[1024] = false;
			this.trackColumn = index;
			this.trackColumnEdge = -1;
			this.mouseBarOffset = this.GetColumnXFromIndex(index) - mouseX;
			this.lastHeaderShadow = mouseX;
			base.Invalidate(this.layout.ColumnHeaders);
		}

		// Token: 0x0600172D RID: 5933 RVA: 0x00058A1D File Offset: 0x00056C1D
		private void BeginColumnResize(int x, int columnIndex)
		{
			this.trackColAnchor = x;
			this.trackColumn = columnIndex;
			this.currentColSplitBar = x;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x0600172E RID: 5934 RVA: 0x00058A46 File Offset: 0x00056C46
		private void BeginMouseColumnResize(int mouseX, int mouseBarOffset, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			this.dataGridViewOper[1] = true;
			this.mouseBarOffset = mouseBarOffset;
			this.resizeClipRectangle = this.GetResizeClipRectangle(index);
			this.CaptureMouse(this.resizeClipRectangle);
			this.BeginColumnResize(mouseX, index);
		}

		// Token: 0x0600172F RID: 5935 RVA: 0x00058A88 File Offset: 0x00056C88
		private void BeginKeyboardColumnResize(int columnIndex)
		{
			if (this.IsMouseOperationActive())
			{
				return;
			}
			this.dataGridViewOper[16777216] = true;
			this.mouseBarOffset = 0;
			this.resizeClipRectangle = this.GetResizeClipRectangle(columnIndex);
			this.keyboardResizeStep = this.ScaleToCurrentDpi(this.RightToLeftInternal ? -1 : 1);
			int num = this.GetColumnXFromIndex(columnIndex);
			num += (this.RightToLeftInternal ? (-this.Columns[columnIndex].Width) : this.Columns[columnIndex].Width);
			this.BeginColumnResize(num, columnIndex);
		}

		// Token: 0x06001730 RID: 5936 RVA: 0x00058B1C File Offset: 0x00056D1C
		private Rectangle GetResizeClipRectangle(int columnIndex)
		{
			Rectangle result = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			int columnXFromIndex = this.GetColumnXFromIndex(columnIndex);
			if (this.RightToLeftInternal)
			{
				result.X = this.layout.Data.X - this.mouseBarOffset - 1;
				result.Width = columnXFromIndex - this.Columns[columnIndex].MinimumThickness - this.layout.Data.X + 3;
				int num = columnXFromIndex - this.mouseBarOffset - result.Left - 65536 + 1;
				if (num > 0)
				{
					result.X += num;
					result.Width -= num;
				}
			}
			else
			{
				result.X = columnXFromIndex + this.Columns[columnIndex].MinimumThickness - this.mouseBarOffset - 1;
				result.Width = this.layout.Data.Right - columnXFromIndex - 1;
				int num2 = result.Right + this.mouseBarOffset - columnXFromIndex - 65536;
				if (num2 > 0)
				{
					result.Width -= num2;
				}
			}
			return result;
		}

		/// <summary>Puts the current cell in edit mode.</summary>
		/// <param name="selectAll">
		///       <see langword="true" /> to select all the cell's contents; <see langword="false" /> to not select any contents.</param>
		/// <returns>
		///     <see langword="true" /> if the current cell is already in edit mode or successfully enters edit mode; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">
		///         <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> is not set to a valid cell.-or-This method was called in a handler for the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</exception>
		/// <exception cref="T:System.InvalidCastException">The type indicated by the cell's <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not derive from the <see cref="T:System.Windows.Forms.Control" /> type.-or-The type indicated by the cell's <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not implement the <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> interface.</exception>
		/// <exception cref="T:System.Exception">Initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001731 RID: 5937 RVA: 0x00058C4E File Offset: 0x00056E4E
		public virtual bool BeginEdit(bool selectAll)
		{
			if (this.ptCurrentCell.X == -1)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_NoCurrentCell"));
			}
			return this.IsCurrentCellInEditMode || this.BeginEditInternal(selectAll);
		}

		// Token: 0x06001732 RID: 5938 RVA: 0x00058C80 File Offset: 0x00056E80
		private bool BeginEditInternal(bool selectAll)
		{
			if (this.dataGridViewOper[2097152])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_BeginEditNotReentrant"));
			}
			bool result;
			try
			{
				this.dataGridViewOper[2097152] = true;
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) || !this.ColumnEditable(this.ptCurrentCell.X))
				{
					result = false;
				}
				else
				{
					Type editType = currentCellInternal.EditType;
					if (editType == null)
					{
						Type @interface = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
						if (@interface == null)
						{
							return false;
						}
					}
					DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					this.OnCellBeginEdit(dataGridViewCellCancelEventArgs);
					if (dataGridViewCellCancelEventArgs.Cancel)
					{
						result = false;
					}
					else if (this.ptCurrentCell.X > -1)
					{
						DataGridViewCell dataGridViewCell = currentCellInternal;
						currentCellInternal = this.CurrentCellInternal;
						if (dataGridViewCell != currentCellInternal)
						{
							if (this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) || !this.ColumnEditable(this.ptCurrentCell.X))
							{
								return false;
							}
							editType = currentCellInternal.EditType;
							if (editType == null)
							{
								Type interface2 = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
								if (interface2 == null)
								{
									return false;
								}
							}
						}
						DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
						if (editType == null)
						{
							this.dataGridViewState1[32768] = true;
							this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal);
							((IDataGridViewEditingCell)currentCellInternal).PrepareEditingCellForEdit(selectAll);
							result = true;
						}
						else
						{
							Type interface3 = editType.GetInterface("System.Windows.Forms.IDataGridViewEditingControl");
							if (!editType.IsSubclassOf(Type.GetType("System.Windows.Forms.Control")) || interface3 == null)
							{
								throw new InvalidCastException(SR.GetString("DataGridView_InvalidEditingControl"));
							}
							if (this.latestEditingControl != null && editType.IsInstanceOfType(this.latestEditingControl) && !this.latestEditingControl.GetType().IsSubclassOf(editType))
							{
								this.editingControl = this.latestEditingControl;
							}
							else
							{
								this.editingControl = (Control)SecurityUtils.SecureCreateInstance(editType);
								((IDataGridViewEditingControl)this.editingControl).EditingControlDataGridView = this;
								if (this.latestEditingControl != null)
								{
									this.latestEditingControl.Dispose();
									this.latestEditingControl = null;
								}
							}
							if (string.IsNullOrEmpty(this.editingControl.AccessibleName))
							{
								this.editingControl.AccessibleName = SR.GetString("DataGridView_AccEditingControlAccName");
							}
							this.editingControl.ImeMode = base.ImeMode;
							((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = this.ptCurrentCell.Y;
							this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal);
							this.WireEditingControlEvents();
							DataGridViewEditingControlShowingEventArgs dataGridViewEditingControlShowingEventArgs = new DataGridViewEditingControlShowingEventArgs(this.editingControl, inheritedStyle);
							this.OnEditingControlShowing(dataGridViewEditingControlShowingEventArgs);
							if (this.editingPanel == null || this.editingControl == null)
							{
								result = false;
							}
							else
							{
								this.editingPanel.BackColor = dataGridViewEditingControlShowingEventArgs.CellStyle.BackColor;
								((IDataGridViewEditingControl)this.editingControl).ApplyCellStyleToEditingControl(dataGridViewEditingControlShowingEventArgs.CellStyle);
								if (this.toolTipControl.Activated && this.ptToolTipCell == this.ptCurrentCell)
								{
									this.toolTipControl.Activate(false);
								}
								this.PositionEditingControl(true, true, true);
								if (this.editingPanel == null || this.editingControl == null)
								{
									result = false;
								}
								else
								{
									((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(selectAll);
									this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
									result = true;
								}
							}
						}
					}
					else
					{
						result = false;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[2097152] = false;
			}
			return result;
		}

		// Token: 0x06001733 RID: 5939 RVA: 0x0005904C File Offset: 0x0005724C
		private void BeginRowHeadersResize(int mouseX, int mouseBarOffset)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle rectangle = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			if (this.RightToLeftInternal)
			{
				rectangle.X -= mouseBarOffset + 1;
				rectangle.Width -= 3;
			}
			else
			{
				rectangle.X += 4 - mouseBarOffset - 1;
			}
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[256] = true;
			this.trackColAnchor = mouseX;
			this.mouseBarOffset = mouseBarOffset;
			this.currentColSplitBar = mouseX;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06001734 RID: 5940 RVA: 0x00059120 File Offset: 0x00057320
		private void BeginRowResize(int mouseY, int mouseBarOffset, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle cursorClip = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			int rowYFromIndex = this.GetRowYFromIndex(index);
			cursorClip.Y = rowYFromIndex + this.Rows.SharedRow(index).GetMinimumHeight(index) - mouseBarOffset - 1;
			cursorClip.Height = this.layout.Data.Y + this.layout.Data.Height - rowYFromIndex - 1;
			this.CaptureMouse(cursorClip);
			this.dataGridViewOper[2] = true;
			this.trackRowAnchor = mouseY;
			this.trackRow = index;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06001735 RID: 5941 RVA: 0x000591E8 File Offset: 0x000573E8
		private void BuildInheritedColumnHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle, DataGridViewCell cell)
		{
			DataGridViewCellStyle dataGridViewCellStyle = null;
			if (cell.HasStyle)
			{
				dataGridViewCellStyle = cell.Style;
			}
			DataGridViewCellStyle dataGridViewCellStyle2 = this.ColumnHeadersDefaultCellStyle;
			DataGridViewCellStyle dataGridViewCellStyle3 = this.DefaultCellStyle;
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle.BackColor;
			}
			else if (!dataGridViewCellStyle2.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle2.BackColor;
			}
			else
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle3.BackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle.ForeColor;
			}
			else if (!dataGridViewCellStyle2.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle2.ForeColor;
			}
			else
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle3.ForeColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle.SelectionBackColor;
			}
			else if (!dataGridViewCellStyle2.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle2.SelectionBackColor;
			}
			else
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle3.SelectionBackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle.SelectionForeColor;
			}
			else if (!dataGridViewCellStyle2.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle2.SelectionForeColor;
			}
			else
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle3.SelectionForeColor;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle.Font;
			}
			else if (dataGridViewCellStyle2.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle2.Font;
			}
			else
			{
				inheritedCellStyle.Font = dataGridViewCellStyle3.Font;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle.NullValue;
			}
			else if (!dataGridViewCellStyle2.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle2.NullValue;
			}
			else
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle3.NullValue;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle.DataSourceNullValue;
			}
			else if (!dataGridViewCellStyle2.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle2.DataSourceNullValue;
			}
			else
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle3.DataSourceNullValue;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle.Format;
			}
			else if (dataGridViewCellStyle2.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle2.Format;
			}
			else
			{
				inheritedCellStyle.Format = dataGridViewCellStyle3.Format;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle.FormatProvider;
			}
			else if (!dataGridViewCellStyle2.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle2.FormatProvider;
			}
			else
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle3.FormatProvider;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle.Alignment;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle2.Alignment;
			}
			else
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle3.Alignment;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle.WrapMode;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle2.WrapMode;
			}
			else
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle3.WrapMode;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle.Tag;
			}
			else if (dataGridViewCellStyle2.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle2.Tag;
			}
			else
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle3.Tag;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle.Padding;
				return;
			}
			if (dataGridViewCellStyle2.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle2.Padding;
				return;
			}
			inheritedCellStyle.PaddingInternal = dataGridViewCellStyle3.Padding;
		}

		// Token: 0x06001736 RID: 5942 RVA: 0x00059578 File Offset: 0x00057778
		private Rectangle CalcColRelocationFeedbackRect(int mouseX)
		{
			Rectangle b = this.layout.ColumnHeaders;
			if (this.layout.TopLeftHeader.Width > 0)
			{
				b = Rectangle.Union(this.layout.TopLeftHeader, b);
			}
			Rectangle result;
			if (this.RightToLeftInternal)
			{
				result = new Rectangle(mouseX + this.mouseBarOffset - this.Columns[this.trackColumn].Thickness + 1, b.Y, this.Columns[this.trackColumn].Thickness, b.Height);
				result.X = Math.Max(b.Left, result.X);
				result.X = Math.Min(result.X, b.Right - result.Width);
			}
			else
			{
				result = new Rectangle(mouseX + this.mouseBarOffset - 1, b.Y, this.Columns[this.trackColumn].Thickness, b.Height);
				result.X = Math.Min(b.Right - result.Width, result.X);
				result.X = Math.Max(result.X, b.Left);
			}
			return result;
		}

		// Token: 0x06001737 RID: 5943 RVA: 0x000596C0 File Offset: 0x000578C0
		private Rectangle CalcColResizeFeedbackRect(int mouseX)
		{
			Rectangle data = this.layout.Data;
			Rectangle result = new Rectangle(mouseX + this.mouseBarOffset - 1, data.Y, 3, data.Height);
			if (this.RightToLeftInternal)
			{
				result.X = Math.Max(data.Left, result.X);
			}
			else
			{
				result.X = Math.Min(data.Right - 3, result.X);
				result.X = Math.Max(result.X, 0);
			}
			return result;
		}

		// Token: 0x06001738 RID: 5944 RVA: 0x00059750 File Offset: 0x00057950
		private Rectangle CalcRowResizeFeedbackRect(int mouseY)
		{
			Rectangle data = this.layout.Data;
			Rectangle result = new Rectangle(data.X, mouseY + this.mouseBarOffset - 1, data.Width, 3);
			result.Y = Math.Min(data.Bottom - 3, result.Y);
			result.Y = Math.Max(result.Y, 0);
			return result;
		}

		/// <summary>Cancels edit mode for the currently selected cell and discards any changes.</summary>
		/// <returns>
		///     <see langword="true" /> if the cancel was successful; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001739 RID: 5945 RVA: 0x000597BA File Offset: 0x000579BA
		public bool CancelEdit()
		{
			return this.CancelEdit(false);
		}

		// Token: 0x0600173A RID: 5946 RVA: 0x000597C4 File Offset: 0x000579C4
		private bool CancelEdit(bool endEdit)
		{
			if (this.ptCurrentCell.X != -1)
			{
				int x = this.ptCurrentCell.X;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
				if (this.IsCurrentCellInEditMode)
				{
					if (endEdit && this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null)
					{
						bool flag = this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.InitialValueRestoration, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
					}
					else
					{
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs2 = null;
						IDataGridViewEditingCell dataGridViewEditingCell = null;
						try
						{
							this.dataGridViewState1[512] = true;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = this.uneditedFormattedValue;
								((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
							}
							else
							{
								dataGridViewEditingCell = (this.CurrentCellInternal as IDataGridViewEditingCell);
								dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
								dataGridViewEditingCell.EditingCellValueChanged = false;
							}
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							dataGridViewDataErrorEventArgs2 = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
						}
						finally
						{
							this.dataGridViewState1[512] = false;
						}
						if (dataGridViewDataErrorEventArgs2 != null)
						{
							this.OnDataErrorInternal(dataGridViewDataErrorEventArgs2);
							if (dataGridViewDataErrorEventArgs2.ThrowException)
							{
								throw dataGridViewDataErrorEventArgs2.Exception;
							}
						}
						if (this.editingControl != null)
						{
							((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
						}
						else
						{
							dataGridViewEditingCell.PrepareEditingCellForEdit(true);
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
					}
				}
				else if (this.ptCurrentCell.X == -1 && this.Focused && this.Rows.Count > 0)
				{
					if (this.Columns.Count > x && this.Columns[x].Visible)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow != -1)
						{
							bool flag2 = this.SetAndSelectCurrentCellAddress(x, firstRow, true, false, false, false, false);
						}
					}
					else
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			return true;
		}

		// Token: 0x0600173B RID: 5947 RVA: 0x000599E4 File Offset: 0x00057BE4
		private DataGridViewDataErrorEventArgs CancelEditPrivate()
		{
			bool isCurrentCellDirty = this.IsCurrentCellDirty;
			bool isCurrentRowDirty = this.IsCurrentRowDirty;
			if (this.IsCurrentCellInEditMode)
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
			}
			if (this.DataSource != null || this.VirtualMode)
			{
				if ((isCurrentRowDirty && !isCurrentCellDirty) || (this.dataGridViewState1[524288] && !this.dataGridViewState1[262144]))
				{
					bool flag = this.dataGridViewState1[524288];
					this.IsCurrentRowDirtyInternal = false;
					if (this.VirtualMode)
					{
						QuestionEventArgs questionEventArgs = new QuestionEventArgs(flag);
						this.OnCancelRowEdit(questionEventArgs);
						flag &= questionEventArgs.Response;
					}
					if (this.DataSource != null)
					{
						int x = this.ptCurrentCell.X;
						this.dataConnection.CancelRowEdit(true, this.dataGridViewState1[524288]);
						if (this.dataConnection.List.Count == 0)
						{
							if (isCurrentCellDirty || this.ptCurrentCell.Y == -1 || this.ptCurrentCell.X == -1)
							{
								if (!this.IsColumnOutOfBounds(x) && this.Columns[x].Visible)
								{
									this.SetAndSelectCurrentCellAddress(x, 0, true, false, false, true, false);
								}
							}
							else
							{
								this.dataConnection.OnNewRowNeeded();
							}
						}
						flag = false;
					}
					if (this.ptCurrentCell.Y > -1)
					{
						this.InvalidateRowPrivate(this.ptCurrentCell.Y);
						DataGridViewCell currentCellInternal = this.CurrentCellInternal;
						if (this.IsCurrentCellInEditMode)
						{
							DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
							if (this.editingControl != null)
							{
								this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal);
								if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
								{
									this.PositionEditingControl(true, true, false);
								}
							}
							else
							{
								this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal);
							}
						}
					}
					if (flag && this.ptCurrentCell.Y == this.newRowIndex - 1)
					{
						this.DiscardNewRow();
					}
				}
			}
			else if (!this.IsCurrentRowDirty && this.ptCurrentCell.Y == this.newRowIndex - 1 && this.dataGridViewState1[2097152])
			{
				this.DiscardNewRow();
			}
			return null;
		}

		// Token: 0x0600173C RID: 5948 RVA: 0x00059C2B File Offset: 0x00057E2B
		internal bool CancelToolTipPopup(ToolTip toolTip)
		{
			return this.toolTipControl.ToolTip != toolTip && string.IsNullOrEmpty(this.toolTipCaption) && this.ShowCellToolTips;
		}

		// Token: 0x0600173D RID: 5949 RVA: 0x00059C52 File Offset: 0x00057E52
		private bool CanSort(DataGridViewColumn dataGridViewColumn)
		{
			return dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (!this.VirtualMode || dataGridViewColumn.IsDataBound);
		}

		// Token: 0x0600173E RID: 5950 RVA: 0x00059C6F File Offset: 0x00057E6F
		private bool IsSortable(DataGridViewColumn dataGridViewColumn)
		{
			return dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable && (!this.VirtualMode || dataGridViewColumn.IsDataBound);
		}

		// Token: 0x0600173F RID: 5951 RVA: 0x00059C8C File Offset: 0x00057E8C
		private bool CanValidateDataBoundDataGridViewCell(DataGridViewCell dataGridViewCurrentCell)
		{
			if (dataGridViewCurrentCell == null && this.ptCurrentCell.X > -1)
			{
				dataGridViewCurrentCell = this.CurrentCellInternal;
			}
			return dataGridViewCurrentCell == null || !dataGridViewCurrentCell.OwningColumn.IsDataBoundInternal || (!this.dataGridViewOper[1048576] && (this.dataConnection == null || (!this.dataConnection.ProcessingMetaDataChanges && (!this.dataConnection.CancellingRowEdit || this.dataConnection.RestoreRow) && this.dataConnection.CurrencyManager.Count > this.ptCurrentCell.Y && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)));
		}

		// Token: 0x06001740 RID: 5952 RVA: 0x00059D4D File Offset: 0x00057F4D
		private void CaptureMouse(Rectangle cursorClip)
		{
			base.CaptureInternal = true;
			Cursor.ClipInternal = base.RectangleToScreen(cursorClip);
		}

		// Token: 0x06001741 RID: 5953 RVA: 0x00059D62 File Offset: 0x00057F62
		private void ClearRegionCache()
		{
			this.cachedScrollableRegion = null;
		}

		/// <summary>Clears the current selection by unselecting all selected cells.</summary>
		// Token: 0x06001742 RID: 5954 RVA: 0x00059D6C File Offset: 0x00057F6C
		public void ClearSelection()
		{
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				this.RemoveIndividuallySelectedCells();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
					}
					if (this.ptCurrentCell.X != -1 && this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, -1);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
					}
					break;
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		/// <summary>Cancels the selection of all currently selected cells except the one indicated, optionally ensuring that the indicated cell is selected. </summary>
		/// <param name="columnIndexException">The column index to exclude.</param>
		/// <param name="rowIndexException">The row index to exclude.</param>
		/// <param name="selectExceptionElement">
		///       <see langword="true" /> to select the excluded cell, row, or column; <see langword="false" /> to retain its original state.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndexException" /> is greater than the highest column index.-or-
		///         <paramref name="columnIndexException" /> is less than -1 when <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect" />; otherwise, <paramref name="columnIndexException" /> is less than 0.-or- 
		///         <paramref name="rowIndexException" /> is greater than the highest row index.-or-
		///         <paramref name="rowIndexException" /> is less than -1 when <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" />; otherwise, <paramref name="rowIndexException" /> is less than 0.</exception>
		// Token: 0x06001743 RID: 5955 RVA: 0x00059EA0 File Offset: 0x000580A0
		protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (columnIndexException < 0 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndexException < -1 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (rowIndexException < 0 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndexException < -1 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			}
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int i = 0;
					while (i < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[i] != rowIndexException)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
						}
						else
						{
							i++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int j = 0;
					while (j < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[j] != columnIndexException)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
						}
						else
						{
							j++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				}
				if (selectExceptionElement)
				{
					this.SetSelectedElementCore(columnIndexException, rowIndexException, true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001744 RID: 5956 RVA: 0x0005A0C8 File Offset: 0x000582C8
		private bool ColumnEditable(int columnIndex)
		{
			return !this.Columns[columnIndex].IsDataBound || this.dataConnection == null || this.dataConnection.AllowEdit;
		}

		// Token: 0x06001745 RID: 5957 RVA: 0x0005A0F8 File Offset: 0x000582F8
		private bool ColumnNeedsDisplayedState(DataGridViewColumn dataGridViewColumn)
		{
			if (!dataGridViewColumn.Visible)
			{
				return false;
			}
			if (!dataGridViewColumn.Frozen)
			{
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				if (firstDisplayedScrollingCol != -1)
				{
					if (firstDisplayedScrollingCol == dataGridViewColumn.Index)
					{
						return this.displayedBandsInfo.NumDisplayedScrollingCols > 0;
					}
					if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, dataGridViewColumn.Index))
					{
						return this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedScrollingCols;
					}
				}
				return false;
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (firstColumn.Index == dataGridViewColumn.Index)
			{
				return this.displayedBandsInfo.NumDisplayedFrozenCols > 0;
			}
			return this.Columns.GetColumnCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, firstColumn.Index, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedFrozenCols;
		}

		// Token: 0x06001746 RID: 5958 RVA: 0x0005A1C8 File Offset: 0x000583C8
		private bool ColumnRelocationTarget(MouseEventArgs e, DataGridView.HitTestInfo hti, out int previousColumnIndex)
		{
			previousColumnIndex = -1;
			if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight)
			{
				if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(hti.col);
					int width = this.Columns[hti.col].Width;
					if ((this.RightToLeftInternal && e.X < columnXFromIndex - width / 2) || (!this.RightToLeftInternal && e.X > columnXFromIndex + width / 2))
					{
						previousColumnIndex = hti.col;
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							previousColumnIndex = previousColumn.Index;
						}
					}
				}
				else
				{
					previousColumnIndex = ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight) ? hti.col : hti.adjacentCol);
				}
				DataGridViewColumn dataGridViewColumn = null;
				if (previousColumnIndex != -1)
				{
					dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[previousColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (this.trackColumn != previousColumnIndex && (previousColumnIndex != -1 || hti.col != this.trackColumn) && (dataGridViewColumn == null || this.trackColumn != dataGridViewColumn.Index))
				{
					return true;
				}
			}
			else if ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight) && hti.col != this.trackColumn)
			{
				return true;
			}
			return false;
		}

		// Token: 0x06001747 RID: 5959 RVA: 0x0005A349 File Offset: 0x00058549
		private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2)
		{
			return columnDisplayIndex1 < columnDisplayIndex2 || (columnDisplayIndex1 == columnDisplayIndex2 && columnIndex1 < columnIndex2);
		}

		/// <summary>Commits changes in the current cell to the data cache without ending edit mode.</summary>
		/// <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur. </param>
		/// <returns>
		///     <see langword="true" /> if the changes were committed; otherwise <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x06001748 RID: 5960 RVA: 0x0005A35C File Offset: 0x0005855C
		public bool CommitEdit(DataGridViewDataErrorContexts context)
		{
			if (this.IsCurrentCellInEditMode)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001749 RID: 5961 RVA: 0x0005A3A8 File Offset: 0x000585A8
		private DataGridViewDataErrorEventArgs CommitEdit(ref DataGridViewCell dataGridViewCurrentCell, DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave)
		{
			if (validateCell == DataGridView.DataGridViewValidateCellInternal.Always)
			{
				if (fireCellLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireRowLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnRowLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireLeave)
				{
					base.OnLeave(EventArgs.Empty);
					if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
				bool flag = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
					{
						if (fireRowEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnRowEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, true, true);
						}
						if (fireCellEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnCellEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
						{
							Cancel = true
						};
					}
					else if (!this.IsCurrentCellInEditMode || !this.IsCurrentCellDirty)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
			}
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return null;
			}
			if (this.IsCurrentCellDirty)
			{
				bool flag2 = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag2)
				{
					if (validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
							{
								Cancel = true
							};
						}
					}
					object formattedValue;
					if (this.editingControl != null)
					{
						formattedValue = ((IDataGridViewEditingControl)this.editingControl).GetEditingControlFormattedValue(context);
					}
					else
					{
						formattedValue = ((IDataGridViewEditingCell)this.CurrentCellInternal).GetEditingCellFormattedValue(context);
					}
					Exception exception;
					if (!this.PushFormattedValue(ref dataGridViewCurrentCell, formattedValue, out exception))
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
						dataGridViewDataErrorEventArgs.Cancel = true;
						this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
						return dataGridViewDataErrorEventArgs;
					}
					else
					{
						if (!this.IsCurrentCellInEditMode)
						{
							return null;
						}
						this.uneditedFormattedValue = formattedValue;
					}
				}
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
				this.IsCurrentRowDirtyInternal = true;
				if (flag2 && (validateCell == DataGridView.DataGridViewValidateCellInternal.Always || validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged))
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			return null;
		}

		// Token: 0x0600174A RID: 5962 RVA: 0x0005A724 File Offset: 0x00058924
		private bool CommitEdit(DataGridViewDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange)
		{
			if (this.dataGridViewOper[32768])
			{
				return false;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, forCurrentCellChange ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.WhenChanged, forCurrentCellChange, forCurrentCellChange, forCurrentRowChange, forCurrentRowChange, false);
			if (dataGridViewDataErrorEventArgs != null)
			{
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					return false;
				}
				dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			if (forCurrentRowChange && forCurrentCellChange)
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				int x = this.ptCurrentCell.X;
				int y = this.ptCurrentCell.Y;
				if (this.OnRowValidating(ref currentCellInternal, x, y))
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowEnter(ref currentCellInternal, x, y, true, true);
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnCellEnter(ref currentCellInternal, x, y);
					return false;
				}
				else
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowValidated(ref currentCellInternal, x, y);
				}
			}
			return true;
		}

		// Token: 0x0600174B RID: 5963 RVA: 0x0005A824 File Offset: 0x00058A24
		private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			if (forCurrentCellChange)
			{
				if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, this.ptCurrentCell.Y != rowIndex, this.ptCurrentCell.Y != rowIndex, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
				{
					return false;
				}
				if (this.ptCurrentCell.Y != rowIndex && this.ptCurrentCell.Y != -1)
				{
					DataGridViewCell dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnCellEnter(ref dataGridViewCell, x, y);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						return false;
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			else if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, this.ptCurrentCell.Y != rowIndex))
			{
				return false;
			}
			if (this.IsColumnOutOfBounds(columnIndex))
			{
				return false;
			}
			if (rowIndex >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (forCurrentCellChange && this.ptCurrentCell.X == -1 && lastRow != -1)
				{
					bool flag = this.SetAndSelectCurrentCellAddress(columnIndex, lastRow, true, false, false, false, false);
				}
				return false;
			}
			return rowIndex <= -1 || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
		}

		// Token: 0x0600174C RID: 5964 RVA: 0x0005A9D8 File Offset: 0x00058BD8
		internal void CompleteCellsCollection(DataGridViewRow dataGridViewRow)
		{
			int count = dataGridViewRow.Cells.Count;
			if (this.Columns.Count > count)
			{
				int num = 0;
				DataGridViewCell[] array = new DataGridViewCell[this.Columns.Count - count];
				for (int i = count; i < this.Columns.Count; i++)
				{
					if (this.Columns[i].CellTemplate == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_AColumnHasNoCellTemplate"));
					}
					DataGridViewCell dataGridViewCell = (DataGridViewCell)this.Columns[i].CellTemplate.Clone();
					array[num] = dataGridViewCell;
					num++;
				}
				dataGridViewRow.Cells.AddRange(array);
			}
		}

		// Token: 0x0600174D RID: 5965 RVA: 0x0005AA84 File Offset: 0x00058C84
		private int ComputeFirstVisibleScrollingColumn()
		{
			if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) >= this.layout.Data.Width)
			{
				this.negOffset = 0;
				return -1;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			if (this.horizontalOffset == 0)
			{
				this.negOffset = 0;
				if (dataGridViewColumn != null)
				{
					return dataGridViewColumn.Index;
				}
				return -1;
			}
			else
			{
				int num = 0;
				while (dataGridViewColumn != null)
				{
					num += dataGridViewColumn.Thickness;
					if (num > this.horizontalOffset)
					{
						break;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (dataGridViewColumn != null)
				{
					this.negOffset = dataGridViewColumn.Thickness - (num - this.horizontalOffset);
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn == null)
				{
					this.negOffset = 0;
					return -1;
				}
				if (this.negOffset != this.horizontalOffset)
				{
					this.negOffset = 0;
				}
				return dataGridViewColumn.Index;
			}
		}

		// Token: 0x0600174E RID: 5966 RVA: 0x0005AB64 File Offset: 0x00058D64
		private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight)
		{
			int num = this.layout.Data.Height - totalVisibleFrozenHeight;
			int num2 = 0;
			int num3 = 0;
			int num4 = this.Rows.Count;
			if (num4 == 0 || num <= 0)
			{
				return 0;
			}
			num4--;
			DataGridViewElementStates rowState = this.Rows.GetRowState(num4);
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return 0;
			}
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num4 != -1)
			{
				num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				if (num2 > num)
				{
					return num2;
				}
			}
			while (num4 != -1 && num3 + num2 <= num)
			{
				num3 += num2;
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num4 != -1)
				{
					num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				}
			}
			return num3;
		}

		// Token: 0x0600174F RID: 5967 RVA: 0x0005AC24 File Offset: 0x00058E24
		private int ComputeHeightOfScrolledOffRows()
		{
			int num = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num2 != -1)
				{
					while (num2 != this.displayedBandsInfo.FirstDisplayedScrollingRow)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			return num;
		}

		// Token: 0x06001750 RID: 5968 RVA: 0x0005AC8C File Offset: 0x00058E8C
		private int ComputeHeightOfTrailingScrollingRows()
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				return this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lastRow) + this.Rows.SharedRow(lastRow).GetHeight(lastRow);
			}
			return 0;
		}

		// Token: 0x06001751 RID: 5969 RVA: 0x0005ACE4 File Offset: 0x00058EE4
		private bool ComputeLayout()
		{
			this.ClearRegionCache();
			DataGridView.LayoutData layoutData = new DataGridView.LayoutData(this.layout);
			Rectangle resizeBoxRect = this.layout.ResizeBoxRect;
			if (this.normalClientRectangle.Width > 0 || this.normalClientRectangle.Height > 0)
			{
				layoutData.Inside = this.normalClientRectangle;
			}
			else
			{
				layoutData.Inside = base.ClientRectangle;
			}
			Rectangle inside = layoutData.Inside;
			int borderWidth = this.BorderWidth;
			inside.Inflate(-borderWidth, -borderWidth);
			if (inside.Height < 0)
			{
				inside.Height = 0;
			}
			if (inside.Width < 0)
			{
				inside.Width = 0;
			}
			Rectangle rectangle = inside;
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle columnHeaders = rectangle;
				columnHeaders.Height = Math.Min(this.columnHeadersHeight, columnHeaders.Height);
				rectangle.Y += columnHeaders.Height;
				rectangle.Height -= columnHeaders.Height;
				layoutData.ColumnHeaders = columnHeaders;
			}
			else
			{
				layoutData.ColumnHeaders = Rectangle.Empty;
			}
			if (this.layout.RowHeadersVisible)
			{
				Rectangle rowHeaders = rectangle;
				rowHeaders.Width = Math.Min(this.rowHeadersWidth, rowHeaders.Width);
				if (this.RightToLeftInternal)
				{
					rowHeaders.X += rectangle.Width - rowHeaders.Width;
				}
				else
				{
					rectangle.X += rowHeaders.Width;
				}
				rectangle.Width -= rowHeaders.Width;
				layoutData.RowHeaders = rowHeaders;
				if (this.layout.ColumnHeadersVisible)
				{
					Rectangle columnHeaders2 = layoutData.ColumnHeaders;
					Rectangle topLeftHeader = columnHeaders2;
					topLeftHeader.Width = Math.Min(this.rowHeadersWidth, topLeftHeader.Width);
					columnHeaders2.Width -= topLeftHeader.Width;
					if (this.RightToLeftInternal)
					{
						topLeftHeader.X += rectangle.Width;
					}
					else
					{
						columnHeaders2.X += topLeftHeader.Width;
					}
					layoutData.TopLeftHeader = topLeftHeader;
					layoutData.ColumnHeaders = columnHeaders2;
				}
				else
				{
					layoutData.TopLeftHeader = Rectangle.Empty;
				}
			}
			else
			{
				layoutData.RowHeaders = Rectangle.Empty;
				layoutData.TopLeftHeader = Rectangle.Empty;
			}
			if (this.SingleVerticalBorderAdded)
			{
				if (!this.RightToLeftInternal)
				{
					int num = rectangle.X;
					rectangle.X = num + 1;
				}
				if (rectangle.Width > 0)
				{
					int num = rectangle.Width;
					rectangle.Width = num - 1;
				}
			}
			if (this.SingleHorizontalBorderAdded)
			{
				int num = rectangle.Y;
				rectangle.Y = num + 1;
				if (rectangle.Height > 0)
				{
					num = rectangle.Height;
					rectangle.Height = num - 1;
				}
			}
			layoutData.Data = rectangle;
			layoutData.Inside = inside;
			this.layout = layoutData;
			this.layout.dirty = false;
			bool result = this.AdjustFillingColumns();
			this.layout = layoutData;
			this.LayoutScrollBars();
			if (!resizeBoxRect.Equals(this.layout.ResizeBoxRect) && !this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			return result;
		}

		// Token: 0x06001752 RID: 5970 RVA: 0x0005B01C File Offset: 0x0005921C
		private void ComputeLayoutShortcut(bool computeVisibleRows)
		{
			if (computeVisibleRows)
			{
				this.ComputeVisibleRows();
			}
			if (this.vertScrollBar.Enabled)
			{
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int value = this.vertScrollBar.Value;
				int num = Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8);
				this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
				this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
				this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
				this.verticalOffset = this.vertScrollBar.Value;
				if (this.vertScrollBar.Visible && (value != this.verticalOffset || num != Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8)))
				{
					this.vertScrollBar.Invalidate();
				}
			}
		}

		// Token: 0x06001753 RID: 5971 RVA: 0x0005B140 File Offset: 0x00059340
		private void ComputeVisibleColumns()
		{
			int num = 0;
			int num2 = 0;
			int width = this.layout.Data.Width;
			int num3 = 0;
			int num4 = 0;
			int num5 = -1;
			int lastDisplayedFrozenCol = -1;
			int num6 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (width <= 0 || this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
			{
				this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
				this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
				this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
				this.displayedBandsInfo.LastDisplayedFrozenCol = -1;
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				return;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.None);
			while (dataGridViewColumn != null && (dataGridViewColumn.Frozen || !dataGridViewColumn.Visible))
			{
				if (dataGridViewColumn.Visible)
				{
					if (num5 == -1)
					{
						num5 = dataGridViewColumn.Index;
					}
					num3 += dataGridViewColumn.Width;
					num4++;
					lastDisplayedFrozenCol = dataGridViewColumn.Index;
					if (num3 >= width)
					{
						break;
					}
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.None, DataGridViewElementStates.None);
			}
			if (num3 < width && num6 >= 0)
			{
				dataGridViewColumn = this.Columns[num6];
				if (dataGridViewColumn.Frozen)
				{
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					this.negOffset = 0;
					if (dataGridViewColumn == null)
					{
						this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
						this.displayedBandsInfo.LastDisplayedFrozenCol = lastDisplayedFrozenCol;
						this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
						this.displayedBandsInfo.FirstDisplayedScrollingCol = (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1);
						this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
						return;
					}
					num6 = dataGridViewColumn.Index;
				}
				num3 -= this.negOffset;
				while (num3 < width && dataGridViewColumn != null)
				{
					num3 += dataGridViewColumn.Thickness;
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				num = num2;
				if (num3 < width)
				{
					bool flag = false;
					if (this.negOffset > 0)
					{
						flag = true;
						if (width - num3 > this.negOffset)
						{
							num3 += this.negOffset;
							this.horizontalOffset -= this.negOffset;
							this.negOffset = 0;
						}
						else
						{
							this.horizontalOffset -= width - num3;
							this.negOffset -= width - num3;
							num3 = width;
						}
					}
					if (num3 < width && this.horizontalOffset > 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num6], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && num3 + dataGridViewColumn.Thickness <= width)
						{
							num3 += dataGridViewColumn.Thickness;
							num2++;
							flag = true;
							num6 = dataGridViewColumn.Index;
							this.horizontalOffset -= dataGridViewColumn.Thickness;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
					}
					if (num3 < width && this.horizontalOffset > 0 && num6 != 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num6], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						num6 = dataGridViewColumn.Index;
						this.negOffset = dataGridViewColumn.Thickness - width + num3;
						this.horizontalOffset -= width - num3;
						num2++;
						flag = true;
						num3 = width;
					}
					num = num2;
					if (flag)
					{
						this.InvalidateData();
						base.Invalidate(this.layout.ColumnHeaders);
					}
				}
				int num7 = num - 1;
				if (num3 > width)
				{
					num7--;
				}
				if (num7 < 0)
				{
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				}
				else
				{
					dataGridViewColumn = this.Columns[num6];
					for (int i = 0; i < num7; i++)
					{
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = dataGridViewColumn.Index;
				}
			}
			else
			{
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
			this.displayedBandsInfo.LastDisplayedFrozenCol = lastDisplayedFrozenCol;
			this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
			this.displayedBandsInfo.FirstDisplayedScrollingCol = num6;
			this.displayedBandsInfo.NumDisplayedScrollingCols = num;
		}

		// Token: 0x06001754 RID: 5972 RVA: 0x0005B524 File Offset: 0x00059724
		private void ComputeVisibleRows()
		{
			int num = -1;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int lastDisplayedFrozenRow = -1;
			int lastDisplayedScrollingRow = -1;
			int num3 = 0;
			int height = this.layout.Data.Height;
			int num4 = 0;
			int num5 = 0;
			int count = this.Rows.Count;
			if (height <= 0 || count == 0)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = (this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0)));
				this.displayedBandsInfo.FirstDisplayedFrozenRow = (this.displayedBandsInfo.FirstDisplayedScrollingRow = (this.displayedBandsInfo.LastDisplayedFrozenRow = (this.displayedBandsInfo.LastDisplayedScrollingRow = -1)));
				return;
			}
			int i;
			for (i = 0; i < count; i++)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(i);
				if ((rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					break;
				}
				if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					num4 += this.Rows.SharedRow(i).GetHeight(i);
					if (num == -1)
					{
						num = i;
					}
					lastDisplayedFrozenRow = i;
					if (num4 <= height)
					{
						num3++;
					}
					if (num4 >= height)
					{
						break;
					}
				}
			}
			if (num4 > height)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num3 + 1;
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num3;
			}
			if (num4 < height && i < count)
			{
				if (num2 == -1)
				{
					num2 = i;
				}
				while (num2 < count && ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || (this.Rows.GetRowState(num2) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
				{
					num2++;
				}
				for (int j = num2; j < count; j++)
				{
					if ((this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
					{
						num4 += this.Rows.SharedRow(j).GetHeight(j);
						num5++;
						lastDisplayedScrollingRow = j;
					}
					if (num4 >= height)
					{
						break;
					}
				}
				if (num4 < height)
				{
					for (int k = num2 - 1; k >= num3; k--)
					{
						if ((this.Rows.GetRowState(k) & (DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible)) == DataGridViewElementStates.Visible)
						{
							int height2 = this.Rows.SharedRow(k).GetHeight(k);
							if (num4 + height2 > height)
							{
								break;
							}
							num4 += height2;
							num2 = k;
							num5++;
							lastDisplayedScrollingRow = k;
						}
					}
				}
				this.displayedBandsInfo.NumDisplayedScrollingRows = num5;
				if (num4 > height)
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num5 - 1;
				}
				else
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num5;
				}
				if (num5 == 0)
				{
					num2 = -1;
				}
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0);
				num2 = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenRow = num;
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = num3;
			this.displayedBandsInfo.LastDisplayedFrozenRow = lastDisplayedFrozenRow;
			this.displayedBandsInfo.LastDisplayedScrollingRow = lastDisplayedScrollingRow;
		}

		// Token: 0x06001755 RID: 5973 RVA: 0x0005B800 File Offset: 0x00059A00
		private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y)
		{
			int num;
			if (columnIndex > -1)
			{
				num = this.GetColumnXFromIndex(columnIndex);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[columnIndex].Width;
				}
			}
			else if (this.RightToLeftInternal)
			{
				num = this.layout.RowHeaders.Left - 1;
			}
			else
			{
				num = this.layout.RowHeaders.Left;
			}
			int num2;
			if (rowIndex > -1)
			{
				num2 = this.GetRowYFromIndex(rowIndex);
			}
			else
			{
				num2 = this.layout.ColumnHeaders.Top;
			}
			return new Point(num + x, num2 + y);
		}

		// Token: 0x06001756 RID: 5974 RVA: 0x0005B890 File Offset: 0x00059A90
		private void CorrectColumnDisplayIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2.DisplayIndex > dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex - 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06001757 RID: 5975 RVA: 0x0005B944 File Offset: 0x00059B44
		private void CorrectColumnDisplayIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2 != dataGridViewColumn && dataGridViewColumn2.DisplayIndex >= dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06001758 RID: 5976 RVA: 0x0005B9FC File Offset: 0x00059BFC
		private void CorrectColumnFrozenState(DataGridViewColumn dataGridViewColumn, int anticipatedColumnIndex)
		{
			int num;
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex > this.Columns.Count)
			{
				num = anticipatedColumnIndex;
			}
			else
			{
				num = dataGridViewColumn.DisplayIndex;
			}
			int num2 = num - 1;
			DataGridViewColumn columnAtDisplayIndex;
			do
			{
				columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num2);
				num2--;
			}
			while (num2 >= 0 && (columnAtDisplayIndex == null || !columnAtDisplayIndex.Visible));
			if (columnAtDisplayIndex != null && !columnAtDisplayIndex.Frozen && dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenColumn"));
			}
			num2 = num;
			DataGridViewColumn columnAtDisplayIndex2;
			do
			{
				columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num2);
				num2++;
			}
			while (num2 < this.Columns.Count && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
			if (columnAtDisplayIndex2 != null && columnAtDisplayIndex2.Frozen && !dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenColumn"));
			}
		}

		// Token: 0x06001759 RID: 5977 RVA: 0x0005BAC8 File Offset: 0x00059CC8
		private void CorrectColumnFrozenStates(DataGridViewColumn[] dataGridViewColumns)
		{
			DataGridView dataGridView = new DataGridView();
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
			foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
			{
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn3.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn3.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
		}

		// Token: 0x0600175A RID: 5978 RVA: 0x0005BB8C File Offset: 0x00059D8C
		private void CorrectColumnFrozenStates(DataGridViewColumn dataGridViewColumn, bool frozenStateChanging)
		{
			if ((dataGridViewColumn.Frozen && !frozenStateChanging) || (!dataGridViewColumn.Frozen && frozenStateChanging))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (firstColumn != dataGridViewColumn)
					{
						dataGridViewColumn2 = firstColumn;
					}
				}
				while (dataGridViewColumn2 != null)
				{
					if (!this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewColumn.Index))
					{
						return;
					}
					dataGridViewColumn2.Frozen = true;
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn;
					do
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (dataGridViewColumn2 != null)
						{
							dataGridViewColumn3 = dataGridViewColumn2;
						}
					}
					while (dataGridViewColumn2 != null);
					if (dataGridViewColumn3 != dataGridViewColumn)
					{
						dataGridViewColumn2 = dataGridViewColumn3;
					}
				}
				while (dataGridViewColumn2 != null && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn2.Index))
				{
					dataGridViewColumn2.Frozen = false;
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
		}

		// Token: 0x0600175B RID: 5979 RVA: 0x0005BC7C File Offset: 0x00059E7C
		private void CorrectColumnFrozenStatesForMove(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (!dataGridViewColumn.Visible || (newDisplayIndex < dataGridViewColumn.DisplayIndex && dataGridViewColumn.Frozen) || (newDisplayIndex > dataGridViewColumn.DisplayIndex && !dataGridViewColumn.Frozen))
			{
				return;
			}
			int count = this.Columns.Count;
			if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex;
				do
				{
					columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num);
					num++;
				}
				while (num < count && (columnAtDisplayIndex == null || columnAtDisplayIndex == dataGridViewColumn || !columnAtDisplayIndex.Visible));
				if (columnAtDisplayIndex != null && columnAtDisplayIndex.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveNonFrozenColumn"));
				}
			}
			else
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex2;
				do
				{
					columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num);
					num--;
				}
				while (num >= 0 && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
				if (columnAtDisplayIndex2 != null && !columnAtDisplayIndex2.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveFrozenColumn"));
				}
			}
		}

		// Token: 0x0600175C RID: 5980 RVA: 0x0005BD48 File Offset: 0x00059F48
		private void CorrectColumnIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			for (int i = dataGridViewColumn.Index; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = this.Columns[i].Index - 1;
			}
		}

		// Token: 0x0600175D RID: 5981 RVA: 0x0005BD94 File Offset: 0x00059F94
		private void CorrectColumnIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn, int insertionCount)
		{
			for (int i = dataGridViewColumn.Index + insertionCount; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = i;
			}
		}

		// Token: 0x0600175E RID: 5982 RVA: 0x0005BDD0 File Offset: 0x00059FD0
		private void CorrectFocus(bool onlyIfGridHasFocus)
		{
			if ((!onlyIfGridHasFocus || this.Focused) && this.editingControl != null)
			{
				this.editingControl.FocusInternal();
			}
		}

		// Token: 0x0600175F RID: 5983 RVA: 0x0005BDF4 File Offset: 0x00059FF4
		private void CorrectRowFrozenState(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, int anticipatedRowIndex)
		{
			int previousRow = this.Rows.GetPreviousRow(anticipatedRowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (previousRow != -1 && (this.Rows.GetRowState(previousRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
			}
			int nextRow = this.Rows.GetNextRow((previousRow == -1) ? (anticipatedRowIndex - 1) : previousRow, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (nextRow != -1 && (this.Rows.GetRowState(nextRow) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
			}
		}

		// Token: 0x06001760 RID: 5984 RVA: 0x0005BE7C File Offset: 0x0005A07C
		private void CorrectRowFrozenStates(DataGridViewRow[] dataGridViewRows, int rowIndexInserted)
		{
			bool flag = false;
			bool flag2 = true;
			bool flag3 = false;
			int num = this.Rows.GetPreviousRow(rowIndexInserted, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag2 = ((this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen);
			}
			num = this.Rows.GetNextRow(rowIndexInserted - 1, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag = true;
				flag3 = ((this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen);
			}
			for (int i = 0; i < dataGridViewRows.Length; i++)
			{
				bool frozen = dataGridViewRows[i].Frozen;
				if (!flag2 && frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
				}
				flag2 = frozen;
				if (i == dataGridViewRows.Length - 1 && !frozen && flag && flag3)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
				}
			}
		}

		// Token: 0x06001761 RID: 5985 RVA: 0x0005BF40 File Offset: 0x0005A140
		private void CorrectRowFrozenStates(DataGridViewRow dataGridViewRow, int rowIndex, bool frozenStateChanging)
		{
			if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && !frozenStateChanging) || ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && frozenStateChanging))
			{
				int num = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (num == -1)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (firstRow != rowIndex)
					{
						num = firstRow;
					}
				}
				while (num != -1)
				{
					if (num >= rowIndex)
					{
						return;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				int num = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num == -1)
				{
					int num2 = rowIndex;
					do
					{
						num = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						if (num != -1)
						{
							num2 = num;
						}
					}
					while (num != -1);
					if (num2 != rowIndex)
					{
						num = num2;
					}
				}
				while (num != -1 && num > rowIndex)
				{
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, false);
					num = this.Rows.GetPreviousRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x06001762 RID: 5986 RVA: 0x0005C024 File Offset: 0x0005A224
		private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexDeleted; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index - 1;
				}
			}
			if (this.newRowIndex == rowIndexDeleted)
			{
				this.newRowIndex = -1;
				return;
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex--;
			}
		}

		// Token: 0x06001763 RID: 5987 RVA: 0x0005C098 File Offset: 0x0005A298
		private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexInserted + insertionCount; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index + insertionCount;
				}
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex += insertionCount;
			}
		}

		/// <summary>Creates a new accessible object for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A new <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> for the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x06001764 RID: 5988 RVA: 0x0005C0FA File Offset: 0x0005A2FA
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new DataGridView.DataGridViewAccessibleObject(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.Control.ControlCollection" /> that can be cast to type <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</returns>
		// Token: 0x06001765 RID: 5989 RVA: 0x0005C102 File Offset: 0x0005A302
		protected override Control.ControlCollection CreateControlsInstance()
		{
			return new DataGridView.DataGridViewControlCollection(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</returns>
		// Token: 0x06001766 RID: 5990 RVA: 0x0005C10A File Offset: 0x0005A30A
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewColumnCollection CreateColumnsInstance()
		{
			return new DataGridViewColumnCollection(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</returns>
		// Token: 0x06001767 RID: 5991 RVA: 0x0005C112 File Offset: 0x0005A312
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewRowCollection CreateRowsInstance()
		{
			return new DataGridViewRowCollection(this);
		}

		// Token: 0x06001768 RID: 5992 RVA: 0x0005C11C File Offset: 0x0005A31C
		private NativeMethods.RECT[] CreateScrollableRegion(Rectangle scroll)
		{
			if (this.cachedScrollableRegion != null)
			{
				return this.cachedScrollableRegion;
			}
			using (Region region = new Region(scroll))
			{
				IntPtr intPtr = IntPtr.Zero;
				using (Graphics graphics = base.CreateGraphicsInternal())
				{
					intPtr = region.GetHrgn(graphics);
				}
				if (intPtr != IntPtr.Zero)
				{
					this.cachedScrollableRegion = UnsafeNativeMethods.GetRectsFromRegion(intPtr);
					IntSecurity.ObjectFromWin32Handle.Assert();
					try
					{
						region.ReleaseHrgn(intPtr);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
				}
			}
			return this.cachedScrollableRegion;
		}

		// Token: 0x06001769 RID: 5993 RVA: 0x0005C1CC File Offset: 0x0005A3CC
		private void DiscardNewRow()
		{
			DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[this.newRowIndex]);
			this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
			if (dataGridViewRowCancelEventArgs.Cancel)
			{
				return;
			}
			DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
			this.Rows.RemoveAtInternal(this.newRowIndex, false);
			DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnUserDeletedRow(e);
			if (this.AllowUserToAddRowsInternal)
			{
				this.newRowIndex = this.Rows.Count - 1;
				this.OnDefaultValuesNeeded(new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]));
				this.InvalidateRowPrivate(this.newRowIndex);
			}
		}

		// Token: 0x0600176A RID: 5994 RVA: 0x0005C278 File Offset: 0x0005A478
		private void DiscardZonesInScrollingArea(ref Rectangle rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows)
		{
			rectScrollingArea.Width -= emptyBackgroundWidth;
			rectScrollingArea.Height -= emptyBackgroundHeight;
			if (this.RightToLeftInternal)
			{
				rectScrollingArea.X += emptyBackgroundWidth;
			}
			if (discardFrozenColumns)
			{
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (!this.RightToLeftInternal)
				{
					rectScrollingArea.X += columnsWidth;
				}
				rectScrollingArea.Width -= columnsWidth;
			}
			if (discardFrozenRows)
			{
				rectScrollingArea.Y += frozenVisibleRowsHeight;
				rectScrollingArea.Height -= frozenVisibleRowsHeight;
			}
		}

		/// <summary>Returns the number of columns displayed to the user.</summary>
		/// <param name="includePartialColumns">
		///       <see langword="true" /> to include partial columns in the displayed column count; otherwise, <see langword="false" />. </param>
		/// <returns>The number of columns displayed to the user.</returns>
		// Token: 0x0600176B RID: 5995 RVA: 0x0005C310 File Offset: 0x0005A510
		public int DisplayedColumnCount(bool includePartialColumns)
		{
			int width = this.layout.Data.Width;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && num < width)
			{
				num3++;
				num += dataGridViewColumn.Thickness;
				if (num <= width)
				{
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (num < width && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.negOffset > 0)
				{
					num -= this.negOffset;
					num2--;
				}
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && num < width)
				{
					num3++;
					num += dataGridViewColumn.Thickness;
					if (num <= width)
					{
						num2++;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (!includePartialColumns)
			{
				return num2;
			}
			return num3;
		}

		/// <summary>Returns the number of rows displayed to the user.</summary>
		/// <param name="includePartialRow">
		///       <see langword="true" /> to include partial rows in the displayed row count; otherwise, <see langword="false" />. </param>
		/// <returns>The number of rows displayed to the user.</returns>
		// Token: 0x0600176C RID: 5996 RVA: 0x0005C3ED File Offset: 0x0005A5ED
		public int DisplayedRowCount(bool includePartialRow)
		{
			if (!includePartialRow)
			{
				return this.displayedBandsInfo.NumTotallyDisplayedFrozenRows + this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			return this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
		}

		/// <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</summary>
		/// <param name="disposing">
		///       <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
		// Token: 0x0600176D RID: 5997 RVA: 0x0005C424 File Offset: 0x0005A624
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.dataGridViewOper[1048576] = true;
				try
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						this.Columns[i].Dispose();
					}
					this.Columns.Clear();
					this.UnwireScrollBarsEvents();
					if (this.vertScrollBar != null)
					{
						this.vertScrollBar.Dispose();
						this.vertScrollBar = null;
					}
					if (this.horizScrollBar != null)
					{
						this.horizScrollBar.Dispose();
						this.horizScrollBar = null;
					}
					if (this.pens != null)
					{
						int count = this.pens.Count;
						if (count > 0)
						{
							foreach (object obj in this.pens.Values)
							{
								Pen pen = (Pen)obj;
								pen.Dispose();
							}
							this.pens.Clear();
						}
						this.pens = null;
					}
					if (this.brushes != null)
					{
						int count2 = this.brushes.Count;
						if (count2 > 0)
						{
							foreach (object obj2 in this.brushes.Values)
							{
								SolidBrush solidBrush = (SolidBrush)obj2;
								solidBrush.Dispose();
							}
							this.brushes.Clear();
						}
						this.brushes = null;
					}
					if (this.placeholderStringFormat != null)
					{
						this.placeholderStringFormat.Dispose();
						this.placeholderStringFormat = null;
					}
					if (this.latestEditingControl != null)
					{
						this.latestEditingControl.Dispose();
						this.latestEditingControl = null;
					}
					if (this.editingControl != null)
					{
						this.editingControl.Dispose();
						this.editingControl = null;
					}
					if (this.editingPanel != null)
					{
						this.editingPanel.Dispose();
						this.editingPanel = null;
					}
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
						this.gridPen = null;
					}
					if (this.dataConnection != null)
					{
						this.dataConnection.Dispose();
					}
					this.toolTipControl.Dispose();
				}
				finally
				{
					this.dataGridViewOper[1048576] = false;
				}
			}
			base.Dispose(disposing);
		}

		// Token: 0x0600176E RID: 5998 RVA: 0x0005C6A0 File Offset: 0x0005A8A0
		private void DrawColHeaderShadow(Graphics g, int mouseX)
		{
			Rectangle r = this.CalcColRelocationFeedbackRect(mouseX);
			this.DrawShadowRect(r);
			if (this.dataGridViewState2[1024])
			{
				Rectangle rectangle = new Rectangle(0, this.layout.ColumnHeaders.Top, 3, this.layout.ColumnHeaders.Height);
				if (this.trackColumnEdge == -1)
				{
					rectangle.X = this.GetColumnXFromIndex(this.Columns.GetFirstColumn(DataGridViewElementStates.Visible).Index);
					if (this.RightToLeftInternal)
					{
						rectangle.X -= 3;
					}
				}
				else
				{
					int num = 0;
					if (this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						if (!this.RightToLeftInternal)
						{
							num = 3;
						}
					}
					else if (this.RightToLeftInternal)
					{
						num = 0;
					}
					else
					{
						num = 2;
					}
					if (this.RightToLeftInternal)
					{
						rectangle.X = Math.Max(this.layout.ColumnHeaders.X, this.GetColumnXFromIndex(this.trackColumnEdge) - this.Columns[this.trackColumnEdge].Width - num);
					}
					else
					{
						rectangle.X = Math.Min(this.GetColumnXFromIndex(this.trackColumnEdge) + this.Columns[this.trackColumnEdge].Width - num, this.layout.ColumnHeaders.Right - 3);
					}
				}
				if (this.ApplyVisualStylesToHeaderCells)
				{
					g.FillRectangle(this.GetCachedBrush(SystemColors.HotTrack), rectangle);
					return;
				}
				ControlPaint.FillReversibleRectangle(base.RectangleToScreen(rectangle), Color.White);
			}
		}

		// Token: 0x0600176F RID: 5999 RVA: 0x0005C838 File Offset: 0x0005AA38
		private void DrawColSplitBar(int mouseX)
		{
			Rectangle r = this.CalcColResizeFeedbackRect(mouseX);
			this.DrawSplitBar(r);
		}

		// Token: 0x06001770 RID: 6000 RVA: 0x0005C854 File Offset: 0x0005AA54
		private void DrawRowSplitBar(int mouseY)
		{
			Rectangle r = this.CalcRowResizeFeedbackRect(mouseY);
			this.DrawSplitBar(r);
		}

		// Token: 0x06001771 RID: 6001 RVA: 0x0005C870 File Offset: 0x0005AA70
		private void DrawShadowRect(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr handle2 = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr handle3 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, handle2));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + r.Height - 3, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X + r.Width - 3, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, handle3));
			SafeNativeMethods.DeleteObject(new HandleRef(null, handle2));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06001772 RID: 6002 RVA: 0x0005C9A8 File Offset: 0x0005ABA8
		private void DrawSplitBar(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr handle2 = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr handle3 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, handle2));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, r.Height, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, handle3));
			SafeNativeMethods.DeleteObject(new HandleRef(null, handle2));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06001773 RID: 6003 RVA: 0x0005CA50 File Offset: 0x0005AC50
		private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, DataGridView.DataGridViewMouseEvent dgvme)
		{
			int num = this.editingPanel.Location.X + e.X;
			int num2 = this.editingPanel.Location.Y + e.Y;
			if (sender == this.editingControl)
			{
				num += this.editingControl.Location.X;
				num2 += this.editingControl.Location.Y;
			}
			if (dgvme == DataGridView.DataGridViewMouseEvent.MouseDown && e.Clicks == 1)
			{
				this.dataGridViewOper[4096] = false;
			}
			MouseEventArgs mouseEventArgs = new MouseEventArgs(e.Button, e.Clicks, num, num2, e.Delta);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
			int num3 = mouseEventArgs.X - hitTestInfo.ColumnX;
			if (this.RightToLeftInternal)
			{
				num3 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
			}
			DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
			try
			{
				this.dataGridViewState2[134217728] = true;
				if ((dgvme == DataGridView.DataGridViewMouseEvent.MouseDown || dgvme == DataGridView.DataGridViewMouseEvent.Click || dgvme == DataGridView.DataGridViewMouseEvent.MouseClick) && (DateTime.Now.Ticks - this.lastMouseClickInfo.timeStamp) / 10000L <= (long)SystemInformation.DoubleClickTime && e.Button == this.lastMouseClickInfo.button && e.Clicks == 1 && dataGridViewCellMouseEventArgs.ColumnIndex == this.lastMouseClickInfo.col && dataGridViewCellMouseEventArgs.RowIndex == this.lastMouseClickInfo.row)
				{
					Size doubleClickSize = SystemInformation.DoubleClickSize;
					if (Math.Abs(dataGridViewCellMouseEventArgs.X - this.lastMouseClickInfo.x) <= doubleClickSize.Width / 2 && Math.Abs(dataGridViewCellMouseEventArgs.Y - this.lastMouseClickInfo.y) <= doubleClickSize.Height / 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, mouseEventArgs);
						switch (dgvme)
						{
						case DataGridView.DataGridViewMouseEvent.Click:
							this.OnDoubleClick(mouseEventArgs);
							if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseClick:
							this.dataGridViewOper[4096] = true;
							this.OnMouseDoubleClick(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseDown:
							this.OnMouseDown(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
							}
							break;
						}
						return;
					}
				}
				if (this.dataGridViewOper[4096])
				{
					if (e.Clicks == 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 1, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
					}
					if (dgvme != DataGridView.DataGridViewMouseEvent.DoubleClick)
					{
						if (dgvme == DataGridView.DataGridViewMouseEvent.MouseDoubleClick)
						{
							dgvme = DataGridView.DataGridViewMouseEvent.MouseClick;
						}
					}
					else
					{
						dgvme = DataGridView.DataGridViewMouseEvent.Click;
					}
				}
				switch (dgvme)
				{
				case DataGridView.DataGridViewMouseEvent.Click:
					this.OnClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.DoubleClick:
					this.OnDoubleClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseClick:
					this.OnMouseClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDoubleClick:
					this.OnMouseDoubleClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDown:
					this.OnMouseDown(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseUp:
					if (this.dataGridViewState2[8388608])
					{
						MouseEventArgs e2 = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, e2);
					}
					this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
					this.OnMouseUp(mouseEventArgs);
					break;
				case DataGridView.DataGridViewMouseEvent.MouseMove:
					this.OnCellMouseMove(dataGridViewCellMouseEventArgs);
					break;
				}
			}
			finally
			{
				this.dataGridViewState2[134217728] = false;
			}
		}

		// Token: 0x06001774 RID: 6004 RVA: 0x0005D054 File Offset: 0x0005B254
		private void EditingControls_Click(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.Click);
			}
		}

		// Token: 0x06001775 RID: 6005 RVA: 0x0005D074 File Offset: 0x0005B274
		private void EditingControls_DoubleClick(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.DoubleClick);
			}
		}

		// Token: 0x06001776 RID: 6006 RVA: 0x0005D094 File Offset: 0x0005B294
		private void EditingControls_MouseClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseClick);
		}

		// Token: 0x06001777 RID: 6007 RVA: 0x0005D09F File Offset: 0x0005B29F
		private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDoubleClick);
		}

		// Token: 0x06001778 RID: 6008 RVA: 0x0005D0AA File Offset: 0x0005B2AA
		private void EditingControls_MouseDown(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDown);
		}

		// Token: 0x06001779 RID: 6009 RVA: 0x0005D0B8 File Offset: 0x0005B2B8
		private void EditingControls_MouseEnter(object sender, EventArgs e)
		{
			if (sender == this.editingPanel)
			{
				this.dataGridViewState1[16777216] = true;
				this.oldCursor = this.Cursor;
				this.CursorInternal = ((IDataGridViewEditingControl)this.editingControl).EditingPanelCursor;
			}
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x0600177A RID: 6010 RVA: 0x0005D124 File Offset: 0x0005B324
		private void EditingControls_MouseLeave(object sender, EventArgs e)
		{
			if (sender == this.editingPanel && this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			this.UpdateMouseEnteredCell(null, null);
			Point pt = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(pt))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x0600177B RID: 6011 RVA: 0x0005D199 File Offset: 0x0005B399
		private void EditingControls_MouseMove(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseMove);
		}

		// Token: 0x0600177C RID: 6012 RVA: 0x0005D1A4 File Offset: 0x0005B3A4
		private void EditingControls_MouseUp(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseUp);
		}

		// Token: 0x0600177D RID: 6013 RVA: 0x0005D1B0 File Offset: 0x0005B3B0
		private void EndColumnHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				int num = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num2 = num - this.layout.ColumnHeaders.Y - this.ColumnHeadersHeight + 1;
				if (this.trackRowAnchor != num && num2 != 0)
				{
					this.ColumnHeadersHeight += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x0600177E RID: 6014 RVA: 0x0005D260 File Offset: 0x0005B460
		private void EndColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			try
			{
				if (this.lastHeaderShadow != -1)
				{
					this.dataGridViewState2[1024] = false;
					this.trackColumnEdge = -1;
					this.lastHeaderShadow = -1;
					base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				}
				int num;
				if (this.ColumnRelocationTarget(e, hti, out num))
				{
					if (num == -1)
					{
						this.Columns[this.trackColumn].DisplayIndex = 0;
					}
					else if (this.Columns[this.trackColumn].DisplayIndex > this.Columns[num].DisplayIndex)
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex + 1;
					}
					else
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x0600177F RID: 6015 RVA: 0x0005D37C File Offset: 0x0005B57C
		private void EndColumnResize(MouseEventArgs e)
		{
			try
			{
				this.EndColumnResize(e.X);
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001780 RID: 6016 RVA: 0x0005D3B0 File Offset: 0x0005B5B0
		private void EndColumnResize(int x)
		{
			int num;
			int num2;
			if (this.RightToLeftInternal)
			{
				num = Math.Max(x + this.mouseBarOffset, this.layout.Data.X);
				num2 = this.GetColumnXFromIndex(this.trackColumn) - this.Columns[this.trackColumn].Thickness - num + 1;
			}
			else
			{
				num = Math.Min(x + this.mouseBarOffset, this.layout.Data.Right - 1);
				num2 = num - (this.GetColumnXFromIndex(this.trackColumn) + this.Columns[this.trackColumn].Thickness) + 1;
			}
			if (this.trackColAnchor != num && num2 != 0)
			{
				int thickness = this.Columns[this.trackColumn].Thickness + num2;
				this.Columns[this.trackColumn].Thickness = thickness;
			}
		}

		/// <summary>Commits and ends the edit operation on the current cell using the default error context.</summary>
		/// <returns>
		///     <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x06001781 RID: 6017 RVA: 0x0005D491 File Offset: 0x0005B691
		public bool EndEdit()
		{
			return this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit);
		}

		/// <summary>Commits and ends the edit operation on the current cell using the specified error context.</summary>
		/// <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur. </param>
		/// <returns>
		///     <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x06001782 RID: 6018 RVA: 0x0005D4A0 File Offset: 0x0005B6A0
		public bool EndEdit(DataGridViewDataErrorContexts context)
		{
			if (this.EditMode == DataGridViewEditMode.EditOnEnter)
			{
				return this.CommitEdit(context);
			}
			return this.EndEdit(context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
		}

		// Token: 0x06001783 RID: 6019 RVA: 0x0005D4D0 File Offset: 0x0005B6D0
		private bool EndEdit(DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell)
		{
			if (this.ptCurrentCell.X == -1)
			{
				return true;
			}
			this.dataGridViewOper[4194304] = true;
			bool result;
			try
			{
				int y = this.ptCurrentCell.Y;
				int x = this.ptCurrentCell.X;
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, validateCell, fireCellLeave, fireCellEnter, fireRowLeave, fireRowEnter, fireLeave);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
					dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
					if (dataGridViewDataErrorEventArgs != null)
					{
						if (dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
						if (dataGridViewDataErrorEventArgs.Cancel)
						{
							return false;
						}
					}
				}
				if (!this.IsCurrentCellInEditMode)
				{
					result = true;
				}
				else if (y != this.ptCurrentCell.Y || x != this.ptCurrentCell.X)
				{
					result = true;
				}
				else
				{
					if (this.editingControl != null)
					{
						this.UnwireEditingControlEvents();
						this.dataGridViewState2[8] = this.MouseOverEditingControl;
						this.dataGridViewState2[16] = this.MouseOverEditingPanel;
						this.dataGridViewState1[16384] = true;
						try
						{
							currentCellInternal.DetachEditingControl();
						}
						finally
						{
							this.dataGridViewState1[16384] = false;
						}
						ImeMode cachedImeMode = this.editingControl.CachedImeMode;
						this.latestEditingControl = this.editingControl;
						this.editingControl = null;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						if (this.EditMode == DataGridViewEditMode.EditOnEnter && resetCurrentCell)
						{
							bool flag = this.SetCurrentCellAddressCore(-1, -1, resetAnchorCell, false, false);
						}
						if (keepFocus)
						{
							this.FocusInternal();
						}
						base.ImeMode = cachedImeMode;
					}
					else
					{
						this.dataGridViewState1[32768] = false;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
					if (!this.IsInnerCellOutOfBounds(x, y))
					{
						DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(x, y);
						this.OnCellEndEdit(e);
					}
					result = true;
				}
			}
			finally
			{
				this.dataGridViewOper[4194304] = false;
			}
			return result;
		}

		// Token: 0x06001784 RID: 6020 RVA: 0x0005D714 File Offset: 0x0005B914
		private void EndRowHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentColSplitBar != -1)
				{
					base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
					this.lastColSplitBar = (this.currentColSplitBar = -1);
				}
				int num;
				int num2;
				if (this.RightToLeftInternal)
				{
					num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.Left - 1);
					num2 = this.layout.RowHeaders.Right - this.RowHeadersWidth - num - 1;
				}
				else
				{
					num = Math.Min(e.X + this.mouseBarOffset, this.layout.Data.Right - 1);
					num2 = num - this.layout.RowHeaders.X - this.RowHeadersWidth + 1;
				}
				if (this.trackColAnchor != num && num2 != 0)
				{
					this.RowHeadersWidth += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001785 RID: 6021 RVA: 0x0005D80C File Offset: 0x0005BA0C
		private void EndRowResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.trackRow);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(this.trackRow, out num, out num2);
				int num3 = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num4 = num3 - (this.GetRowYFromIndex(this.trackRow) + num) + 1;
				if (this.trackRowAnchor != num3 && num4 != 0)
				{
					int num5 = num + num4;
					num5 = Math.Max(num5, num2);
					if (!this.OnRowHeightInfoPushed(this.trackRow, num5, num2))
					{
						if (dataGridViewRow.Index == -1)
						{
							dataGridViewRow = this.Rows[this.trackRow];
						}
						dataGridViewRow.ThicknessInternal = num5;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001786 RID: 6022 RVA: 0x0005D90C File Offset: 0x0005BB0C
		private void ExitBulkLayout(bool invalidInAdjustFillingColumns)
		{
			if (this.inBulkLayoutCount > 0)
			{
				this.inBulkLayoutCount--;
				if (this.inBulkLayoutCount == 0)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
				}
			}
		}

		// Token: 0x06001787 RID: 6023 RVA: 0x0005D937 File Offset: 0x0005BB37
		private void ExitBulkPaint(int columnIndex, int rowIndex)
		{
			if (this.inBulkPaintCount > 0)
			{
				this.inBulkPaintCount--;
				if (this.inBulkPaintCount == 0)
				{
					if (columnIndex >= 0)
					{
						this.InvalidateColumnInternal(columnIndex);
						return;
					}
					if (rowIndex >= 0)
					{
						this.InvalidateRowPrivate(rowIndex);
						return;
					}
					base.Invalidate();
				}
			}
		}

		// Token: 0x06001788 RID: 6024 RVA: 0x0005D978 File Offset: 0x0005BB78
		private void FirstVisibleScrollingRowTempted(int rowIndex)
		{
			int height = this.layout.Data.Height;
			if (height <= 0)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (rowsHeight < height)
			{
				this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
			}
		}

		// Token: 0x06001789 RID: 6025 RVA: 0x0005D9BC File Offset: 0x0005BBBC
		private void FlushDisplayedChanged()
		{
			if (this.displayedBandsInfo.Dirty && base.Visible)
			{
				if (!this.RowHeadersVisible && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateRowsDisplayedState(false);
				}
				else
				{
					int num = Screen.FromControl(this).WorkingArea.Height / 2;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (num2 != -1)
					{
						for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
						{
							if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
							{
								this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
							}
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
						int num3 = num2;
						num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						num2 = num3;
					}
					else
					{
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					int j = this.displayedBandsInfo.NumDisplayedFrozenRows;
					num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (j > 0)
					{
						if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						j--;
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					int lastDisplayedFrozenRowIndex = -1;
					int lastDisplayedScrollingRowIndex = -1;
					if (this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (this.displayedBandsInfo.NumDisplayedFrozenRows > 1)
						{
							lastDisplayedFrozenRowIndex = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedFrozenRows - 2);
						}
						else
						{
							lastDisplayedFrozenRowIndex = firstRow;
						}
					}
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow != -1)
					{
						if (this.displayedBandsInfo.NumDisplayedScrollingRows > 1)
						{
							lastDisplayedScrollingRowIndex = this.Rows.GetNextRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedScrollingRows - 2);
						}
						else
						{
							lastDisplayedScrollingRowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						}
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					while (num2 != -1 && num2 < this.displayedBandsInfo.FirstDisplayedScrollingRow && !this.RowNeedsDisplayedState(num2, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex) && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					if (num2 != -1 && num2 < this.Rows.Count && (this.displayedBandsInfo.FirstDisplayedScrollingRow == -1 || this.displayedBandsInfo.FirstDisplayedScrollingRow < num2) && !this.RowNeedsDisplayedState(num2, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex))
					{
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (this.displayedBandsInfo.RowInsertionOccurred)
					{
						num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedScrollingRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
							}
							int num4 = 0;
							while (num2 != -1 && num4 <= num && !this.RowNeedsDisplayedState(num2, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num4++;
							}
						}
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedFrozenRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							}
							int num5 = 0;
							while (num2 != -1 && num5 <= num && !this.RowNeedsDisplayedState(num2, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num5++;
							}
						}
					}
				}
				if (!this.ColumnHeadersVisible && this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateColumnsDisplayedState(false);
				}
				else
				{
					int num6 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					DataGridViewColumn dataGridViewColumn;
					if (num6 != -1)
					{
						int k = this.displayedBandsInfo.NumDisplayedScrollingCols;
						dataGridViewColumn = this.Columns[num6];
						while (k > 0)
						{
							if (!dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = true;
							}
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							k--;
						}
						DataGridViewColumn dataGridViewColumn2 = dataGridViewColumn;
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						dataGridViewColumn = dataGridViewColumn2;
					}
					else
					{
						dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					int l = this.displayedBandsInfo.NumDisplayedFrozenCols;
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (l > 0)
					{
						if (!dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = true;
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						l--;
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					num6 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					while (num6 != -1 && num6 < this.Columns.Count && this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && num6 != this.displayedBandsInfo.FirstDisplayedScrollingCol && this.Columns.DisplayInOrder(num6, this.displayedBandsInfo.FirstDisplayedScrollingCol) && !this.ColumnNeedsDisplayedState(this.Columns[num6]))
					{
						dataGridViewColumn = this.Columns[num6];
						if (!dataGridViewColumn.Displayed)
						{
							break;
						}
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num6 = ((dataGridViewColumn == null) ? -1 : dataGridViewColumn.Index);
					}
					num6 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					if (num6 != -1 && num6 < this.Columns.Count && (this.displayedBandsInfo.FirstDisplayedScrollingCol == -1 || (this.displayedBandsInfo.FirstDisplayedScrollingCol != num6 && this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, num6))) && !this.ColumnNeedsDisplayedState(this.Columns[num6]))
					{
						dataGridViewColumn = this.Columns[num6];
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
					if (this.displayedBandsInfo.ColumnInsertionOccurred)
					{
						dataGridViewColumn = this.Columns[this.Columns.Count - 1];
						while (dataGridViewColumn != null && !this.ColumnNeedsDisplayedState(dataGridViewColumn))
						{
							if (dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = false;
							}
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
				}
				this.displayedBandsInfo.Dirty = false;
			}
		}

		// Token: 0x0600178A RID: 6026 RVA: 0x0005E18C File Offset: 0x0005C38C
		private void FlushDisplayIndexChanged(bool raiseEvent)
		{
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.DisplayIndexHasChanged)
				{
					dataGridViewColumn.DisplayIndexHasChanged = false;
					if (raiseEvent)
					{
						this.OnColumnDisplayIndexChanged(dataGridViewColumn);
					}
				}
			}
		}

		// Token: 0x0600178B RID: 6027 RVA: 0x0005E1F8 File Offset: 0x0005C3F8
		private void FlushSelectionChanged()
		{
			if (this.dataGridViewState2[262144])
			{
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		/// <summary>Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</summary>
		/// <param name="objectId">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</param>
		/// <returns>The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</returns>
		// Token: 0x0600178C RID: 6028 RVA: 0x0005E217 File Offset: 0x0005C417
		protected override AccessibleObject GetAccessibilityObjectById(int objectId)
		{
			return base.AccessibilityObject.GetChild(objectId - 1);
		}

		// Token: 0x0600178D RID: 6029 RVA: 0x0005E228 File Offset: 0x0005C428
		internal SolidBrush GetCachedBrush(Color color)
		{
			SolidBrush solidBrush = (SolidBrush)this.brushes[color];
			if (solidBrush == null)
			{
				solidBrush = new SolidBrush(color);
				this.brushes.Add(color, solidBrush);
			}
			return solidBrush;
		}

		// Token: 0x0600178E RID: 6030 RVA: 0x0005E26C File Offset: 0x0005C46C
		internal Pen GetCachedPen(Color color)
		{
			Pen pen = (Pen)this.pens[color];
			if (pen == null)
			{
				pen = new Pen(color);
				this.pens.Add(color, pen);
			}
			return pen;
		}

		// Token: 0x0600178F RID: 6031 RVA: 0x0005E2B0 File Offset: 0x0005C4B0
		internal TypeConverter GetCachedTypeConverter(Type type)
		{
			if (this.converters.ContainsKey(type))
			{
				return (TypeConverter)this.converters[type];
			}
			TypeConverter converter = TypeDescriptor.GetConverter(type);
			this.converters.Add(type, converter);
			return converter;
		}

		// Token: 0x06001790 RID: 6032 RVA: 0x0005E2F4 File Offset: 0x0005C4F4
		internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle cellDisplayRectangle = this.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
			if (!cellDisplayRectangle.IsEmpty)
			{
				if (this.SingleVerticalBorderAdded && columnIndex == this.FirstDisplayedColumnIndex)
				{
					int num;
					if (!this.RightToLeftInternal)
					{
						num = cellDisplayRectangle.X;
						cellDisplayRectangle.X = num - 1;
					}
					num = cellDisplayRectangle.Width;
					cellDisplayRectangle.Width = num + 1;
				}
				if (this.SingleHorizontalBorderAdded && rowIndex == this.FirstDisplayedRowIndex)
				{
					int num = cellDisplayRectangle.Y;
					cellDisplayRectangle.Y = num - 1;
					num = cellDisplayRectangle.Height;
					cellDisplayRectangle.Height = num + 1;
				}
			}
			return cellDisplayRectangle;
		}

		/// <summary>Gets the number of cells that satisfy the provided filter.</summary>
		/// <param name="includeFilter">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values specifying the cells to count.</param>
		/// <returns>The number of cells that match the <paramref name="includeFilter" /> parameter.</returns>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="includeFilter" /> includes the value <see cref="F:System.Windows.Forms.DataGridViewElementStates.ResizableSet" />.</exception>
		// Token: 0x06001791 RID: 6033 RVA: 0x0005E384 File Offset: 0x0005C584
		public int GetCellCount(DataGridViewElementStates includeFilter)
		{
			if ((includeFilter & ~(DataGridViewElementStates.Displayed | DataGridViewElementStates.Frozen | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.Resizable | DataGridViewElementStates.Selected | DataGridViewElementStates.Visible)) != DataGridViewElementStates.None)
			{
				throw new ArgumentException(SR.GetString("DataGridView_InvalidDataGridViewElementStateCombination", new object[]
				{
					"includeFilter"
				}));
			}
			int num = 0;
			bool displayedRequired;
			bool frozenRequired;
			bool resizableRequired;
			bool readOnlyRequired;
			bool flag;
			if ((includeFilter & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (includeFilter == DataGridViewElementStates.Selected)
				{
					num = this.individualSelectedCells.Count;
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
						return num;
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Columns.Count;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Rows.Count;
					}
				}
				displayedRequired = ((includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed);
				frozenRequired = ((includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen);
				resizableRequired = ((includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable);
				readOnlyRequired = ((includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly);
				flag = ((includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible);
				foreach (object obj in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (this.GetCellCount_CellIncluded(dataGridViewCell, dataGridViewCell.RowIndex, displayedRequired, frozenRequired, resizableRequired, readOnlyRequired, flag))
					{
						num++;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					return num;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj2 in ((IEnumerable)this.selectedBandIndexes))
					{
						int rowIndex = (int)obj2;
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
						foreach (object obj3 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj3;
							if (this.GetCellCount_CellIncluded(dataGridViewCell2, rowIndex, displayedRequired, frozenRequired, resizableRequired, readOnlyRequired, flag))
							{
								num++;
							}
						}
					}
					return num;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						foreach (object obj4 in ((IEnumerable)this.selectedBandIndexes))
						{
							int index = (int)obj4;
							DataGridViewCell dataGridViewCell3 = dataGridViewRow2.Cells[index];
							if (this.GetCellCount_CellIncluded(dataGridViewCell3, i, displayedRequired, frozenRequired, resizableRequired, readOnlyRequired, flag))
							{
								num++;
							}
						}
					}
					return num;
				}
			}
			if ((includeFilter == DataGridViewElementStates.ReadOnly && this.ReadOnly) || includeFilter == DataGridViewElementStates.None)
			{
				return this.Rows.Count * this.Columns.Count;
			}
			displayedRequired = ((includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed);
			frozenRequired = ((includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen);
			resizableRequired = ((includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable);
			readOnlyRequired = ((includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly);
			flag = ((includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible);
			for (int j = 0; j < this.Rows.Count; j++)
			{
				DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
				if (!flag || (this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					foreach (object obj5 in dataGridViewRow3.Cells)
					{
						DataGridViewCell dataGridViewCell4 = (DataGridViewCell)obj5;
						if (this.GetCellCount_CellIncluded(dataGridViewCell4, j, displayedRequired, frozenRequired, resizableRequired, readOnlyRequired, flag))
						{
							num++;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06001792 RID: 6034 RVA: 0x0005E738 File Offset: 0x0005C938
		private bool GetCellCount_CellIncluded(DataGridViewCell dataGridViewCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (!displayedRequired || ((rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Displayed)) && (!frozenRequired || (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.Frozen || dataGridViewCell.StateIncludes(DataGridViewElementStates.Frozen)) && (!resizableRequired || this.RowIsResizable(rowIndex) || dataGridViewCell.OwningColumn.Resizable == DataGridViewTriState.True) && (!readOnlyRequired || this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.ReadOnly || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly)) && (!visibleRequired || ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Visible));
		}

		/// <summary>Returns the rectangle that represents the display area for a cell.</summary>
		/// <param name="columnIndex">The column index for the desired cell. </param>
		/// <param name="rowIndex">The row index for the desired cell. </param>
		/// <param name="cutOverflow">
		///       <see langword="true" /> to return the displayed portion of the cell only; <see langword="false" /> to return the entire cell bounds. </param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the cell.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.-or-
		///         <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1. </exception>
		// Token: 0x06001793 RID: 6035 RVA: 0x0005E800 File Offset: 0x0005CA00
		public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle rect;
			if (columnIndex >= 0)
			{
				if (columnIndex >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				rect = this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
			}
			else
			{
				if (columnIndex != -1)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				if (rowIndex >= 0)
				{
					rect = this.layout.RowHeaders;
				}
				else
				{
					rect = this.layout.TopLeftHeader;
				}
			}
			Rectangle result;
			if (rowIndex >= 0)
			{
				if (rowIndex >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				result = this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
			}
			else
			{
				if (rowIndex != -1)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				if (columnIndex >= 0)
				{
					result = this.layout.ColumnHeaders;
				}
				else
				{
					result = this.layout.TopLeftHeader;
				}
			}
			if (!cutOverflow)
			{
				int num = result.Bottom - rect.Bottom;
				if (num > 0)
				{
					rect.Height += num;
				}
				if (this.RightToLeftInternal)
				{
					int num2 = result.X - rect.X;
					if (num2 > 0)
					{
						result.Width += num2;
						result.X -= num2;
					}
				}
				else
				{
					int num2 = rect.Right - result.Right;
					if (num2 > 0)
					{
						result.Width += num2;
					}
				}
			}
			result.Intersect(rect);
			return result;
		}

		// Token: 0x06001794 RID: 6036 RVA: 0x0005E948 File Offset: 0x0005CB48
		internal DataGridViewCell GetCellInternal(int columnIndex, int rowIndex)
		{
			if (rowIndex >= 0)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				if (columnIndex >= 0)
				{
					return dataGridViewRow.Cells[columnIndex];
				}
				return dataGridViewRow.HeaderCell;
			}
			else
			{
				if (columnIndex >= 0)
				{
					return this.Columns[columnIndex].HeaderCell;
				}
				return this.TopLeftHeaderCell;
			}
		}

		/// <summary>Retrieves the formatted values that represent the contents of the selected cells for copying to the <see cref="T:System.Windows.Forms.Clipboard" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataObject" /> that represents the contents of the selected cells.</returns>
		/// <exception cref="T:System.NotSupportedException">
		///         <see cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" /> is set to <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.Disable" />.</exception>
		// Token: 0x06001795 RID: 6037 RVA: 0x0005E99C File Offset: 0x0005CB9C
		public virtual DataObject GetClipboardContent()
		{
			if (this.ClipboardCopyMode == DataGridViewClipboardCopyMode.Disable)
			{
				throw new NotSupportedException(SR.GetString("DataGridView_DisabledClipboardCopy"));
			}
			if (this.CurrentCellIsEditedAndOnlySelectedCell)
			{
				return null;
			}
			string[] array = new string[]
			{
				DataFormats.Html,
				DataFormats.Text,
				DataFormats.UnicodeText,
				DataFormats.CommaSeparatedValue
			};
			DataObject dataObject = new DataObject();
			bool flag = false;
			bool flag2 = false;
			StringBuilder stringBuilder = null;
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					flag5 = (this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0);
					flag3 = (flag5 && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) != 0);
				}
				else if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					flag4 = (this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0);
					flag3 = (flag4 && this.Rows.GetRowCount(DataGridViewElementStates.Visible) != 0);
				}
				if (!flag3 && this.individualSelectedCells.Count > 0)
				{
					foreach (object obj in ((IEnumerable)this.individualSelectedCells))
					{
						DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
						if (dataGridViewCell.Visible)
						{
							flag3 = true;
							break;
						}
					}
				}
				if (!flag3)
				{
					return null;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.CellSelect)
				{
					flag2 = (flag = (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText));
					flag &= this.ColumnHeadersVisible;
					flag2 &= this.RowHeadersVisible;
				}
				else
				{
					flag2 = (flag = false);
					if (this.ColumnHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag4)
							{
								flag = true;
							}
						}
						else
						{
							flag = (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
						}
					}
					if (this.RowHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag5)
							{
								flag2 = true;
							}
						}
						else
						{
							flag2 = (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
						}
					}
				}
				int num = int.MaxValue;
				int num2 = -1;
				DataGridViewColumn dataGridViewColumn = null;
				DataGridViewColumn dataGridViewColumn2 = null;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					using (IEnumerator enumerator2 = ((IEnumerable)this.selectedBandIndexes).GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							int num3 = (int)obj2;
							if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
							{
								if (num3 < num)
								{
									num = num3;
								}
								if (num3 > num2)
								{
									num2 = num3;
								}
								dataGridViewColumn = firstColumn;
								dataGridViewColumn2 = lastColumn;
							}
						}
						goto IL_E26;
					}
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num4 = (int)obj3;
						if (this.Columns[num4].Visible)
						{
							if (dataGridViewColumn == null || this.Columns.DisplayInOrder(num4, dataGridViewColumn.Index))
							{
								dataGridViewColumn = this.Columns[num4];
							}
							if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, num4))
							{
								dataGridViewColumn2 = this.Columns[num4];
							}
							num = firstRow;
							num2 = lastRow;
						}
					}
				}
				IL_E26:
				foreach (object obj4 in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj4;
					if (dataGridViewCell2.Visible)
					{
						if (dataGridViewCell2.RowIndex < num)
						{
							num = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewCell2.RowIndex > num2)
						{
							num2 = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewColumn == null || this.Columns.DisplayInOrder(dataGridViewCell2.ColumnIndex, dataGridViewColumn.Index))
						{
							dataGridViewColumn = dataGridViewCell2.OwningColumn;
						}
						if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewCell2.ColumnIndex))
						{
							dataGridViewColumn2 = dataGridViewCell2.OwningColumn;
						}
					}
				}
				foreach (string text in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, false, true, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, false, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
					}
					bool flag6 = true;
					int num5 = num;
					while (num5 != -1)
					{
						int num6;
						if (num5 != num2)
						{
							num6 = this.Rows.GetNextRow(num5, DataGridViewElementStates.Visible);
						}
						else
						{
							num6 = -1;
						}
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = this.Rows.SharedRow(num5).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num5, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, !flag && flag6, num6 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num5).HeaderCell.GetClipboardContentInternal(num5, false, true, !flag && flag6, num6 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num5).HeaderCell.GetClipboardContentInternal(num5, true, false, !flag && flag6, num6 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = this.Rows.SharedRow(num5).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num5, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, !flag && flag6, num6 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						num5 = num6;
						flag6 = false;
					}
					if (string.Equals(text, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream data = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out data);
						dataObject.SetData(text, false, data);
					}
					else
					{
						dataObject.SetData(text, false, stringBuilder.ToString());
					}
				}
				break;
			}
			case DataGridViewSelectionMode.FullRowSelect:
				if (this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = (this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == -1);
					flag2 = true;
				}
				else
				{
					flag2 = (flag = (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText));
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				foreach (string text3 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, false, text3) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag7 = true;
					int num7 = this.Rows.GetFirstRow(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					int nextRow = this.Rows.GetNextRow(num7, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					while (num7 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num7).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num7, true, !flag2 && dataGridViewColumn4 == null, !flag && flag7, nextRow == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (this.Rows.SharedRow(num7).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num7, false, !flag2 && dataGridViewColumn4 == null, !flag && flag7, nextRow == -1, text3) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num7).HeaderCell.GetClipboardContentInternal(num7, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, !flag && flag7, nextRow == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num7).HeaderCell.GetClipboardContentInternal(num7, true, dataGridViewColumn3 == null, !flag && flag7, nextRow == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num7).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num7, !flag2, dataGridViewColumn5 == null, !flag && flag7, nextRow == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (this.Rows.SharedRow(num7).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num7, false, dataGridViewColumn5 == null, !flag && flag7, nextRow == -1, text3) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num7 = nextRow;
						if (num7 != -1)
						{
							nextRow = this.Rows.GetNextRow(num7, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
						}
						flag7 = false;
					}
					if (string.Equals(text3, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream data2 = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out data2);
						dataObject.SetData(text3, false, data2);
					}
					else
					{
						dataObject.SetData(text3, false, stringBuilder.ToString());
					}
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			{
				if (this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = true;
					flag2 = (this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == null);
				}
				else
				{
					flag2 = (flag = (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText));
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				foreach (string text4 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn2 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn2;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, firstRow == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, firstRow == -1, text4) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, lastColumn2 == null, true, true, firstRow == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, dataGridViewColumn3 == null, true, firstRow == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, firstRow == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, firstRow == -1, text4) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag8 = true;
					int num8 = firstRow;
					int num9 = -1;
					if (num8 != -1)
					{
						num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Visible);
					}
					while (num8 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn3;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, true, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num9 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num9 == -1, text4) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, lastColumn3 == null, true, !flag && flag8, num9 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, true, dataGridViewColumn3 == null, !flag && flag8, num9 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, !flag2, dataGridViewColumn5 == null, !flag && flag8, num9 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = (this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, dataGridViewColumn5 == null, !flag && flag8, num9 == -1, text4) as string);
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num8 = num9;
						if (num8 != -1)
						{
							num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Visible);
						}
						flag8 = false;
					}
					if (string.Equals(text4, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream data3 = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out data3);
						dataObject.SetData(text4, false, data3);
					}
					else
					{
						dataObject.SetData(text4, false, stringBuilder.ToString());
					}
				}
				break;
			}
			}
			return dataObject;
		}

		// Token: 0x06001796 RID: 6038 RVA: 0x0005FC4C File Offset: 0x0005DE4C
		private static void GetClipboardContentForHtml(StringBuilder sbContent, out MemoryStream utf8Stream)
		{
			byte[] bytes = Encoding.Unicode.GetBytes(sbContent.ToString());
			byte[] array = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, bytes);
			int num = 135 + array.Length;
			int num2 = num + 36;
			string value = string.Format(CultureInfo.InvariantCulture, "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n", new object[]
			{
				num2.ToString("00000000", CultureInfo.InvariantCulture),
				num.ToString("00000000", CultureInfo.InvariantCulture)
			}) + "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
			sbContent.Insert(0, value);
			sbContent.Append("\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>");
			bytes = Encoding.Unicode.GetBytes(sbContent.ToString());
			array = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, bytes);
			utf8Stream = new MemoryStream(num2 + 1);
			utf8Stream.Write(array, 0, num2);
			utf8Stream.WriteByte(0);
		}

		/// <summary>Returns the rectangle that represents the display area for a column, as determined by the column index.</summary>
		/// <param name="columnIndex">The column index for the desired cell. </param>
		/// <param name="cutOverflow">
		///       <see langword="true" /> to return the column rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire column rectangle. </param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the column.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		// Token: 0x06001797 RID: 6039 RVA: 0x0005FD27 File Offset: 0x0005DF27
		public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			return this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
		}

		// Token: 0x06001798 RID: 6040 RVA: 0x0005FD50 File Offset: 0x0005DF50
		private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow)
		{
			if (!this.Columns[columnIndex].Displayed)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			bool flag = false;
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
			{
				if (dataGridViewColumn.Index == columnIndex)
				{
					flag = true;
				}
				else
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
				{
					if (dataGridViewColumn.Index == columnIndex)
					{
						flag = true;
					}
					else
					{
						if (this.RightToLeftInternal)
						{
							num -= dataGridViewColumn.Thickness;
						}
						else
						{
							num += dataGridViewColumn.Thickness;
						}
						if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
						{
							if (this.RightToLeftInternal)
							{
								num += this.negOffset;
							}
							else
							{
								num -= this.negOffset;
							}
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (flag)
			{
				int num2 = dataGridViewColumn.Thickness;
				if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					num2 -= this.negOffset;
				}
				int num3;
				if (cutOverflow && ((!this.RightToLeftInternal && num + num2 > data.Right) || (this.RightToLeftInternal && num - num2 < data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num3 = num - data.X;
					}
					else
					{
						num3 = data.Right - num;
					}
				}
				else
				{
					num3 = num2;
				}
				Rectangle result;
				if (this.RightToLeftInternal)
				{
					result = new Rectangle(num - num3, data.Y, num3, data.Height);
				}
				else
				{
					result = new Rectangle(num, data.Y, num3, data.Height);
				}
				if (this.layout.ColumnHeadersVisible)
				{
					result.Height += this.layout.ColumnHeaders.Height;
					result.Y -= this.layout.ColumnHeaders.Height;
				}
				return result;
			}
			return Rectangle.Empty;
		}

		// Token: 0x06001799 RID: 6041 RVA: 0x0005FFEC File Offset: 0x0005E1EC
		private int GetColumnIndexFromX(int x, out int xColumnLeftEdge)
		{
			Rectangle data = this.layout.Data;
			if (!this.RightToLeftInternal && x == data.X - 1)
			{
				x++;
			}
			else if (this.RightToLeftInternal && x == data.Right)
			{
				x--;
			}
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right - 1;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
			{
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				if (!this.RightToLeftInternal && num > x)
				{
					xColumnLeftEdge = num - dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				if (this.RightToLeftInternal && num < x)
				{
					xColumnLeftEdge = num + dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					if (!this.RightToLeftInternal && num > x)
					{
						xColumnLeftEdge = num - dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					if (this.RightToLeftInternal && num < x)
					{
						xColumnLeftEdge = num + dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			xColumnLeftEdge = -1;
			return -1;
		}

		// Token: 0x0600179A RID: 6042 RVA: 0x000601CD File Offset: 0x0005E3CD
		private static int GetColumnScrollRate(int xOffset)
		{
			if (xOffset <= 10)
			{
				return 480;
			}
			if (xOffset <= 15)
			{
				return 313;
			}
			if (xOffset <= 25)
			{
				return 180;
			}
			if (xOffset <= 35)
			{
				return 123;
			}
			return Math.Max(1, 4000 / xOffset);
		}

		// Token: 0x0600179B RID: 6043 RVA: 0x00060208 File Offset: 0x0005E408
		internal int GetColumnXFromIndex(int index)
		{
			int num;
			if (this.RightToLeftInternal)
			{
				num = this.layout.Data.Right - 1;
			}
			else
			{
				num = this.layout.Data.X;
			}
			DataGridViewColumn dataGridViewColumn;
			for (dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			int num2 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			}
			else
			{
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			while (dataGridViewColumn != null)
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			num = num2;
			dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			for (dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				if (this.RightToLeftInternal)
				{
					num += dataGridViewColumn.Thickness;
				}
				else
				{
					num -= dataGridViewColumn.Thickness;
				}
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x0600179C RID: 6044 RVA: 0x00060384 File Offset: 0x0005E584
		private int GetNegOffsetFromHorizontalOffset(int horizontalOffset)
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			while (dataGridViewColumn != null && dataGridViewColumn.Thickness <= horizontalOffset)
			{
				horizontalOffset -= dataGridViewColumn.Thickness;
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			return horizontalOffset;
		}

		// Token: 0x0600179D RID: 6045 RVA: 0x000603CC File Offset: 0x0005E5CC
		private bool GetOutOfBoundCorrectedHitTestInfo(ref DataGridView.HitTestInfo hti, ref int mouseX, ref int mouseY, out int xOffset, out int yOffset)
		{
			xOffset = (yOffset = 0);
			Rectangle a = this.layout.Data;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
			int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2);
			int num2 = this.ComputeHeightOfTrailingScrollingRows();
			int emptyBackgroundWidth = Math.Max(0, this.layout.Data.Width - this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible));
			int emptyBackgroundHeight = Math.Max(0, this.layout.Data.Height - rowsHeight2 - num2);
			if (this.dataGridViewOper[8])
			{
				if (this.layout.RowHeadersVisible)
				{
					a = Rectangle.Union(a, this.layout.RowHeaders);
				}
				this.DiscardZonesInScrollingArea(ref a, emptyBackgroundWidth, emptyBackgroundHeight, rowsHeight2, false, true);
				if (mouseY >= a.Top && mouseY <= a.Bottom)
				{
					hti = this.HitTest(this.RightToLeftInternal ? (a.Right - 1) : a.Left, mouseY);
					if (this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && hti.row >= 0 && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						int num3;
						if (hti.col >= 0)
						{
							num3 = hti.col;
						}
						else
						{
							DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							num3 = ((firstColumn == null) ? -1 : firstColumn.Index);
						}
						if (num3 >= 0 && firstRow >= 0)
						{
							if (!this.ScrollIntoView(num3, firstRow, false))
							{
								return false;
							}
							hti = this.HitTest(this.RightToLeftInternal ? a.Right : a.Left, mouseY);
						}
					}
					return true;
				}
				if (mouseY < a.Top)
				{
					if (this.ptAnchorCell.Y != -1 && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None || (this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
					{
						yOffset = mouseY - a.Top;
						if (this.RightToLeftInternal)
						{
							mouseX = a.Right - 1;
						}
						else
						{
							mouseX = a.Left + 1;
						}
					}
					else
					{
						hti = this.HitTest(this.RightToLeftInternal ? a.Right : a.Left, mouseY);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
				{
					yOffset = mouseY - a.Bottom;
					if (this.RightToLeftInternal)
					{
						mouseX = a.Right - 1;
					}
					else
					{
						mouseX = a.Left + 1;
					}
				}
				return true;
			}
			else
			{
				if (!this.dataGridViewOper[4])
				{
					if (this.dataGridViewOper[16])
					{
						bool flag = false;
						this.DiscardZonesInScrollingArea(ref a, emptyBackgroundWidth, emptyBackgroundHeight, rowsHeight2, true, true);
						if (mouseY < a.Top)
						{
							if (((this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) || (this.ptCurrentCell.Y != -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
							{
								yOffset = mouseY - a.Top;
							}
							else if (mouseY < this.layout.Data.Top)
							{
								mouseY = this.layout.Data.Top + 1;
								flag = true;
							}
						}
						else if (mouseY > a.Bottom)
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
							{
								if (this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
								{
									yOffset = mouseY - a.Bottom;
								}
								else
								{
									mouseY = a.Bottom - 1;
									flag = true;
								}
							}
							else
							{
								mouseY = a.Bottom - 1;
								flag = true;
							}
						}
						if ((!this.RightToLeftInternal && mouseX < a.Left) || (this.RightToLeftInternal && mouseX > a.Right))
						{
							if (((this.ptAnchorCell.X != -1 && !this.Columns[this.ptAnchorCell.X].Frozen) || (this.ptCurrentCell.X != -1 && !this.Columns[this.ptCurrentCell.X].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
							{
								if (this.RightToLeftInternal)
								{
									xOffset = a.Right - mouseX;
								}
								else
								{
									xOffset = mouseX - a.Left;
								}
							}
							else if (!this.RightToLeftInternal && mouseX < this.layout.Data.Left)
							{
								mouseX = this.layout.Data.Left + 1;
								flag = true;
							}
							else if (this.RightToLeftInternal && mouseX > this.layout.Data.Right)
							{
								mouseX = this.layout.Data.Right - 1;
								flag = true;
							}
						}
						else if ((!this.RightToLeftInternal && mouseX > a.Right) || (this.RightToLeftInternal && mouseX < a.Left))
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null))
							{
								DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								int num4 = 0;
								for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != nextColumn; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
								{
									num4 += dataGridViewColumn.Thickness;
								}
								if (this.HorizontalOffset != num4)
								{
									if (this.RightToLeftInternal)
									{
										xOffset = a.Left - mouseX;
									}
									else
									{
										xOffset = mouseX - a.Right;
									}
								}
								else
								{
									if (this.RightToLeftInternal)
									{
										mouseX = a.Left + 1;
									}
									else
									{
										mouseX = a.Right - 1;
									}
									flag = true;
								}
							}
							else
							{
								if (this.RightToLeftInternal)
								{
									mouseX = a.Left + 1;
								}
								else
								{
									mouseX = a.Right - 1;
								}
								flag = true;
							}
						}
						if (flag)
						{
							hti = this.HitTest(mouseX, mouseY);
						}
					}
					return true;
				}
				if (this.layout.ColumnHeadersVisible)
				{
					a = Rectangle.Union(a, this.layout.ColumnHeaders);
				}
				this.DiscardZonesInScrollingArea(ref a, emptyBackgroundWidth, emptyBackgroundHeight, rowsHeight2, true, false);
				if (mouseX >= a.Left && mouseX <= a.Right)
				{
					hti = this.HitTest(mouseX, a.Top);
					if (this.ptAnchorCell.X != -1 && this.Columns[this.ptAnchorCell.X].Frozen && this.trackColumnEdge != -1 && this.Columns[this.trackColumnEdge].Frozen && hti.col >= 0 && !this.Columns[hti.col].Frozen)
					{
						int index = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen).Index;
						int num5;
						if (hti.row >= 0)
						{
							num5 = hti.row;
						}
						else
						{
							num5 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						}
						if (num5 >= 0 && index >= 0)
						{
							if (!this.ScrollIntoView(index, num5, false))
							{
								return false;
							}
							hti = this.HitTest(mouseX, a.Top);
						}
					}
					return true;
				}
				if ((!this.RightToLeftInternal && mouseX < a.Left) || (this.RightToLeftInternal && mouseX > a.Right))
				{
					if (this.ptAnchorCell.X != -1 && (!this.Columns[this.ptAnchorCell.X].Frozen || (this.trackColumnEdge != -1 && !this.Columns[this.trackColumnEdge].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
					{
						if (this.RightToLeftInternal)
						{
							xOffset = a.Right - mouseX;
						}
						else
						{
							xOffset = mouseX - a.Left;
						}
						mouseY = a.Top + 1;
					}
					else
					{
						hti = this.HitTest(mouseX, a.Top);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
				{
					if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != -1 && this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						return true;
					}
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					int num6 = 0;
					for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn2 != nextColumn2; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						num6 += dataGridViewColumn2.Thickness;
					}
					if (this.HorizontalOffset != num6)
					{
						if (this.RightToLeftInternal)
						{
							xOffset = a.Left - mouseX;
						}
						else
						{
							xOffset = mouseX - a.Right;
						}
						mouseY = a.Top + 1;
					}
				}
				return true;
			}
		}

		// Token: 0x0600179E RID: 6046 RVA: 0x00060E34 File Offset: 0x0005F034
		internal override Size GetPreferredSizeCore(Size proposedConstraints)
		{
			int num = 2 * (this.BorderWidth + this.Padding.Size.Width);
			int num2 = 2 * (this.BorderWidth + this.Padding.Size.Height);
			bool flag = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal;
			bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
			int num3 = 16 + num;
			if (flag2)
			{
				num3 += this.vertScrollBar.Width;
			}
			if (this.RowHeadersVisible)
			{
				num3 += this.RowHeadersWidth;
			}
			int num4 = Math.Min(num3 + this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible), proposedConstraints.Width);
			if (num4 < num3)
			{
				num4 = num3;
			}
			int num5 = 16 + num2;
			if (flag)
			{
				num5 += this.horizScrollBar.Height;
			}
			if (this.ColumnHeadersVisible)
			{
				num5 += this.ColumnHeadersHeight;
			}
			int num6 = Math.Min(num5 + this.Rows.GetRowsHeight(DataGridViewElementStates.Visible), proposedConstraints.Height);
			if (num6 < num5)
			{
				num6 = num5;
			}
			return new Size(num4, num6);
		}

		/// <summary>Returns the rectangle that represents the display area for a row, as determined by the row index.</summary>
		/// <param name="rowIndex">The row index for the desired cell. </param>
		/// <param name="cutOverflow">
		///       <see langword="true" /> to return the row rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire row rectangle. </param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the row.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1. </exception>
		// Token: 0x0600179F RID: 6047 RVA: 0x00060F62 File Offset: 0x0005F162
		public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			return this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
		}

		// Token: 0x060017A0 RID: 6048 RVA: 0x00060F8C File Offset: 0x0005F18C
		private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			int num = data.Y;
			bool flag = false;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && !flag && num <= data.Bottom)
			{
				if (num2 == rowIndex)
				{
					flag = true;
				}
				else
				{
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && !flag && num <= data.Bottom)
				{
					if (num2 == rowIndex)
					{
						flag = true;
					}
					else
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			if (flag)
			{
				int height;
				if (cutOverflow && num + this.Rows.SharedRow(num2).GetHeight(num2) > data.Bottom)
				{
					height = data.Bottom - num;
				}
				else
				{
					height = this.Rows.SharedRow(num2).GetHeight(num2);
				}
				Rectangle result = new Rectangle(data.X, num, data.Width, height);
				if (this.layout.RowHeadersVisible)
				{
					result.Width += this.layout.RowHeaders.Width;
					if (!this.RightToLeftInternal)
					{
						result.X -= this.layout.RowHeaders.Width;
					}
				}
				return result;
			}
			return Rectangle.Empty;
		}

		// Token: 0x060017A1 RID: 6049 RVA: 0x00061128 File Offset: 0x0005F328
		private int GetRowIndexFromY(int y, out int yRowTopEdge)
		{
			Rectangle data = this.layout.Data;
			if (y == data.Y - 1)
			{
				y++;
			}
			int num = data.Y;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && num < data.Bottom)
			{
				int height = this.Rows.SharedRow(num2).GetHeight(num2);
				num += height;
				if (num > y)
				{
					yRowTopEdge = num - height;
					return num2;
				}
				num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && num < data.Bottom)
				{
					int height = this.Rows.SharedRow(num2).GetHeight(num2);
					num += height;
					if (num > y)
					{
						yRowTopEdge = num - height;
						return num2;
					}
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			yRowTopEdge = -1;
			return -1;
		}

		// Token: 0x060017A2 RID: 6050 RVA: 0x00061208 File Offset: 0x0005F408
		private static int GetRowScrollRate(int yOffset)
		{
			if (yOffset <= 10)
			{
				return 90;
			}
			if (yOffset <= 15)
			{
				return 57;
			}
			if (yOffset <= 25)
			{
				return 30;
			}
			if (yOffset <= 35)
			{
				return 18;
			}
			return Math.Max(1, 600 / yOffset);
		}

		// Token: 0x060017A3 RID: 6051 RVA: 0x00061238 File Offset: 0x0005F438
		internal int GetRowYFromIndex(int index)
		{
			int num = this.layout.Data.Y;
			int num2;
			for (num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible))
			{
				if (index == num2)
				{
					return num;
				}
				num += this.Rows.SharedRow(num2).GetHeight(num2);
			}
			int num3 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				if (index >= this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				else
				{
					num2 = -1;
				}
			}
			else
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num2 != -1)
			{
				while (num2 != -1)
				{
					if (index == num2)
					{
						return num;
					}
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			num = num3;
			for (num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); num2 != -1; num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				num -= this.Rows.SharedRow(num2).GetHeight(num2);
				if (index == num2)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x060017A4 RID: 6052 RVA: 0x00061358 File Offset: 0x0005F558
		private bool GetTabKeyEffective(bool shift, bool ctrl)
		{
			if (this.StandardTab)
			{
				return ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
			}
			return !ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
		}

		/// <summary>Returns location information, such as row and column indices, given x- and y-coordinates.</summary>
		/// <param name="x">The x-coordinate. </param>
		/// <param name="y">The y-coordinate. </param>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> that contains the location information. </returns>
		// Token: 0x060017A5 RID: 6053 RVA: 0x000613D4 File Offset: 0x0005F5D4
		public DataGridView.HitTestInfo HitTest(int x, int y)
		{
			DataGridView.HitTestInfo hitTestInfo = new DataGridView.HitTestInfo();
			if (!this.layout.Inside.Contains(x, y))
			{
				return hitTestInfo;
			}
			if (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.HorizontalScrollBar;
				return hitTestInfo;
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.VerticalScrollBar;
				return hitTestInfo;
			}
			if (this.layout.TopLeftHeader.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.TopLeftHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Left;
				}
				hitTestInfo.rowStart = this.layout.TopLeftHeader.Top;
				if ((!this.RightToLeftInternal && this.layout.TopLeftHeader.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.TopLeftHeader.Left < 6))
				{
					if (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Left - x - 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Right - x - 1;
						}
					}
				}
				else if (this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop;
					hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y - 1;
				}
				return hitTestInfo;
			}
			if (this.layout.ColumnHeaders.Contains(x, y))
			{
				int num;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num);
				if (hitTestInfo.col < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.ColumnHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader;
				hitTestInfo.rowStart = this.layout.ColumnHeaders.Top;
				hitTestInfo.colStart = num;
				int thickness = this.Columns[hitTestInfo.col].Thickness;
				if ((!this.RightToLeftInternal && num + thickness - x < 6) || (this.RightToLeftInternal && x - num + thickness < 6))
				{
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = num - thickness - x + 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = num + thickness - x - 1;
					}
					DataGridViewColumn dataGridViewColumn = this.Columns[hitTestInfo.col];
					if (dataGridViewColumn.Resizable == DataGridViewTriState.True && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight;
					}
				}
				else if ((!this.RightToLeftInternal && x - num < 6) || (this.RightToLeftInternal && num - x < 6))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (previousColumn != null)
					{
						hitTestInfo.adjacentCol = previousColumn.Index;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
						if (previousColumn.Resizable == DataGridViewTriState.True && (previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
						}
						else
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft;
						}
					}
					else if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft;
					}
				}
				else if (this.layout.ColumnHeaders.Bottom - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom;
					hitTestInfo.mouseBarOffset = this.layout.ColumnHeaders.Bottom - y - 1;
				}
			}
			if (this.layout.RowHeaders.Contains(x, y))
			{
				int num2;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num2);
				if (hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.RowHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeader;
				hitTestInfo.rowStart = num2;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Left;
				}
				int height = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
				if (num2 + height - y < 5)
				{
					if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
						hitTestInfo.mouseBarOffset = num2 + height - y - 1;
					}
				}
				else if (y - num2 < 5)
				{
					int num3 = -1;
					if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						num3 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
					}
					if (num3 != -1)
					{
						if (this.RowIsResizable(num3) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
							hitTestInfo.adjacentRow = num3;
							hitTestInfo.mouseBarOffset = num2 - y - 1;
						}
					}
					else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom;
						hitTestInfo.mouseBarOffset = num2 - y - 1;
					}
				}
				else if (((!this.RightToLeftInternal && this.layout.RowHeaders.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.RowHeaders.Left < 6)) && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight;
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Left - x - 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Right - x - 1;
					}
				}
			}
			if (this.layout.Data.Contains(x, y))
			{
				int num4;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num4);
				int num5;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num5);
				if (hitTestInfo.col < 0 || hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.Cell;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.Cell;
				hitTestInfo.rowStart = num5;
				hitTestInfo.colStart = num4;
				if (!this.ColumnHeadersVisible)
				{
					int thickness2 = this.Columns[hitTestInfo.col].Thickness;
					if ((!this.RightToLeftInternal && num4 + thickness2 - x < 6) || (this.RightToLeftInternal && x - num4 + thickness2 < 6))
					{
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - thickness2 - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 + thickness2 - x - 1;
						}
						DataGridViewColumn dataGridViewColumn2 = this.Columns[hitTestInfo.col];
						if (dataGridViewColumn2.Resizable == DataGridViewTriState.True && (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
						}
						return hitTestInfo;
					}
					if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
					{
						DataGridViewColumn dataGridViewColumn3 = null;
						if (hitTestInfo.col != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
						{
							dataGridViewColumn3 = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
						if (dataGridViewColumn3 != null)
						{
							hitTestInfo.adjacentCol = dataGridViewColumn3.Index;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x + 1;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							if (dataGridViewColumn3.Resizable == DataGridViewTriState.True && (dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
							}
							return hitTestInfo;
						}
						if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							return hitTestInfo;
						}
					}
				}
				else if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (hitTestInfo.col == firstColumn.Index && this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 - x - 1;
						}
						return hitTestInfo;
					}
				}
				if (!this.RowHeadersVisible)
				{
					int height2 = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
					if (num5 + height2 - y < 5)
					{
						if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
							hitTestInfo.mouseBarOffset = num5 + height2 - y - 1;
						}
					}
					else if (y - num5 < 5)
					{
						int num6 = -1;
						if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
						{
							num6 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
						}
						if (num6 != -1)
						{
							if (this.RowIsResizable(num6) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
								hitTestInfo.adjacentRow = num6;
								hitTestInfo.mouseBarOffset = num5 - y - 1;
							}
						}
						else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
							hitTestInfo.mouseBarOffset = num5 - y - 1;
						}
					}
				}
				else if (y - num5 < 5)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (hitTestInfo.row == firstRow && this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
						hitTestInfo.mouseBarOffset = num5 - y - 1;
					}
				}
			}
			return hitTestInfo;
		}

		// Token: 0x060017A6 RID: 6054 RVA: 0x00061DFA File Offset: 0x0005FFFA
		private void HorizScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.HorizScrollTimerHandler));
		}

		// Token: 0x060017A7 RID: 6055 RVA: 0x00061E10 File Offset: 0x00060010
		private void HorizScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num != 0)
				{
					int num3 = Math.Abs(num);
					int num4 = num / num3;
					this.ScrollColumns(num4);
					this.horizScrollTimer.Interval = DataGridView.GetColumnScrollRate(num3);
					if (this.dataGridViewOper[4])
					{
						hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : -1) * (num + num4), y);
						if (hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num2 != 0)
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : -1) * (num + num4), point.Y - num2 - num2 / Math.Abs(num2));
						}
						else
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : -1) * (num + num4), y);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
					{
						this.OnColumnSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.HorizScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x060017A8 RID: 6056 RVA: 0x00061FB0 File Offset: 0x000601B0
		private bool InitializeEditingCellValue(ref DataGridViewCellStyle dataGridViewCellStyle, ref DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			this.uneditedFormattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[512] = true;
			try
			{
				IDataGridViewEditingCell dataGridViewEditingCell = dataGridViewCell as IDataGridViewEditingCell;
				object editingCellFormattedValue = dataGridViewEditingCell.GetEditingCellFormattedValue(DataGridViewDataErrorContexts.Formatting);
				if ((editingCellFormattedValue == null && this.uneditedFormattedValue != null) || (editingCellFormattedValue != null && this.uneditedFormattedValue == null) || (editingCellFormattedValue != null && !this.uneditedFormattedValue.Equals(editingCellFormattedValue)))
				{
					dataGridViewCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
					dataGridViewEditingCell = (dataGridViewCell as IDataGridViewEditingCell);
					dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
					dataGridViewEditingCell.EditingCellValueChanged = false;
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		// Token: 0x060017A9 RID: 6057 RVA: 0x000620EC File Offset: 0x000602EC
		private bool InitializeEditingControlValue(ref DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			object formattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[16384] = true;
			this.dataGridViewState1[512] = true;
			try
			{
				dataGridViewCell.InitializeEditingControl(this.ptCurrentCell.Y, formattedValue, dataGridViewCellStyle);
				((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				this.uneditedFormattedValue = formattedValue;
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		/// <summary>Invalidates the specified cell of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="dataGridViewCell">The <see cref="T:System.Windows.Forms.DataGridViewCell" /> to invalidate. </param>
		/// <exception cref="T:System.ArgumentException">
		///         <paramref name="dataGridViewCell" /> does not belong to the <see cref="T:System.Windows.Forms.DataGridView" />. </exception>
		/// <exception cref="T:System.ArgumentNullException">
		///         <paramref name="dataGridViewCell" /> is <see langword="null" />.</exception>
		// Token: 0x060017AA RID: 6058 RVA: 0x000621F4 File Offset: 0x000603F4
		public void InvalidateCell(DataGridViewCell dataGridViewCell)
		{
			if (dataGridViewCell == null)
			{
				throw new ArgumentNullException("dataGridViewCell");
			}
			if (dataGridViewCell.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
			}
			this.InvalidateCellPrivate(dataGridViewCell);
		}

		// Token: 0x060017AB RID: 6059 RVA: 0x00062224 File Offset: 0x00060424
		private void InvalidateCellPrivate(DataGridViewCell dataGridViewCell)
		{
			this.InvalidateCell(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex);
		}

		/// <summary>Invalidates the cell with the specified row and column indexes, forcing it to be repainted.</summary>
		/// <param name="columnIndex">The column index of the cell to invalidate.</param>
		/// <param name="rowIndex">The row index of the cell to invalidate. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.-or-
		///         <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1. </exception>
		// Token: 0x060017AC RID: 6060 RVA: 0x00062238 File Offset: 0x00060438
		public void InvalidateCell(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
		}

		// Token: 0x060017AD RID: 6061 RVA: 0x00062288 File Offset: 0x00060488
		private void InvalidateCellPrivate(int columnIndex, int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(columnIndex, rowIndex, true);
				if (!cellAdjustedDisplayRectangle.IsEmpty)
				{
					base.Invalidate(cellAdjustedDisplayRectangle);
				}
			}
		}

		/// <summary>Invalidates the specified column of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="columnIndex">The index of the column to invalidate. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1. </exception>
		// Token: 0x060017AE RID: 6062 RVA: 0x000622B7 File Offset: 0x000604B7
		public void InvalidateColumn(int columnIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.InvalidateColumnInternal(columnIndex);
		}

		// Token: 0x060017AF RID: 6063 RVA: 0x000622E0 File Offset: 0x000604E0
		internal void InvalidateColumnInternal(int columnIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, true);
				if (!columnDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(columnDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x060017B0 RID: 6064 RVA: 0x0006230E File Offset: 0x0006050E
		private void InvalidateData()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Data);
			}
		}

		// Token: 0x060017B1 RID: 6065 RVA: 0x00062329 File Offset: 0x00060529
		private void InvalidateInside()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Inside);
			}
		}

		/// <summary>Invalidates the specified row of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="rowIndex">The index of the row to invalidate. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1. </exception>
		// Token: 0x060017B2 RID: 6066 RVA: 0x00062344 File Offset: 0x00060544
		public void InvalidateRow(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateRowPrivate(rowIndex);
		}

		// Token: 0x060017B3 RID: 6067 RVA: 0x0006236C File Offset: 0x0006056C
		private void InvalidateRowPrivate(int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, true);
				if (!rowDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(rowDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x060017B4 RID: 6068 RVA: 0x0006239A File Offset: 0x0006059A
		private void InvalidateRowHeights()
		{
			this.Rows.InvalidateCachedRowsHeights();
			if (base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				base.Invalidate();
			}
		}

		// Token: 0x060017B5 RID: 6069 RVA: 0x000623C0 File Offset: 0x000605C0
		private void InvalidateRows(int lo, int hi)
		{
			if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				lo = this.Rows.GetNextRow(lo, DataGridViewElementStates.Visible);
			}
			if (lo == -1)
			{
				return;
			}
			if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				hi = this.Rows.GetPreviousRow(hi, DataGridViewElementStates.Visible);
			}
			Rectangle rowDisplayRectangle = this.GetRowDisplayRectangle(lo, true);
			int top;
			if (rowDisplayRectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					return;
				}
				if (this.displayedBandsInfo.NumDisplayedScrollingRows == 0)
				{
					return;
				}
				if (lo >= this.displayedBandsInfo.FirstDisplayedScrollingRow && this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lo) >= this.displayedBandsInfo.NumDisplayedScrollingRows)
				{
					return;
				}
				top = this.GetRowDisplayRectangle(this.displayedBandsInfo.FirstDisplayedScrollingRow, true).Top;
			}
			else
			{
				top = rowDisplayRectangle.Top;
			}
			rowDisplayRectangle = this.GetRowDisplayRectangle(hi, true);
			int num;
			if (rowDisplayRectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen)
				{
					num = data.Bottom;
				}
				else if (hi > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num = data.Bottom;
				}
				else
				{
					if (this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) == 0)
					{
						return;
					}
					num = 0;
					int i = 0;
					while (i < this.displayedBandsInfo.NumDisplayedFrozenRows)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
						{
							if (i == this.displayedBandsInfo.NumDisplayedFrozenRows - 1)
							{
								num = this.GetRowDisplayRectangle(i, true).Bottom;
								break;
							}
							i++;
						}
					}
					if (num <= top)
					{
						return;
					}
				}
			}
			else
			{
				num = rowDisplayRectangle.Bottom;
			}
			base.Invalidate(new Rectangle(data.X, top, data.Width, num - top));
		}

		// Token: 0x060017B6 RID: 6070 RVA: 0x00062598 File Offset: 0x00060798
		private void InvalidateScrollBars()
		{
			if (this.horizScrollBar != null && this.horizScrollBar.Visible)
			{
				this.horizScrollBar.Invalidate();
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible)
			{
				this.vertScrollBar.Invalidate();
			}
		}

		// Token: 0x060017B7 RID: 6071 RVA: 0x000625E5 File Offset: 0x000607E5
		private bool IsColumnOutOfBounds(int columnIndex)
		{
			return columnIndex >= this.Columns.Count || columnIndex == -1;
		}

		// Token: 0x060017B8 RID: 6072 RVA: 0x000625FB File Offset: 0x000607FB
		private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex)
		{
			return columnIndex >= this.Columns.Count || rowIndex >= this.Rows.Count || columnIndex == -1 || rowIndex == -1;
		}

		// Token: 0x060017B9 RID: 6073 RVA: 0x00062623 File Offset: 0x00060823
		private bool IsRowOutOfBounds(int rowIndex)
		{
			return rowIndex >= this.Rows.Count || rowIndex == -1;
		}

		/// <summary>Determines whether a character is an input character that the <see cref="T:System.Windows.Forms.DataGridView" /> recognizes.</summary>
		/// <param name="charCode">The character to test.</param>
		/// <returns>
		///     <see langword="true" /> if the character is recognized as an input character; otherwise, <see langword="false" />.</returns>
		// Token: 0x060017BA RID: 6074 RVA: 0x00062639 File Offset: 0x00060839
		protected override bool IsInputChar(char charCode)
		{
			return (this.editingControl != null && this.dataGridViewState1[32]) || base.IsInputChar(charCode);
		}

		/// <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
		/// <returns>
		///     <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
		// Token: 0x060017BB RID: 6075 RVA: 0x0006265C File Offset: 0x0006085C
		protected override bool IsInputKey(Keys keyData)
		{
			if ((keyData & Keys.Alt) == Keys.Alt)
			{
				return false;
			}
			Keys keys = keyData & Keys.KeyCode;
			if (keys <= Keys.D0)
			{
				if (keys == Keys.Tab)
				{
					return this.GetTabKeyEffective((keyData & Keys.Shift) == Keys.Shift, (keyData & Keys.Control) == Keys.Control);
				}
				if (keys == Keys.Return)
				{
					return true;
				}
				switch (keys)
				{
				case Keys.Escape:
					return this.IsEscapeKeyEffective;
				case Keys.IMEConvert:
				case Keys.IMENonconvert:
				case Keys.IMEAccept:
				case Keys.IMEModeChange:
				case Keys.Select:
				case Keys.Print:
				case Keys.Execute:
				case Keys.Snapshot:
				case Keys.Help:
					goto IL_134;
				case Keys.Space:
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect || this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect) && this.ptCurrentCell.X != -1)
					{
						return true;
					}
					goto IL_134;
				case Keys.Prior:
				case Keys.Next:
				case Keys.End:
				case Keys.Home:
				case Keys.Left:
				case Keys.Up:
				case Keys.Right:
				case Keys.Down:
				case Keys.Delete:
				case Keys.D0:
					return true;
				case Keys.Insert:
					break;
				default:
					goto IL_134;
				}
			}
			else if (keys <= Keys.C)
			{
				if (keys != Keys.A)
				{
					if (keys != Keys.C)
					{
						goto IL_134;
					}
				}
				else
				{
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
					{
						return true;
					}
					goto IL_134;
				}
			}
			else
			{
				if (keys != Keys.NumPad0 && keys - Keys.F2 > 1)
				{
					goto IL_134;
				}
				return true;
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
			{
				return true;
			}
			IL_134:
			return base.IsInputKey(keyData);
		}

		// Token: 0x060017BC RID: 6076 RVA: 0x000627A4 File Offset: 0x000609A4
		private void LayoutScrollBars()
		{
			base.SuspendLayout();
			try
			{
				bool flag = (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal) && this.dataGridViewState2[33554432];
				bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool rightToLeftInternal = this.RightToLeftInternal;
				int columnCount = this.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
				int columnsWidth2 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = this.horizScrollBar.Height = SystemInformation.HorizontalScrollBarHeight;
				int num2 = this.vertScrollBar.Width = SystemInformation.VerticalScrollBarWidth;
				int firstDisplayedScrollingRow;
				if (flag && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					int height = this.layout.Data.Height;
					DataGridView.LayoutData layoutData = this.layout;
					layoutData.Data.Height = layoutData.Data.Height - num;
					flag4 = (flag3 = true);
					if (columnsWidth - this.layout.Data.Width <= num2 || this.layout.Data.Width - columnsWidth2 <= num2)
					{
						firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2))
						{
							flag4 = (columnsWidth2 < this.layout.Data.Width - num2);
						}
						this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
					}
					if (flag4)
					{
						if (this.layout.RowHeadersVisible)
						{
							DataGridView.LayoutData layoutData2 = this.layout;
							layoutData2.RowHeaders.Height = layoutData2.RowHeaders.Height - num;
						}
					}
					else
					{
						this.layout.Data.Height = height;
					}
				}
				firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				this.ComputeVisibleRows();
				if (flag2 && this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
				{
					DataGridView.LayoutData layoutData3 = this.layout;
					layoutData3.Data.Width = layoutData3.Data.Width - num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData4 = this.layout;
						layoutData4.Data.X = layoutData4.Data.X + num2;
					}
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData5 = this.layout;
						layoutData5.ColumnHeaders.Width = layoutData5.ColumnHeaders.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData6 = this.layout;
							layoutData6.ColumnHeaders.X = layoutData6.ColumnHeaders.X + num2;
						}
					}
					flag5 = true;
				}
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (flag && flag5 && !flag4 && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData7 = this.layout;
						layoutData7.ColumnHeaders.Width = layoutData7.ColumnHeaders.Width + num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData8 = this.layout;
							layoutData8.ColumnHeaders.X = layoutData8.ColumnHeaders.X - num2;
						}
					}
					DataGridView.LayoutData layoutData9 = this.layout;
					layoutData9.Data.Width = layoutData9.Data.Width + num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData10 = this.layout;
						layoutData10.Data.X = layoutData10.Data.X - num2;
					}
					DataGridView.LayoutData layoutData11 = this.layout;
					layoutData11.Data.Height = layoutData11.Data.Height - num;
					flag5 = false;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
					{
						DataGridView.LayoutData layoutData12 = this.layout;
						layoutData12.Data.Width = layoutData12.Data.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData13 = this.layout;
							layoutData13.Data.X = layoutData13.Data.X + num2;
						}
						if (this.layout.ColumnHeadersVisible)
						{
							DataGridView.LayoutData layoutData14 = this.layout;
							layoutData14.ColumnHeaders.Width = layoutData14.ColumnHeaders.Width - num2;
							if (rightToLeftInternal)
							{
								DataGridView.LayoutData layoutData15 = this.layout;
								layoutData15.ColumnHeaders.X = layoutData15.ColumnHeaders.X + num2;
							}
						}
						flag5 = true;
					}
					flag4 = (flag5 || flag3);
				}
				this.layout.ResizeBoxRect = default(Rectangle);
				if (flag5 && flag4)
				{
					this.layout.ResizeBoxRect = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, this.layout.Data.Bottom, this.vertScrollBar.Width, this.horizScrollBar.Height);
				}
				if (flag4 && columnCount > 0)
				{
					int num3 = columnsWidth - this.layout.Data.Width;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = columnsWidth - columnsWidth2;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = Math.Max(columnsWidth - columnsWidth2 - num3, 0);
					this.horizScrollBar.Enabled = base.Enabled;
					this.horizScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Inside.X + this.layout.ResizeBoxRect.Width) : this.layout.Inside.X, this.layout.Data.Bottom, this.layout.Inside.Width - this.layout.ResizeBoxRect.Width, this.horizScrollBar.Height);
					this.horizScrollBar.Visible = true;
					this.horizScrollBar.Invalidate();
				}
				else
				{
					this.horizScrollBar.Visible = false;
					this.HorizontalOffset = 0;
					this.horizScrollBar.Enabled = false;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = 1;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = 1;
					this.horizScrollBar.Value = 0;
				}
				if (flag5)
				{
					int num4 = this.layout.Data.Y;
					int num5 = this.layout.Data.Height;
					if (this.layout.ColumnHeadersVisible)
					{
						num4 = this.layout.ColumnHeaders.Y;
						num5 += this.layout.ColumnHeaders.Height;
					}
					else if (this.SingleHorizontalBorderAdded)
					{
						num4--;
						num5++;
					}
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
					this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
					this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
					this.vertScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, num4, this.vertScrollBar.Width, num5);
					this.vertScrollBar.Enabled = base.Enabled;
					this.vertScrollBar.Visible = true;
					this.vertScrollBar.Invalidate();
					this.verticalOffset = this.vertScrollBar.Value;
				}
				else
				{
					this.vertScrollBar.Visible = false;
					this.verticalOffset = this.ComputeHeightOfScrolledOffRows();
					this.vertScrollBar.Enabled = false;
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = 1;
					this.vertScrollBar.LargeChange = 1;
					this.vertScrollBar.Value = 0;
				}
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		// Token: 0x060017BD RID: 6077 RVA: 0x000630B4 File Offset: 0x000612B4
		private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow)
		{
			Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
			if (firstDisplayedCellAddress.X != -1 && (includeNewRow || !this.AllowUserToAddRowsInternal || firstDisplayedCellAddress.Y != this.Rows.Count - 1))
			{
				bool flag = this.SetAndSelectCurrentCellAddress(firstDisplayedCellAddress.X, firstDisplayedCellAddress.Y, true, false, false, true, false);
			}
		}

		// Token: 0x060017BE RID: 6078 RVA: 0x0006310D File Offset: 0x0006130D
		private static DataGridViewAutoSizeRowMode MapAutoSizeRowsModeToRowMode(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.AllHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.AllCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			}
			return DataGridViewAutoSizeRowMode.RowHeader;
		}

		// Token: 0x060017BF RID: 6079 RVA: 0x00063144 File Offset: 0x00061344
		private void MoveColumnHeadersOrRowResize(MouseEventArgs e)
		{
			this.lastRowSplitBar = this.currentRowSplitBar;
			this.currentRowSplitBar = e.Y;
			Rectangle rectangle = this.CalcRowResizeFeedbackRect(this.lastRowSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x060017C0 RID: 6080 RVA: 0x000631EC File Offset: 0x000613EC
		private void MapDataGridViewColumnToDataBoundField(DataGridViewColumn dataGridViewColumn)
		{
			DataGridView.DataGridViewDataConnection dataGridViewDataConnection = this.DataConnection;
			int num = (dataGridViewDataConnection == null) ? -1 : dataGridViewDataConnection.BoundColumnIndex(dataGridViewColumn.DataPropertyName);
			if (num != -1)
			{
				dataGridViewColumn.IsDataBoundInternal = true;
				dataGridViewColumn.BoundColumnIndex = num;
				dataGridViewColumn.BoundColumnConverter = dataGridViewDataConnection.BoundColumnConverter(num);
				dataGridViewColumn.ValueType = dataGridViewDataConnection.BoundColumnValueType(num);
				dataGridViewColumn.ReadOnly = (dataGridViewDataConnection.DataFieldIsReadOnly(dataGridViewColumn.BoundColumnIndex) || dataGridViewColumn.ReadOnly);
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
				if (dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable && !this.dataGridViewOper[1024])
				{
					dataGridViewColumn.HeaderCell.SortGlyphDirection = dataGridViewDataConnection.BoundColumnSortOrder(num);
					if (this.sortedColumn == null && dataGridViewColumn.HeaderCell.SortGlyphDirection != SortOrder.None)
					{
						this.sortedColumn = dataGridViewColumn;
						this.sortOrder = dataGridViewColumn.HeaderCell.SortGlyphDirection;
						return;
					}
				}
			}
			else
			{
				dataGridViewColumn.IsDataBoundInternal = false;
				dataGridViewColumn.BoundColumnIndex = -1;
				dataGridViewColumn.BoundColumnConverter = null;
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
			}
		}

		// Token: 0x060017C1 RID: 6081 RVA: 0x000632E8 File Offset: 0x000614E8
		private void MoveColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			this.lastHeaderShadow = e.X;
			this.dataGridViewState2[1024] = this.ColumnRelocationTarget(e, hti, out this.trackColumnEdge);
			base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
		}

		// Token: 0x060017C2 RID: 6082 RVA: 0x00063340 File Offset: 0x00061540
		private void MoveRowHeadersOrColumnResize(int x)
		{
			this.lastColSplitBar = this.currentColSplitBar;
			this.currentColSplitBar = x;
			Rectangle rectangle = this.CalcColResizeFeedbackRect(this.lastColSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		/// <summary>Notifies the <see cref="T:System.Windows.Forms.DataGridView" /> that the current cell has uncommitted changes.</summary>
		/// <param name="dirty">
		///       <see langword="true" /> to indicate the cell has uncommitted changes; otherwise, <see langword="false" />. </param>
		// Token: 0x060017C3 RID: 6083 RVA: 0x000633E4 File Offset: 0x000615E4
		public virtual void NotifyCurrentCellDirty(bool dirty)
		{
			if (!this.dataGridViewState1[512])
			{
				this.IsCurrentCellDirtyInternal = dirty;
				if (dirty && this.editingControl != null && ((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
		}

		// Token: 0x060017C4 RID: 6084 RVA: 0x00063430 File Offset: 0x00061630
		internal void OnAddedColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex >= this.Columns.Count)
			{
				dataGridViewColumn.DisplayIndexInternal = dataGridViewColumn.Index;
				this.Columns.InvalidateCachedColumnsOrder();
			}
			this.CorrectColumnDisplayIndexesAfterInsertion(dataGridViewColumn);
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = this;
			}
			this.AdjustExpandingRows(dataGridViewColumn.Index, false);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
			bool flag = inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, flag);
			}
			if (!flag)
			{
				dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
				this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, true);
				}
			}
			this.OnColumnAdded(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x060017C5 RID: 6085 RVA: 0x00063504 File Offset: 0x00061704
		internal void OnAddedRow_PreNotification(int rowIndex)
		{
			if (this.AllowUserToAddRowsInternal && this.newRowIndex == -1)
			{
				this.newRowIndex = rowIndex;
			}
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				foreach (object obj in dataGridViewRow.Cells)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (!dataGridViewCell.OwningColumn.ReadOnly && this.IsSharedCellReadOnly(dataGridViewCell, rowIndex))
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
					}
				}
			}
		}

		// Token: 0x060017C6 RID: 6086 RVA: 0x000635BC File Offset: 0x000617BC
		internal void OnAddedRow_PostNotification(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
			{
				bool flag = (rowState & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
				DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
				bool flag2 = false;
				if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag))
				{
					int height = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					this.Rows.SharedRow(rowIndex).CachedThickness = height;
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
					flag2 = true;
				}
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
				if (flag)
				{
					dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
				}
				bool flag3;
				if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
				{
					flag3 = this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
				}
				else
				{
					flag3 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
				}
				bool flag4 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
				bool flag5 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
				if (!flag5 && !flag3)
				{
					flag4 = true;
				}
				if (flag5)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag4, true);
				}
				if (!flag4)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
				if (flag5 && !flag4)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		// Token: 0x060017C7 RID: 6087 RVA: 0x000636EC File Offset: 0x000618EC
		internal void OnAddedRows_PreNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PreNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x060017C8 RID: 6088 RVA: 0x0006371C File Offset: 0x0006191C
		internal void OnAddedRows_PostNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PostNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x060017C9 RID: 6089 RVA: 0x0006374C File Offset: 0x0006194C
		internal void OnAddingColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
				this.dataGridViewState2[67108864] = true;
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) + dataGridViewColumn.FillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[]
				{
					ushort.MaxValue.ToString(CultureInfo.CurrentCulture)
				}));
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, this.Columns.Count);
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num2 = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num2)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.SetValueInternal(i, dataGridViewCell.DefaultNewRowValue);
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num2)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(num2 - 1);
					}
					throw;
				}
			}
		}

		// Token: 0x060017CA RID: 6090 RVA: 0x00063A10 File Offset: 0x00061C10
		internal void OnAddingColumns(DataGridViewColumn[] dataGridViewColumns)
		{
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None);
			foreach (DataGridViewColumn dataGridViewColumn in dataGridViewColumns)
			{
				if (dataGridViewColumn == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneColumnIsNull"));
				}
				if (dataGridViewColumn.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
				}
				if (this.Rows.Count > 0 && dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
					{
						DataGridViewColumnSortMode.Automatic.ToString(),
						this.SelectionMode.ToString()
					}));
				}
				if (dataGridViewColumn.Visible)
				{
					if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
					}
					if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
					}
					this.dataGridViewState2[67108864] = true;
				}
				num += dataGridViewColumn.FillWeight;
				if (num > 65535f)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[]
					{
						ushort.MaxValue.ToString(CultureInfo.CurrentCulture)
					}));
				}
			}
			int num2 = dataGridViewColumns.Length;
			for (int j = 0; j < num2 - 1; j++)
			{
				for (int k = j + 1; k < num2; k++)
				{
					if (dataGridViewColumns[j] == dataGridViewColumns[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalColumns"));
					}
				}
			}
			this.CorrectColumnFrozenStates(dataGridViewColumns);
			if (this.Rows.Count > 0)
			{
				foreach (DataGridViewColumn dataGridViewColumn2 in dataGridViewColumns)
				{
					if (dataGridViewColumn2.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
					{
						DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
						break;
					}
				}
				int count = this.Columns.Count;
				int num3 = 0;
				try
				{
					foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
					{
						num3++;
						for (int n = 0; n < this.Rows.Count; n++)
						{
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(n);
							if (dataGridViewRow2.Cells.Count < count + num3)
							{
								DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn3.CellTemplate.Clone();
								int num4 = dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
								if (n == this.newRowIndex)
								{
									dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
								}
								dataGridViewCell.DataGridViewInternal = this;
								dataGridViewCell.OwningRowInternal = dataGridViewRow2;
								dataGridViewCell.OwningColumnInternal = dataGridViewColumn3;
							}
						}
					}
				}
				catch
				{
					for (int num5 = 0; num5 < this.Rows.Count; num5++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(num5);
						while (dataGridViewRow3.Cells.Count > count)
						{
							dataGridViewRow3.Cells.RemoveAtInternal(dataGridViewRow3.Cells.Count - 1);
						}
					}
					throw;
				}
			}
		}

		// Token: 0x060017CB RID: 6091 RVA: 0x00063DA4 File Offset: 0x00061FA4
		internal void OnAddingRow(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, bool checkFrozenState)
		{
			if (dataGridViewRow == null)
			{
				throw new ArgumentNullException("dataGridViewRow");
			}
			if (checkFrozenState)
			{
				this.CorrectRowFrozenState(dataGridViewRow, rowState, this.Rows.Count);
			}
			if (this.ReadOnly && dataGridViewRow.DataGridView == null && dataGridViewRow.ReadOnly)
			{
				dataGridViewRow.ReadOnly = false;
			}
			int num = 0;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[num];
				if ((this.ReadOnly || dataGridViewColumn.ReadOnly) && dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly))
				{
					dataGridViewCell.ReadOnlyInternal = false;
				}
				num++;
			}
		}

		// Token: 0x060017CC RID: 6092 RVA: 0x00063E70 File Offset: 0x00062070
		internal void OnAddingRows(DataGridViewRow[] dataGridViewRows, bool checkFrozenStates)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				if (dataGridViewRow == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneRowIsNull"));
				}
				if (dataGridViewRow.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				if (dataGridViewRow.Selected)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_CannotAddOrInsertSelectedRow"));
				}
				if (dataGridViewRow.Cells.Count > this.Columns.Count)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_TooManyCells"));
				}
			}
			int num = dataGridViewRows.Length;
			for (int j = 0; j < num - 1; j++)
			{
				for (int k = j + 1; k < num; k++)
				{
					if (dataGridViewRows[j] == dataGridViewRows[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalRows"));
					}
				}
			}
			if (checkFrozenStates)
			{
				this.CorrectRowFrozenStates(dataGridViewRows, this.Rows.Count);
			}
			foreach (DataGridViewRow dataGridViewRow2 in dataGridViewRows)
			{
				this.CompleteCellsCollection(dataGridViewRow2);
				this.OnAddingRow(dataGridViewRow2, dataGridViewRow2.State, false);
			}
		}

		// Token: 0x060017CD RID: 6093 RVA: 0x00063F8C File Offset: 0x0006218C
		internal void OnAdvancedBorderStyleChanged(DataGridViewAdvancedBorderStyle dgvabs)
		{
			if (!this.dataGridViewOper[65536])
			{
				if (dgvabs == this.advancedCellBorderStyle)
				{
					this.OnCellBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedColumnHeadersBorderStyle)
				{
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedRowHeadersBorderStyle)
				{
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017CE RID: 6094 RVA: 0x00063FEC File Offset: 0x000621EC
		protected virtual void OnAllowUserToAddRowsChanged(EventArgs e)
		{
			this.PushAllowUserToAddRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017CF RID: 6095 RVA: 0x0006403C File Offset: 0x0006223C
		protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D0 RID: 6096 RVA: 0x00064084 File Offset: 0x00062284
		protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D1 RID: 6097 RVA: 0x000640CC File Offset: 0x000622CC
		protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D2 RID: 6098 RVA: 0x00064114 File Offset: 0x00062314
		protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D3 RID: 6099 RVA: 0x0006415C File Offset: 0x0006235C
		protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D4 RID: 6100 RVA: 0x000641D8 File Offset: 0x000623D8
		protected virtual void OnAutoGenerateColumnsChanged(EventArgs e)
		{
			if (this.AutoGenerateColumns && this.DataSource != null)
			{
				this.RefreshColumnsAndRows();
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060017D5 RID: 6101 RVA: 0x00064238 File Offset: 0x00062438
		internal void OnAutoSizeColumnModeChanged(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousInheritedMode)
		{
			DataGridViewAutoSizeColumnModeEventArgs e = new DataGridViewAutoSizeColumnModeEventArgs(dataGridViewColumn, previousInheritedMode);
			this.OnAutoSizeColumnModeChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs.Column" /> property of <paramref name="e" /> is null.</exception>
		// Token: 0x060017D6 RID: 6102 RVA: 0x00064254 File Offset: 0x00062454
		protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			if (e.Column == null)
			{
				throw new InvalidOperationException(SR.GetString("InvalidNullArgument", new object[]
				{
					"e.Column"
				}));
			}
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnMode previousMode = e.PreviousMode;
			bool flag = previousMode != DataGridViewAutoSizeColumnMode.Fill && previousMode != DataGridViewAutoSizeColumnMode.None && previousMode > DataGridViewAutoSizeColumnMode.NotSet;
			if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || previousMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
			}
			bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
			{
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					if (!flag)
					{
						column.CachedThickness = column.Thickness;
					}
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, flag2);
				}
			}
			else if (column.Thickness != column.CachedThickness && flag)
			{
				column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if (!flag2)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, true);
				}
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				}
			}
			DataGridViewAutoSizeColumnModeEventHandler dataGridViewAutoSizeColumnModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED] as DataGridViewAutoSizeColumnModeEventHandler;
			if (dataGridViewAutoSizeColumnModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentNullException">The value of the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> property of <paramref name="e" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.ArgumentException">The number of entries in the array returned by the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> property of <paramref name="e" /> is not equal to the number of columns in the control.</exception>
		// Token: 0x060017D7 RID: 6103 RVA: 0x000643B4 File Offset: 0x000625B4
		protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e)
		{
			DataGridViewAutoSizeColumnMode[] previousModes = e.PreviousModes;
			if (previousModes == null)
			{
				throw new ArgumentNullException("e.PreviousModes");
			}
			if (previousModes.Length != this.Columns.Count)
			{
				throw new ArgumentException(SR.GetString("DataGridView_PreviousModesHasWrongLength"));
			}
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Visible)
				{
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
					DataGridViewAutoSizeColumnMode dataGridViewAutoSizeColumnMode = previousModes[dataGridViewColumn.Index];
					bool flag = dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.None && dataGridViewAutoSizeColumnMode > DataGridViewAutoSizeColumnMode.NotSet;
					if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || dataGridViewAutoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.dataGridViewState2[67108864] = true;
					}
					if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
					{
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							if (!flag)
							{
								dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
							}
							this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None);
						}
					}
					else if (dataGridViewColumn.Thickness != dataGridViewColumn.CachedThickness && flag)
					{
						dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
					}
				}
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode2 = dataGridViewColumn2.InheritedAutoSizeMode;
					if (inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AutoResizeColumnInternal(dataGridViewColumn2.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode2, true);
					}
				}
			}
			DataGridViewAutoSizeColumnsModeEventHandler dataGridViewAutoSizeColumnsModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED] as DataGridViewAutoSizeColumnsModeEventHandler;
			if (dataGridViewAutoSizeColumnsModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnsModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data. </param>
		// Token: 0x060017D8 RID: 6104 RVA: 0x000645D8 File Offset: 0x000627D8
		protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
			{
				this.RestoreRowsCachedThickness();
			}
			else
			{
				if (!e.PreviousModeAutoSized)
				{
					for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
					{
						int height = this.Rows.SharedRow(num).GetHeight(num);
						this.Rows.SharedRow(num).CachedThickness = height;
					}
				}
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017D9 RID: 6105 RVA: 0x00064690 File Offset: 0x00062890
		protected virtual void OnBackgroundColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060017DA RID: 6106 RVA: 0x000646E0 File Offset: 0x000628E0
		internal void OnBandContextMenuStripChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnContextMenuStripChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowContextMenuStripChanged(e2);
		}

		// Token: 0x060017DB RID: 6107 RVA: 0x0006471C File Offset: 0x0006291C
		internal void OnBandDefaultCellStyleChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDefaultCellStyleChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDefaultCellStyleChanged(e2);
		}

		// Token: 0x060017DC RID: 6108 RVA: 0x00064758 File Offset: 0x00062958
		internal void OnBandDividerThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDividerWidthChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDividerHeightChanged(e2);
		}

		// Token: 0x060017DD RID: 6109 RVA: 0x00064794 File Offset: 0x00062994
		internal void OnBandHeaderCellChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnHeaderCellChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeaderCellChanged(e2);
		}

		// Token: 0x060017DE RID: 6110 RVA: 0x000647D0 File Offset: 0x000629D0
		internal void OnBandMinimumThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnMinimumWidthChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowMinimumHeightChanged(e2);
		}

		// Token: 0x060017DF RID: 6111 RVA: 0x0006480C File Offset: 0x00062A0C
		internal void OnBandThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnWidthChanged(e);
				return;
			}
			DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeightChanged(e2);
		}

		// Token: 0x060017E0 RID: 6112 RVA: 0x00064845 File Offset: 0x00062A45
		internal void OnBandThicknessChanging()
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017E1 RID: 6113 RVA: 0x00064860 File Offset: 0x00062A60
		protected override void OnBindingContextChanged(EventArgs e)
		{
			if (this.dataGridViewState2[16777216])
			{
				return;
			}
			this.dataGridViewState2[16777216] = true;
			try
			{
				if (this.dataConnection != null)
				{
					this.CurrentCell = null;
					try
					{
						this.dataConnection.SetDataConnection(this.DataSource, this.DataMember);
					}
					catch (ArgumentException)
					{
						if (base.DesignMode)
						{
							this.DataMember = string.Empty;
							this.RefreshColumnsAndRows();
							return;
						}
						throw;
					}
					this.RefreshColumnsAndRows();
					base.OnBindingContextChanged(e);
					if (this.dataConnection.CurrencyManager != null)
					{
						this.OnDataBindingComplete(ListChangedType.Reset);
					}
				}
				else
				{
					base.OnBindingContextChanged(e);
				}
			}
			finally
			{
				this.dataGridViewState2[16777216] = false;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017E2 RID: 6114 RVA: 0x00064934 File Offset: 0x00062B34
		protected virtual void OnBorderStyleChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CancelRowEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data. </param>
		// Token: 0x060017E3 RID: 6115 RVA: 0x0006497C File Offset: 0x00062B7C
		protected virtual void OnCancelRowEdit(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
				this.CorrectFocus(true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017E4 RID: 6116 RVA: 0x000649CC File Offset: 0x00062BCC
		protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT] as DataGridViewCellCancelEventHandler;
			if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellCancelEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060017E5 RID: 6117 RVA: 0x00064A50 File Offset: 0x00062C50
		protected virtual void OnCellBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060017E6 RID: 6118 RVA: 0x00064AA8 File Offset: 0x00062CA8
		internal void OnCellClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017E7 RID: 6119 RVA: 0x00064AB4 File Offset: 0x00062CB4
		protected virtual void OnCellClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnClickInternal(e);
			}
			else
			{
				cellInternal.OnClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017E8 RID: 6120 RVA: 0x00064B90 File Offset: 0x00062D90
		internal void OnCellCommonChange(int columnIndex, int rowIndex)
		{
			if (columnIndex == -1)
			{
				this.OnRowHeaderGlobalAutoSize(rowIndex);
				return;
			}
			if (rowIndex == -1)
			{
				this.OnColumnHeaderGlobalAutoSize(columnIndex);
				return;
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None);
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			bool flag2 = (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.AllRows) > DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (flag)
			{
				flag2 |= ((inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows) > DataGridViewAutoSizeColumnCriteriaInternal.NotSet);
			}
			bool flag3 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) > DataGridViewAutoSizeRowsMode.None;
			if (flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), !flag2, true);
			}
			if (flag2)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				if (flag3)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
			}
		}

		// Token: 0x060017E9 RID: 6121 RVA: 0x00064C44 File Offset: 0x00062E44
		internal void OnCellContentClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information regarding the cell whose content was clicked.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017EA RID: 6122 RVA: 0x00064C50 File Offset: 0x00062E50
		protected virtual void OnCellContentClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentClickInternal(e);
			}
			else
			{
				cellInternal.OnContentClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017EB RID: 6123 RVA: 0x00064D2C File Offset: 0x00062F2C
		internal void OnCellContentDoubleClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentDoubleClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017EC RID: 6124 RVA: 0x00064D38 File Offset: 0x00062F38
		protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnContentDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017ED RID: 6125 RVA: 0x00064E14 File Offset: 0x00063014
		internal void OnCellContextMenuStripChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellContextMenuStripChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017EE RID: 6126 RVA: 0x00064E30 File Offset: 0x00063030
		protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017EF RID: 6127 RVA: 0x00064EB4 File Offset: 0x000630B4
		internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewCellContextMenuStripNeededEventArgs dataGridViewCellContextMenuStripNeededEventArgs = new DataGridViewCellContextMenuStripNeededEventArgs(columnIndex, rowIndex, contextMenuStrip);
			this.OnCellContextMenuStripNeeded(dataGridViewCellContextMenuStripNeededEventArgs);
			return dataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F0 RID: 6128 RVA: 0x00064ED8 File Offset: 0x000630D8
		protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellContextMenuStripNeededEventHandler dataGridViewCellContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED] as DataGridViewCellContextMenuStripNeededEventHandler;
			if (dataGridViewCellContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellContextMenuStripNeededEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F1 RID: 6129 RVA: 0x00064F5C File Offset: 0x0006315C
		protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.DoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEndEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F2 RID: 6130 RVA: 0x00065038 File Offset: 0x00063238
		protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017F3 RID: 6131 RVA: 0x000650BC File Offset: 0x000632BC
		internal void OnCellEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellEnter(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F4 RID: 6132 RVA: 0x000650F8 File Offset: 0x000632F8
		protected virtual void OnCellEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x060017F5 RID: 6133 RVA: 0x000651AC File Offset: 0x000633AC
		internal void OnCellErrorTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellErrorTextChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than -1 or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is less than -1 or greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F6 RID: 6134 RVA: 0x000651C8 File Offset: 0x000633C8
		protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.UpdateCellErrorText(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x060017F7 RID: 6135 RVA: 0x00065260 File Offset: 0x00063460
		internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText)
		{
			DataGridViewCellErrorTextNeededEventArgs dataGridViewCellErrorTextNeededEventArgs = new DataGridViewCellErrorTextNeededEventArgs(columnIndex, rowIndex, errorText);
			this.OnCellErrorTextNeeded(dataGridViewCellErrorTextNeededEventArgs);
			return dataGridViewCellErrorTextNeededEventArgs.ErrorText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017F8 RID: 6136 RVA: 0x00065284 File Offset: 0x00063484
		protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellErrorTextNeededEventHandler dataGridViewCellErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED] as DataGridViewCellErrorTextNeededEventHandler;
			if (dataGridViewCellErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x060017F9 RID: 6137 RVA: 0x00065308 File Offset: 0x00063508
		internal DataGridViewCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, Type formattedValueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellFormattingEventArgs dataGridViewCellFormattingEventArgs = new DataGridViewCellFormattingEventArgs(columnIndex, rowIndex, val, formattedValueType, cellStyle);
			this.OnCellFormatting(dataGridViewCellFormattingEventArgs);
			return dataGridViewCellFormattingEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellFormatting" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017FA RID: 6138 RVA: 0x0006532C File Offset: 0x0006352C
		protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellFormattingEventHandler dataGridViewCellFormattingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING] as DataGridViewCellFormattingEventHandler;
			if (dataGridViewCellFormattingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellFormattingEventHandler(this, e);
			}
		}

		// Token: 0x060017FB RID: 6139 RVA: 0x000653B0 File Offset: 0x000635B0
		internal void OnCellLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellLeave(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017FC RID: 6140 RVA: 0x000653EC File Offset: 0x000635EC
		protected virtual void OnCellLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017FD RID: 6141 RVA: 0x000654A0 File Offset: 0x000636A0
		protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseClickInternal(e);
			}
			this.dataGridViewState2[8388608] = false;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x060017FE RID: 6142 RVA: 0x00065590 File Offset: 0x00063790
		protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseDoubleClickInternal(e);
			}
			this.dataGridViewState2[8388608] = true;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060017FF RID: 6143 RVA: 0x00065680 File Offset: 0x00063880
		protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			Keys modifierKeys = Control.ModifierKeys;
			bool isControlDown = (modifierKeys & Keys.Control) == Keys.Control && (modifierKeys & Keys.Alt) == Keys.None;
			bool isShiftDown = (modifierKeys & Keys.Shift) == Keys.Shift;
			bool flag = (modifierKeys & Keys.Alt) == Keys.Alt;
			Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
			{
				DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
				if (typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft <= 3 || typeInternal - DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft <= 7)
				{
					this.dataGridViewOper[8388608] = (e.Clicks == 1);
				}
			}
			try
			{
				if (e.RowIndex >= 0 && cellInternal.MouseDownUnsharesRowInternal(e))
				{
					DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
					this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDownInternal(e);
				}
				else
				{
					cellInternal.OnMouseDownInternal(e);
				}
				DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN] as DataGridViewCellMouseEventHandler;
				if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellMouseEventHandler(this, e);
				}
				if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
				{
					switch (hitTestInfo.typeInternal)
					{
					case DataGridView.DataGridViewHitTestTypeInternal.Cell:
						this.OnCellMouseDown(hitTestInfo, isShiftDown, isControlDown);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
					case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
						if (flag && this.AllowUserToOrderColumns && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
						{
							this.BeginColumnRelocation(point.X, hitTestInfo.col);
						}
						else
						{
							this.OnColumnHeaderMouseDown(hitTestInfo, isShiftDown, isControlDown);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
						this.OnRowHeaderMouseDown(hitTestInfo, isShiftDown, isControlDown);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
					{
						int index = (hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol;
						if (e.Clicks == 1)
						{
							this.BeginMouseColumnResize(point.X, hitTestInfo.mouseBarOffset, index);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
					{
						int index2 = (hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow;
						if (e.Clicks == 1)
						{
							this.BeginRowResize(point.Y, hitTestInfo.mouseBarOffset, index2);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
						this.OnTopLeftHeaderMouseDown();
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						if (e.Clicks == 1)
						{
							this.BeginRowHeadersResize(point.X, hitTestInfo.mouseBarOffset);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						if (e.Clicks == 1)
						{
							this.BeginColumnHeadersResize(point.Y, hitTestInfo.mouseBarOffset);
						}
						break;
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			finally
			{
				this.dataGridViewOper[8388608] = false;
			}
		}

		// Token: 0x06001800 RID: 6144 RVA: 0x00065A18 File Offset: 0x00063C18
		private void OnCellMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row))
			{
				Point right = this.ptCurrentCell;
				if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row, this.ptCurrentCell.Y != hti.row))
				{
					return;
				}
				if (this.ptCurrentCell != right)
				{
					isControlDown = (isShiftDown = false);
				}
			}
			if (hti.col >= this.Columns.Count)
			{
				DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (this.ptCurrentCell.X != -1 || lastColumn == null)
				{
					return;
				}
				hti.col = lastColumn.Index;
			}
			if (hti.row >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (this.ptCurrentCell.X != -1 || lastRow == -1)
				{
					return;
				}
				hti.row = lastRow;
			}
			bool flag = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				{
					if (isControlDown && this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if ((!this.MultiSelect || !isControlDown) && (!this.MultiSelect || !isShiftDown))
						{
							this.RemoveIndividuallySelectedCells(hti.col, hti.row);
						}
						if (this.MultiSelect)
						{
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag2 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.FullRowSelect:
				{
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag3 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag3 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag4 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag4 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
							}
							finally
							{
								if (flag4)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag3)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					bool flag5 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				{
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag6 = false;
						this.trackColumn = hti.col;
						this.trackColumnEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
						{
							flag6 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int j = 0;
							bool flag7 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag7 = true;
							}
							try
							{
								while (j < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[j] != hti.col)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
									}
									else
									{
										j++;
									}
								}
							}
							finally
							{
								if (flag7)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[4] = true;
						}
						if (flag6)
						{
							if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
							{
								this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
							}
							else
							{
								this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
							}
						}
						else if (!this.selectedBandIndexes.Contains(hti.col))
						{
							this.SetSelectedColumnCore(hti.col, true);
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					bool flag8 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					if (isControlDown && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag9 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag9 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag9)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, hti.col, this.ptAnchorCell.Y, ref y2, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag10 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					if (isControlDown && (this.Columns[hti.col].Selected || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag11 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag11 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag11)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x3 = this.ptCurrentCell.X;
								int y3 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, hti.col, this.ptAnchorCell.Y, ref y3, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag12 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001801 RID: 6145 RVA: 0x00066504 File Offset: 0x00064704
		protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = e.ColumnIndex;
			this.ptMouseEnteredCell.Y = e.RowIndex;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseEnterUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseEnterInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseEnterInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001802 RID: 6146 RVA: 0x00066614 File Offset: 0x00064814
		protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = -2;
			this.ptMouseEnteredCell.Y = -2;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseLeaveUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseLeaveInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseLeaveInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseMove" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001803 RID: 6147 RVA: 0x0006671C File Offset: 0x0006491C
		protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseMoveUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseMoveInternal(e);
			}
			else
			{
				cellInternal.OnMouseMoveInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
			if (!this.dataGridViewState1[2048] && !this.IsMouseOperationActive() && this.AllowUserToOrderColumns && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect && e.Button == MouseButtons.Left && this.ptMouseDownCell.Y == -1 && this.ptMouseDownCell.X >= 0 && this.ptMouseDownCell.X < this.Columns.Count)
			{
				Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
				if ((typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader || typeInternal == DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft || typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft <= 1) && (Math.Abs(this.ptMouseDownGridCoord.X - point.X) >= DataGridView.DragSize.Width || Math.Abs(this.ptMouseDownGridCoord.Y - point.Y) >= DataGridView.DragSize.Height))
				{
					this.BeginColumnRelocation(this.ptMouseDownGridCoord.X, this.ptMouseDownCell.X);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001804 RID: 6148 RVA: 0x0006693C File Offset: 0x00064B3C
		protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseUpUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseUpInternal(e);
			}
			else
			{
				cellInternal.OnMouseUpInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellPainting" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001805 RID: 6149 RVA: 0x00066A18 File Offset: 0x00064C18
		protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellPaintingEventHandler dataGridViewCellPaintingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING] as DataGridViewCellPaintingEventHandler;
			if (dataGridViewCellPaintingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellPaintingEventHandler(this, e);
			}
		}

		// Token: 0x06001806 RID: 6150 RVA: 0x00066A9C File Offset: 0x00064C9C
		internal DataGridViewCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, Type valueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = new DataGridViewCellParsingEventArgs(rowIndex, columnIndex, formattedValue, valueType, cellStyle);
			this.OnCellParsing(dataGridViewCellParsingEventArgs);
			return dataGridViewCellParsingEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellParsing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001807 RID: 6151 RVA: 0x00066AC0 File Offset: 0x00064CC0
		protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellParsingEventHandler dataGridViewCellParsingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPARSING] as DataGridViewCellParsingEventHandler;
			if (dataGridViewCellParsingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellParsingEventHandler(this, e);
			}
		}

		// Token: 0x06001808 RID: 6152 RVA: 0x00066B44 File Offset: 0x00064D44
		private void OnCellSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			int x = this.ptCurrentCell.X;
			int y = this.ptCurrentCell.Y;
			if ((hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y) && !this.CommitEditForOperation(hti.col, hti.row, true))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptAnchorCell.X != -1 && !this.IsInnerCellOutOfBounds(hti.col, hti.row))
				{
					this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
					if (hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y)
					{
						bool flag = this.SetCurrentCellAddressCore(hti.col, hti.row, false, false, false);
					}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStateChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" /> that contains the event data. </param>
		// Token: 0x06001809 RID: 6153 RVA: 0x00066C64 File Offset: 0x00064E64
		protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e)
		{
			DataGridViewCell cell = e.Cell;
			if (e.StateChanged == DataGridViewElementStates.Selected && this.inBulkPaintCount == 0)
			{
				this.InvalidateCellPrivate(cell);
			}
			DataGridViewCellStateChangedEventHandler dataGridViewCellStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED] as DataGridViewCellStateChangedEventHandler;
			if (dataGridViewCellStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && this.ptCurrentCell.X == cell.ColumnIndex && this.ptCurrentCell.Y == cell.RowIndex && cell.RowIndex > -1 && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!cell.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x0600180A RID: 6154 RVA: 0x00066D74 File Offset: 0x00064F74
		internal void OnCellStyleChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellStyleChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x0600180B RID: 6155 RVA: 0x00066D90 File Offset: 0x00064F90
		protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x0600180C RID: 6156 RVA: 0x00066E28 File Offset: 0x00065028
		internal void OnCellStyleContentChanged(DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCellStyle.DataGridViewCellStylePropertyInternal property)
		{
			if (property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Font)
			{
				if (property == DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor)
				{
					if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[1024])
					{
						this.dataGridViewState1[1024] = false;
					}
				}
			}
			else
			{
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[33554432])
				{
					this.dataGridViewState1[33554432] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.ColumnHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[67108864])
				{
					this.dataGridViewState1[67108864] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.RowHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[134217728])
				{
					this.dataGridViewState1[134217728] = false;
				}
			}
			DataGridViewCellStyleContentChangedEventArgs e = new DataGridViewCellStyleContentChangedEventArgs(dataGridViewCellStyle, property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Color && property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor);
			this.OnCellStyleContentChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" /> that contains the event data. </param>
		// Token: 0x0600180D RID: 6157 RVA: 0x00066F18 File Offset: 0x00065118
		protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e)
		{
			bool flag = false;
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Cell) == DataGridViewCellStyleScopes.Cell && (e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.None)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnGlobalAutoSize();
				}
				else
				{
					base.Invalidate();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Column) == DataGridViewCellStyleScopes.Column)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnColumnsGlobalAutoSize();
				}
				else
				{
					this.InvalidateData();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Row) == DataGridViewCellStyleScopes.Row && (e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.None && (e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.None)
			{
				this.InvalidateData();
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
					}
					this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					}
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.DataGridView)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.ColumnHeaders) == DataGridViewCellStyleScopes.ColumnHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.RowHeaders) == DataGridViewCellStyleScopes.RowHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.Rows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.AlternatingRows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (flag && this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			DataGridViewCellStyleContentChangedEventHandler dataGridViewCellStyleContentChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED] as DataGridViewCellStyleContentChangedEventHandler;
			if (dataGridViewCellStyleContentChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStyleContentChangedEventHandler(this, e);
			}
		}

		// Token: 0x0600180E RID: 6158 RVA: 0x0006713C File Offset: 0x0006533C
		internal void OnCellToolTipTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellToolTipTextChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information about the cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x0600180F RID: 6159 RVA: 0x00067158 File Offset: 0x00065358
		protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001810 RID: 6160 RVA: 0x000671DC File Offset: 0x000653DC
		internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText)
		{
			DataGridViewCellToolTipTextNeededEventArgs dataGridViewCellToolTipTextNeededEventArgs = new DataGridViewCellToolTipTextNeededEventArgs(columnIndex, rowIndex, toolTipText);
			this.OnCellToolTipTextNeeded(dataGridViewCellToolTipTextNeededEventArgs);
			return dataGridViewCellToolTipTextNeededEventArgs.ToolTipText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001811 RID: 6161 RVA: 0x00067200 File Offset: 0x00065400
		protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellToolTipTextNeededEventHandler dataGridViewCellToolTipTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED] as DataGridViewCellToolTipTextNeededEventHandler;
			if (dataGridViewCellToolTipTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellToolTipTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06001812 RID: 6162 RVA: 0x00067284 File Offset: 0x00065484
		internal void OnCellValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellValidated(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidated" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001813 RID: 6163 RVA: 0x000672C0 File Offset: 0x000654C0
		protected virtual void OnCellValidated(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001814 RID: 6164 RVA: 0x0006737C File Offset: 0x0006557C
		internal bool OnCellValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context)
		{
			DataGridViewCell dataGridViewCell2 = (dataGridViewCell == null) ? this.CurrentCellInternal : dataGridViewCell;
			DataGridViewCellStyle inheritedStyle = dataGridViewCell2.GetInheritedStyle(null, rowIndex, false);
			object valueInternal = dataGridViewCell2.GetValueInternal(rowIndex);
			object editedFormattedValue = dataGridViewCell2.GetEditedFormattedValue(valueInternal, rowIndex, ref inheritedStyle, context);
			DataGridViewCellValidatingEventArgs dataGridViewCellValidatingEventArgs = new DataGridViewCellValidatingEventArgs(columnIndex, rowIndex, editedFormattedValue);
			this.OnCellValidating(dataGridViewCellValidatingEventArgs);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
				}
				else
				{
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
			return dataGridViewCellValidatingEventArgs.Cancel;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001815 RID: 6165 RVA: 0x000673FC File Offset: 0x000655FC
		protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				this.dataGridViewOper[32768] = true;
				DataGridViewCellValidatingEventHandler dataGridViewCellValidatingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING] as DataGridViewCellValidatingEventHandler;
				if (dataGridViewCellValidatingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellValidatingEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.dataGridViewOper[32768] = false;
			}
		}

		// Token: 0x06001816 RID: 6166 RVA: 0x000674DC File Offset: 0x000656DC
		internal void OnCellValueChangedInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellValueChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001817 RID: 6167 RVA: 0x000674E8 File Offset: 0x000656E8
		protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001818 RID: 6168 RVA: 0x00067580 File Offset: 0x00065780
		internal object OnCellValueNeeded(int columnIndex, int rowIndex)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, null);
			this.OnCellValueNeeded(cellValueEventArgs);
			return cellValueEventArgs.Value;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001819 RID: 6169 RVA: 0x000675AC File Offset: 0x000657AC
		protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x0600181A RID: 6170 RVA: 0x00067644 File Offset: 0x00065844
		internal void OnCellValuePushed(int columnIndex, int rowIndex, object value)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, value);
			this.OnCellValuePushed(cellValueEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValuePushed" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x0600181B RID: 6171 RVA: 0x00067668 File Offset: 0x00065868
		protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x0600181C RID: 6172 RVA: 0x00067700 File Offset: 0x00065900
		internal void OnClearedRows()
		{
			foreach (object obj in this.lstRows)
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)obj;
				if (dataGridViewRow.Displayed)
				{
					dataGridViewRow.DisplayedInternal = false;
					DataGridViewRowStateChangedEventArgs e = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
					this.OnRowStateChanged(-1, e);
				}
			}
			this.lstRows.Clear();
		}

		// Token: 0x0600181D RID: 6173 RVA: 0x0006777C File Offset: 0x0006597C
		internal void OnClearingColumns()
		{
			this.CurrentCell = null;
			this.Rows.ClearInternal(false);
			this.sortedColumn = null;
			this.sortOrder = SortOrder.None;
		}

		// Token: 0x0600181E RID: 6174 RVA: 0x000677A0 File Offset: 0x000659A0
		internal void OnClearingRows()
		{
			this.lstRows.Clear();
			int num = this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
			if (num > 0)
			{
				this.lstRows.Capacity = num;
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Displayed);
				while (num > 0 && num2 != -1)
				{
					this.lstRows.Add(this.Rows[num2]);
					num--;
					if (num > 0)
					{
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Displayed);
					}
				}
			}
			this.CurrentCell = null;
			this.newRowIndex = -1;
			this.dataGridViewState2[262144] = (this.selectedBandIndexes.Count > 0 || this.individualSelectedCells.Count > 0);
			this.selectedBandIndexes.Clear();
			if (this.selectedBandSnapshotIndexes != null)
			{
				this.selectedBandSnapshotIndexes.Clear();
			}
			this.individualSelectedCells.Clear();
			this.individualReadOnlyCells.Clear();
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnAdded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600181F RID: 6175 RVA: 0x00067898 File Offset: 0x00065A98
		protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001820 RID: 6176 RVA: 0x00067900 File Offset: 0x00065B00
		internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea)
		{
			if (this.DataSource != null && !this.dataGridViewOper[1024])
			{
				if (ccea.Action == CollectionChangeAction.Add)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)ccea.Element;
					if (dataGridViewColumn.DataPropertyName.Length != 0)
					{
						this.MapDataGridViewColumnToDataBoundField(dataGridViewColumn);
					}
				}
				else if (ccea.Action == CollectionChangeAction.Refresh)
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						if (this.Columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(this.Columns[i]);
						}
					}
				}
			}
			this.ResetUIState(false, false);
		}

		// Token: 0x06001821 RID: 6177 RVA: 0x000679A8 File Offset: 0x00065BA8
		internal void OnColumnCollectionChanged_PostNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (this.Columns.Count != 0 && this.Rows.Count == 0)
			{
				if (this.DataSource != null && !this.dataGridViewOper[1024])
				{
					this.RefreshRows(true);
				}
				else if (this.AllowUserToAddRowsInternal)
				{
					this.AddNewRow(false);
				}
			}
			if (this.AutoSize && (dataGridViewColumn == null || dataGridViewColumn.Visible))
			{
				LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
			}
		}

		// Token: 0x06001822 RID: 6178 RVA: 0x00067A25 File Offset: 0x00065C25
		internal void OnColumnCommonChange(int columnIndex)
		{
			this.OnColumnGlobalAutoSize(columnIndex);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001823 RID: 6179 RVA: 0x00067A30 File Offset: 0x00065C30
		protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001824 RID: 6180 RVA: 0x00067A96 File Offset: 0x00065C96
		internal void OnColumnDataPropertyNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnDataPropertyNameChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001825 RID: 6181 RVA: 0x00067AA4 File Offset: 0x00065CA4
		protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.DataSource != null && e.Column.DataPropertyName.Length != 0 && !this.dataGridViewOper[1024])
			{
				this.MapDataGridViewColumnToDataBoundField(e.Column);
			}
			else if (this.DataSource != null && e.Column.DataPropertyName.Length == 0 && e.Column.IsDataBound)
			{
				e.Column.IsDataBoundInternal = false;
				e.Column.BoundColumnIndex = -1;
				e.Column.BoundColumnConverter = null;
				this.InvalidateColumnInternal(e.Column.Index);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001826 RID: 6182 RVA: 0x00067BA0 File Offset: 0x00065DA0
		protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001827 RID: 6183 RVA: 0x00067C18 File Offset: 0x00065E18
		internal void OnColumnDisplayIndexChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnDisplayIndexChanged(e);
		}

		// Token: 0x06001828 RID: 6184 RVA: 0x00067C34 File Offset: 0x00065E34
		internal void OnColumnDisplayIndexChanging(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (this.dataGridViewOper[2048])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterDisplayIndexWithinAdjustments"));
			}
			this.CorrectColumnFrozenStatesForMove(dataGridViewColumn, newDisplayIndex);
			try
			{
				this.dataGridViewOper[2048] = true;
				if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
				{
					using (IEnumerator enumerator = this.Columns.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							object obj = enumerator.Current;
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (newDisplayIndex <= dataGridViewColumn2.DisplayIndex && dataGridViewColumn2.DisplayIndex < dataGridViewColumn.DisplayIndex)
							{
								dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
								dataGridViewColumn2.DisplayIndexHasChanged = true;
							}
						}
						return;
					}
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn.DisplayIndex < dataGridViewColumn3.DisplayIndex && dataGridViewColumn3.DisplayIndex <= newDisplayIndex)
					{
						dataGridViewColumn3.DisplayIndexInternal = dataGridViewColumn3.DisplayIndex - 1;
						dataGridViewColumn3.DisplayIndexHasChanged = true;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001829 RID: 6185 RVA: 0x00067D8C File Offset: 0x00065F8C
		protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x0600182A RID: 6186 RVA: 0x00067DF4 File Offset: 0x00065FF4
		internal void OnColumnDisplayIndexChanged_PreNotification()
		{
			this.Columns.InvalidateCachedColumnsOrder();
			this.PerformLayoutPrivate(false, false, true, false);
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			base.Invalidate(Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data));
		}

		// Token: 0x0600182B RID: 6187 RVA: 0x00067E48 File Offset: 0x00066048
		internal void OnColumnDisplayIndexChanged_PostNotification()
		{
			this.FlushDisplayIndexChanged(true);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" /> that contains the event data. </param>
		// Token: 0x0600182C RID: 6188 RVA: 0x00067E54 File Offset: 0x00066054
		protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e)
		{
			DataGridViewColumnDividerDoubleClickEventHandler dataGridViewColumnDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK] as DataGridViewColumnDividerDoubleClickEventHandler;
			if (dataGridViewColumnDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.ColumnIndex < this.Columns.Count)
			{
				if (e.ColumnIndex == -1)
				{
					this.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true, true);
					return;
				}
				DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = this.Columns[e.ColumnIndex].InheritedAutoSizeMode;
				if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(e.ColumnIndex, DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
					return;
				}
				this.AutoResizeColumnInternal(e.ColumnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600182D RID: 6189 RVA: 0x00067F18 File Offset: 0x00066118
		protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x0600182E RID: 6190 RVA: 0x00067F8F File Offset: 0x0006618F
		internal void OnColumnFillWeightChanged(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, true, false, false);
			}
		}

		// Token: 0x0600182F RID: 6191 RVA: 0x00067FB8 File Offset: 0x000661B8
		internal void OnColumnFillWeightChanging(DataGridViewColumn dataGridViewColumn, float fillWeight)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) - dataGridViewColumn.FillWeight + fillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[]
				{
					ushort.MaxValue.ToString(CultureInfo.CurrentCulture)
				}));
			}
		}

		// Token: 0x06001830 RID: 6192 RVA: 0x00068028 File Offset: 0x00066228
		private void OnColumnGlobalAutoSize(int columnIndex)
		{
			if (!this.Columns[columnIndex].Visible)
			{
				return;
			}
			this.InvalidateColumnInternal(columnIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag);
			}
			if (!flag)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
			}
			if (!flag && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001831 RID: 6193 RVA: 0x000680C4 File Offset: 0x000662C4
		protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnHeaderGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001832 RID: 6194 RVA: 0x0006813C File Offset: 0x0006633C
		private void OnColumnHeaderGlobalAutoSize(int columnIndex)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(columnIndex, -1);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
			bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, flag);
			}
			if (!flag)
			{
				bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag2);
				if (!flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.</exception>
		// Token: 0x06001833 RID: 6195 RVA: 0x000681D8 File Offset: 0x000663D8
		protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[e.ColumnIndex];
				if (this.CanSort(dataGridViewColumn))
				{
					ListSortDirection direction = ListSortDirection.Ascending;
					if (this.sortedColumn == dataGridViewColumn && this.sortOrder == SortOrder.Ascending)
					{
						direction = ListSortDirection.Descending;
					}
					if (this.DataSource == null || (this.DataSource != null && this.dataConnection.List is IBindingList && ((IBindingList)this.dataConnection.List).SupportsSorting && dataGridViewColumn.IsDataBound))
					{
						this.Sort(dataGridViewColumn, direction);
					}
				}
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the cell and the position of the mouse pointer.</param>
		// Token: 0x06001834 RID: 6196 RVA: 0x000682C0 File Offset: 0x000664C0
		protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06001835 RID: 6197 RVA: 0x00068308 File Offset: 0x00066508
		private void OnColumnHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow > -1 && hti.col != this.ptCurrentCell.X)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, firstRow != this.ptCurrentCell.Y, firstRow != this.ptCurrentCell.Y, false, this.EditMode > DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (firstRow != y && y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						if (!this.IsColumnOutOfBounds(hti.col))
						{
							bool flag2 = false;
							this.trackColumn = hti.col;
							this.trackColumnEdge = -1;
							if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
							{
								flag2 = true;
							}
							if (!this.MultiSelect || !isControlDown || isShiftDown)
							{
								int i = 0;
								bool flag3 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag3 = true;
								}
								try
								{
									while (i < this.selectedBandIndexes.Count)
									{
										if (this.selectedBandIndexes[i] != hti.col)
										{
											this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
										}
										else
										{
											i++;
										}
									}
									if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
									{
										this.RemoveIndividuallySelectedCells();
									}
								}
								finally
								{
									if (flag3)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.MultiSelect && this.dataGridViewOper[512])
							{
								this.dataGridViewOper[4] = true;
							}
							if (flag2)
							{
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
								}
								else
								{
									this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
								}
							}
							else if (!this.selectedBandIndexes.Contains(hti.col))
							{
								this.SetSelectedColumnCore(hti.col, true);
							}
							if (firstRow != -1)
							{
								if (hti.col != this.ptCurrentCell.X)
								{
									if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
									{
										bool flag4 = this.ScrollIntoView(hti.col, firstRow, false);
										if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
										{
											flag4 = this.SetCurrentCellAddressCore(hti.col, firstRow, !isShiftDown, false, true);
										}
									}
								}
								else if (-1 != this.ptCurrentCell.X)
								{
									bool flag5 = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
								}
							}
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001836 RID: 6198 RVA: 0x0006870C File Offset: 0x0006690C
		protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001837 RID: 6199 RVA: 0x00068764 File Offset: 0x00066964
		protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.ColumnHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnColumnHeadersGlobalAutoSize();
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001838 RID: 6200 RVA: 0x00068800 File Offset: 0x00066A00
		private void OnColumnHeadersGlobalAutoSize()
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			bool flag2 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(flag, false);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, false);
			}
			bool flag3 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, false);
			if (!flag || flag3)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001839 RID: 6201 RVA: 0x0006889C File Offset: 0x00066A9C
		protected virtual void OnColumnHeadersHeightChanged(EventArgs e)
		{
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, false, false);
			}
			this.UpdateMouseEnteredCell(null, null);
			this.OnColumnHeadersGlobalAutoSize();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data. </param>
		// Token: 0x0600183A RID: 6202 RVA: 0x00068904 File Offset: 0x00066B04
		protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedColumnHeadersHeight = this.ColumnHeadersHeight;
				}
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.ColumnHeadersHeight = this.cachedColumnHeadersHeight;
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		// Token: 0x0600183B RID: 6203 RVA: 0x00068988 File Offset: 0x00066B88
		internal void OnColumnHidden(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.Displayed)
			{
				dataGridViewColumn.DisplayedInternal = false;
				DataGridViewColumnStateChangedEventArgs e = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, DataGridViewElementStates.Displayed);
				this.OnColumnStateChanged(e);
			}
		}

		// Token: 0x0600183C RID: 6204 RVA: 0x000689B4 File Offset: 0x00066BB4
		internal void OnColumnMinimumWidthChanging(DataGridViewColumn dataGridViewColumn, int minimumWidth)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.Width < minimumWidth)
			{
				try
				{
					this.dataGridViewState2[67108864] = true;
					dataGridViewColumn.DesiredMinimumWidth = minimumWidth;
					this.PerformLayoutPrivate(false, true, true, false);
				}
				finally
				{
					dataGridViewColumn.DesiredMinimumWidth = 0;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600183D RID: 6205 RVA: 0x00068A10 File Offset: 0x00066C10
		protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (e.Column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x0600183E RID: 6206 RVA: 0x00068A90 File Offset: 0x00066C90
		internal void OnColumnNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnNameChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnNameChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600183F RID: 6207 RVA: 0x00068AAC File Offset: 0x00066CAC
		protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell && column.HeaderCell.Value is string && string.Compare((string)column.HeaderCell.Value, column.Name, false, CultureInfo.InvariantCulture) == 0)
			{
				this.InvalidateCellPrivate(column.Index, -1);
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001840 RID: 6208 RVA: 0x00068BF9 File Offset: 0x00066DF9
		internal void OnColumnRemoved(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnRemoved(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnRemoved" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		// Token: 0x06001841 RID: 6209 RVA: 0x00068C08 File Offset: 0x00066E08
		protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e)
		{
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001842 RID: 6210 RVA: 0x00068C50 File Offset: 0x00066E50
		private void OnColumnSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X && !this.CommitEditForOperation(hti.col, this.ptCurrentCell.Y, true))
			{
				return;
			}
			if (this.IsColumnOutOfBounds(hti.col))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col))
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge) && (this.Columns.DisplayInOrder(this.trackColumn, hti.col) || hti.col == this.trackColumn))
				{
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn2.Index, this.trackColumnEdge, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(this.trackColumn, hti.col))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn3.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col) && (this.Columns.DisplayInOrder(hti.col, this.trackColumn) || hti.col == this.trackColumn))
				{
					DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, previousColumn2.Index, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn3.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn.Index, this.trackColumnEdge, false);
					dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, dataGridViewColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, hti.col) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, dataGridViewColumn2.Index, false);
					dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn2.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X)
			{
				if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(hti.col))
				{
					return;
				}
				bool flag = this.SetCurrentCellAddressCore(hti.col, this.ptCurrentCell.Y, false, false, false);
			}
		}

		// Token: 0x06001843 RID: 6211 RVA: 0x000691FC File Offset: 0x000673FC
		private void OnColumnsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			bool flag2 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, flag);
			if (!flag)
			{
				if (flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			}
		}

		// Token: 0x06001844 RID: 6212 RVA: 0x00069250 File Offset: 0x00067450
		internal void OnColumnSortModeChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnSortModeChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001845 RID: 6213 RVA: 0x0006926C File Offset: 0x0006746C
		protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell)
			{
				if (column.SortMode == DataGridViewColumnSortMode.NotSortable || (column.SortMode == DataGridViewColumnSortMode.Programmatic && this.SortedColumn == column))
				{
					column.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidCastException">The column changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001846 RID: 6214 RVA: 0x00069398 File Offset: 0x00067598
		protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!column.Visible && column.Displayed)
						{
							column.DisplayedInternal = false;
						}
						this.dataGridViewState2[67108864] = true;
						this.PerformLayoutPrivate(false, false, true, true);
						bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible);
						bool flag2 = false;
						DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							int thicknessInternal = column.ThicknessInternal;
							if (column.Visible)
							{
								column.CachedThickness = thicknessInternal;
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, !flag);
								flag2 = true;
							}
							else if (thicknessInternal != column.CachedThickness)
							{
								column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
							}
						}
						if (flag)
						{
							if (column.Visible)
							{
								this.AdjustExpandingRows(column.Index, true);
							}
							else
							{
								this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
							}
							if (flag2)
							{
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
							}
						}
						else
						{
							base.Invalidate();
						}
					}
				}
				else if (column.Visible && this.inBulkPaintCount == 0)
				{
					this.InvalidateColumnInternal(column.Index);
				}
			}
			else if (column.Visible)
			{
				if (column.Frozen)
				{
					if (this.horizontalOffset >= column.Thickness)
					{
						this.horizontalOffset -= column.Thickness;
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset = (this.negOffset = 0);
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewColumnStateChangedEventHandler dataGridViewColumnStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED] as DataGridViewColumnStateChangedEventHandler;
			if (dataGridViewColumnStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && column.Index == this.ptCurrentCell.X && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!column.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06001847 RID: 6215 RVA: 0x0006966C File Offset: 0x0006786C
		internal void OnColumnToolTipTextChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnToolTipTextChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains information about the column.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001848 RID: 6216 RVA: 0x0006967C File Offset: 0x0006787C
		protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001849 RID: 6217 RVA: 0x000696E4 File Offset: 0x000678E4
		protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.Columns.InvalidateCachedColumnsWidths();
			if (e.Column.Visible && base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleHorizontalBorderAdded)
				{
					int num = rectangle.Y;
					rectangle.Y = num - 1;
					num = rectangle.Height;
					rectangle.Height = num + 1;
				}
				if (rectangle.Width > 0 && rectangle.Height > 0)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(e.Column.Index);
					if (this.RightToLeftInternal)
					{
						rectangle.Width -= rectangle.Right - columnXFromIndex;
					}
					else
					{
						rectangle.Width -= columnXFromIndex - rectangle.X;
						rectangle.X = columnXFromIndex;
					}
					if (rectangle.Width > 0 && rectangle.Height > 0)
					{
						base.Invalidate(rectangle);
					}
				}
				if (this.editingControl != null)
				{
					this.PositionEditingControl(this.ptCurrentCell.X != e.Column.Index, true, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				if (this.AutoSize)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
			if (!this.InAdjustFillingColumns)
			{
				this.OnColumnGlobalAutoSize(e.Column.Index);
			}
		}

		// Token: 0x0600184A RID: 6218 RVA: 0x000698B8 File Offset: 0x00067AB8
		internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick)
		{
			if (this.ptMouseDownCell.X == -2 || (this.dataGridViewState2[268435456] && this.ptMouseDownCell.X == columnIndex && this.ptMouseDownCell.Y == rowIndex && (this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (columnIndex == this.ptCurrentCell.X && rowIndex == this.ptCurrentCell.Y))))
			{
				DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				if (doubleClick)
				{
					this.OnCellContentDoubleClick(e);
					return;
				}
				this.OnCellContentClick(e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x0600184B RID: 6219 RVA: 0x00069954 File Offset: 0x00067B54
		protected virtual void OnCurrentCellChanged(EventArgs e)
		{
			base.VerifyImeRestrictedModeChanged();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600184C RID: 6220 RVA: 0x000699A4 File Offset: 0x00067BA4
		protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e)
		{
			if (this.RowHeadersVisible && this.ShowEditingIcon)
			{
				this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
			}
			if (this.IsCurrentCellDirty && this.newRowIndex == this.ptCurrentCell.Y)
			{
				this.newRowIndex = -1;
				this.AddNewRow(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event and updates the <see cref="P:System.Windows.Forms.DataGridView.UserSetCursor" /> property if the cursor was changed in user code.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600184D RID: 6221 RVA: 0x00069A37 File Offset: 0x00067C37
		protected override void OnCursorChanged(EventArgs e)
		{
			base.OnCursorChanged(e);
			if (!this.dataGridViewState2[2097152])
			{
				this.oldCursor = this.Cursor;
			}
		}

		// Token: 0x0600184E RID: 6222 RVA: 0x00069A5E File Offset: 0x00067C5E
		internal void OnDataBindingComplete(ListChangedType listChangedType)
		{
			this.OnDataBindingComplete(new DataGridViewBindingCompleteEventArgs(listChangedType));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" /> that contains the event data.</param>
		// Token: 0x0600184F RID: 6223 RVA: 0x00069A6C File Offset: 0x00067C6C
		protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
		{
			DataGridViewBindingCompleteEventHandler dataGridViewBindingCompleteEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE] as DataGridViewBindingCompleteEventHandler;
			if (dataGridViewBindingCompleteEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewBindingCompleteEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event. </summary>
		/// <param name="displayErrorDialogIfNoHandler">
		///       <see langword="true" /> to display an error dialog box if there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event.</param>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" /> that contains the event data. </param>
		// Token: 0x06001850 RID: 6224 RVA: 0x00069AB4 File Offset: 0x00067CB4
		protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e)
		{
			DataGridViewDataErrorEventHandler dataGridViewDataErrorEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAERROR] as DataGridViewDataErrorEventHandler;
			if (!this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				if (dataGridViewDataErrorEventHandler == null)
				{
					if (displayErrorDialogIfNoHandler)
					{
						string @string;
						if (e.Exception == null)
						{
							@string = SR.GetString("DataGridView_ErrorMessageText_NoException");
						}
						else
						{
							@string = SR.GetString("DataGridView_ErrorMessageText_WithException", new object[]
							{
								e.Exception
							});
						}
						if (this.RightToLeftInternal)
						{
							MessageBox.Show(@string, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
						}
						else
						{
							MessageBox.Show(@string, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
						}
						this.CorrectFocus(true);
						return;
					}
				}
				else
				{
					dataGridViewDataErrorEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
		}

		// Token: 0x06001851 RID: 6225 RVA: 0x00069B7B File Offset: 0x00067D7B
		internal void OnDataErrorInternal(DataGridViewDataErrorEventArgs e)
		{
			this.OnDataError(!base.DesignMode, e);
		}

		// Token: 0x06001852 RID: 6226 RVA: 0x00069B90 File Offset: 0x00067D90
		internal void OnDataGridViewElementStateChanged(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnStateChangedEventArgs e = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, elementState);
				this.OnColumnStateChanged(e);
			}
			else
			{
				DataGridViewRow dataGridViewRow = element as DataGridViewRow;
				if (dataGridViewRow != null)
				{
					DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
					if (dataGridViewRowStateChangedEventHandler != null && dataGridViewRow.DataGridView != null && dataGridViewRow.Index == -1)
					{
						dataGridViewRow = this.Rows[index];
					}
					DataGridViewRowStateChangedEventArgs e2 = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, elementState);
					this.OnRowStateChanged((dataGridViewRow.Index == -1) ? index : dataGridViewRow.Index, e2);
				}
				else
				{
					DataGridViewCell dataGridViewCell = element as DataGridViewCell;
					if (dataGridViewCell != null)
					{
						DataGridViewCellStateChangedEventArgs e3 = new DataGridViewCellStateChangedEventArgs(dataGridViewCell, elementState);
						this.OnCellStateChanged(e3);
					}
				}
			}
			if ((elementState & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (this.noSelectionChangeCount > 0)
				{
					this.dataGridViewState2[262144] = true;
					return;
				}
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		// Token: 0x06001853 RID: 6227 RVA: 0x00069C70 File Offset: 0x00067E70
		internal void OnDataGridViewElementStateChanging(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				if (elementState != DataGridViewElementStates.Frozen)
				{
					if (elementState != DataGridViewElementStates.ReadOnly)
					{
						if (elementState != DataGridViewElementStates.Visible)
						{
							return;
						}
					}
					else
					{
						if (this.ptCurrentCell.X == dataGridViewColumn.Index && this.IsCurrentCellInEditMode && !dataGridViewColumn.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
						}
						return;
					}
				}
				if (elementState == DataGridViewElementStates.Visible)
				{
					if (!dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotMakeAutoSizedColumnVisible"));
					}
					if (!dataGridViewColumn.Visible && dataGridViewColumn.Frozen && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
					}
					else if (dataGridViewColumn.Visible && this.ptCurrentCell.X == dataGridViewColumn.Index)
					{
						this.ResetCurrentCell();
					}
				}
				if (elementState == DataGridViewElementStates.Frozen && !dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
				this.CorrectColumnFrozenStates(dataGridViewColumn, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewRow dataGridViewRow = element as DataGridViewRow;
			if (dataGridViewRow != null)
			{
				int num = (dataGridViewRow.Index > -1) ? dataGridViewRow.Index : index;
				if (elementState != DataGridViewElementStates.Frozen)
				{
					if (elementState != DataGridViewElementStates.ReadOnly)
					{
						if (elementState != DataGridViewElementStates.Visible)
						{
							return;
						}
					}
					else
					{
						if (this.ptCurrentCell.Y == num && (this.Rows.GetRowState(num) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && this.IsCurrentCellInEditMode && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
						}
						return;
					}
				}
				if (elementState == DataGridViewElementStates.Visible && this.ptCurrentCell.Y == num)
				{
					if (this.DataSource != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CurrencyManagerRowCannotBeInvisible"));
					}
					this.ResetCurrentCell();
				}
				this.CorrectRowFrozenStates(dataGridViewRow, num, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewCell dataGridViewCell = element as DataGridViewCell;
			if (dataGridViewCell != null && elementState == DataGridViewElementStates.ReadOnly && this.ptCurrentCell.X == dataGridViewCell.ColumnIndex && this.ptCurrentCell.Y == dataGridViewCell.RowIndex && this.IsCurrentCellInEditMode && !dataGridViewCell.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataMemberChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001854 RID: 6228 RVA: 0x00069F0C File Offset: 0x0006810C
		protected virtual void OnDataMemberChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataSourceChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001855 RID: 6229 RVA: 0x00069F78 File Offset: 0x00068178
		protected virtual void OnDataSourceChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			this.InvalidateRowHeights();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001856 RID: 6230 RVA: 0x00069FE8 File Offset: 0x000681E8
		protected virtual void OnDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				base.Invalidate();
			}
			else
			{
				this.OnGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		// Token: 0x06001857 RID: 6231 RVA: 0x0006A064 File Offset: 0x00068264
		protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001858 RID: 6232 RVA: 0x0006A0AC File Offset: 0x000682AC
		protected override void OnDoubleClick(EventArgs e)
		{
			base.OnDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				MouseEventArgs mouseEventArgs = e as MouseEventArgs;
				if (mouseEventArgs != null)
				{
					DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar && mouseEventArgs.Button == MouseButtons.Left)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditingControlShowing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" /> that contains information about the editing control.</param>
		// Token: 0x06001859 RID: 6233 RVA: 0x0006A148 File Offset: 0x00068348
		protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e)
		{
			DataGridViewEditingControlShowingEventHandler dataGridViewEditingControlShowingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING] as DataGridViewEditingControlShowingEventHandler;
			if (dataGridViewEditingControlShowingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewEditingControlShowingEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditModeChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidCastException">When entering edit mode, the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x0600185A RID: 6234 RVA: 0x0006A190 File Offset: 0x00068390
		protected virtual void OnEditModeChanged(EventArgs e)
		{
			if (this.Focused && this.EditMode == DataGridViewEditMode.EditOnEnter && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				this.BeginEditInternal(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x0600185B RID: 6235 RVA: 0x0006A208 File Offset: 0x00068408
		protected override void OnEnabledChanged(EventArgs e)
		{
			base.OnEnabledChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (base.IsHandleCreated && base.Enabled)
			{
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
					int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
					this.vertScrollBar.Enabled = true;
				}
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					this.horizScrollBar.Enabled = true;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidCastException">The control is configured to enter edit mode when it receives focus, but upon entering focus, the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x0600185C RID: 6236 RVA: 0x0006A2A4 File Offset: 0x000684A4
		protected override void OnEnter(EventArgs e)
		{
			if (this.editingControl != null && this.editingControl.ContainsFocus)
			{
				return;
			}
			base.OnEnter(e);
			if (base.DesignMode)
			{
				return;
			}
			this.dataGridViewState1[64] = false;
			if (this.ptCurrentCell.X > -1)
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnRowEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				if (this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, -1);
				}
			}
			else if (!this.dataGridViewOper[8192])
			{
				this.MakeFirstDisplayedCellCurrentCell(true);
			}
			if (this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				if (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null))
				{
					this.BeginEditInternal(true);
					if (this.ptCurrentCell.X > -1 && this.CurrentCellInternal.EditType == null && !this.dataGridViewOper[8192])
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
				else if (!this.dataGridViewOper[8192])
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			if (this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateRectangleEdges(this.GetGridFocusRectangle());
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.FontChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600185D RID: 6237 RVA: 0x0006A45C File Offset: 0x0006865C
		protected override void OnFontChanged(EventArgs e)
		{
			base.OnFontChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[67108864] && this.ColumnHeadersDefaultCellStyle.Font != base.Font)
			{
				this.ColumnHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[67108864] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[134217728] && this.RowHeadersDefaultCellStyle.Font != base.Font)
			{
				this.RowHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[134217728] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[33554432] && this.DefaultCellStyle.Font != base.Font)
			{
				this.DefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[33554432] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ForeColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600185E RID: 6238 RVA: 0x0006A598 File Offset: 0x00068798
		protected override void OnForeColorChanged(EventArgs e)
		{
			base.OnForeColorChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[1024] && this.DefaultCellStyle.ForeColor != base.ForeColor)
			{
				this.DefaultCellStyle.ForeColor = base.ForeColor;
				this.dataGridViewState1[1024] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = false;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		// Token: 0x0600185F RID: 6239 RVA: 0x0006A61C File Offset: 0x0006881C
		private void OnGlobalAutoSize()
		{
			base.Invalidate();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize, this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, false);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			if (flag && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize || this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None))
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001860 RID: 6240 RVA: 0x0006A6F0 File Offset: 0x000688F0
		protected override void OnGotFocus(EventArgs e)
		{
			base.OnGotFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewOper[131072] && (!this.dataGridViewOper[4194304] || this.EditMode != DataGridViewEditMode.EditOnEnter) && (!this.dataGridViewOper[8192] || this.EditMode != DataGridViewEditMode.EditOnEnter) && this.ptCurrentCell.X > -1)
			{
				this.AccessibilityNotifyCurrentCellChanged(this.ptCurrentCell);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.GridColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001861 RID: 6241 RVA: 0x0006A790 File Offset: 0x00068990
		protected virtual void OnGridColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001862 RID: 6242 RVA: 0x0006A7E0 File Offset: 0x000689E0
		protected override void OnHandleCreated(EventArgs e)
		{
			base.OnHandleCreated(e);
			if (this.layout.dirty)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			if (this.ptCurrentCell.X == -1)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			else
			{
				this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
			}
			if (this.dataGridViewState2[1048576])
			{
				this.dataGridViewState2[1048576] = false;
				this.OnGlobalAutoSize();
			}
			SystemEvents.UserPreferenceChanged += this.OnUserPreferenceChanged;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001863 RID: 6243 RVA: 0x0006A87A File Offset: 0x00068A7A
		protected override void OnHandleDestroyed(EventArgs e)
		{
			SystemEvents.UserPreferenceChanged -= this.OnUserPreferenceChanged;
			base.OnHandleDestroyed(e);
		}

		// Token: 0x06001864 RID: 6244 RVA: 0x0006A894 File Offset: 0x00068A94
		internal void OnInsertedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			this.displayedBandsInfo.CorrectColumnIndexAfterInsertion(dataGridViewColumn.Index, 1);
			this.CorrectColumnIndexesAfterInsertion(dataGridViewColumn, 1);
			this.OnAddedColumn(dataGridViewColumn);
		}

		// Token: 0x06001865 RID: 6245 RVA: 0x0006A8B8 File Offset: 0x00068AB8
		internal void OnInsertedColumn_PostNotification(Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06001866 RID: 6246 RVA: 0x0006A8F8 File Offset: 0x00068AF8
		internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, insertionCount);
			this.CorrectRowIndexesAfterInsertion(rowIndex, insertionCount);
			this.OnAddedRow_PreNotification(rowIndex);
		}

		// Token: 0x06001867 RID: 6247 RVA: 0x0006A918 File Offset: 0x00068B18
		internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion)
		{
			this.OnAddedRow_PostNotification(rowIndex);
			if (lastInsertion && newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06001868 RID: 6248 RVA: 0x0006A962 File Offset: 0x00068B62
		internal void OnInsertedRows_PreNotification(int rowIndex, DataGridViewRow[] dataGridViewRows)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.CorrectRowIndexesAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.OnAddedRows_PreNotification(dataGridViewRows);
		}

		// Token: 0x06001869 RID: 6249 RVA: 0x0006A984 File Offset: 0x00068B84
		internal void OnInsertedRows_PostNotification(DataGridViewRow[] dataGridViewRows, Point newCurrentCell)
		{
			this.OnAddedRows_PostNotification(dataGridViewRows);
			if (newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
		}

		// Token: 0x0600186A RID: 6250 RVA: 0x0006A9BC File Offset: 0x00068BBC
		internal void OnInsertingColumn(int columnIndexInserted, DataGridViewColumn dataGridViewColumn, out Point newCurrentCell)
		{
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, columnIndexInserted);
			if (this.ptCurrentCell.X != -1)
			{
				newCurrentCell = new Point((columnIndexInserted <= this.ptCurrentCell.X) ? (this.ptCurrentCell.X + 1) : this.ptCurrentCell.X, this.ptCurrentCell.Y);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.InsertInternal(columnIndexInserted, dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(columnIndexInserted);
					}
					throw;
				}
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				int count = this.selectedBandIndexes.Count;
				for (int k = 0; k < count; k++)
				{
					int num2 = this.selectedBandIndexes[k];
					if (columnIndexInserted <= num2)
					{
						this.selectedBandIndexes[k] = num2 + 1;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					count = this.selectedBandSnapshotIndexes.Count;
					for (int k = 0; k < count; k++)
					{
						int num3 = this.selectedBandSnapshotIndexes[k];
						if (columnIndexInserted <= num3)
						{
							this.selectedBandSnapshotIndexes[k] = num3 + 1;
						}
					}
				}
			}
		}

		// Token: 0x0600186B RID: 6251 RVA: 0x0006AD08 File Offset: 0x00068F08
		internal void OnInsertingRow(int rowIndexInserted, DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, ref Point newCurrentCell, bool firstInsertion, int insertionCount, bool force)
		{
			if (firstInsertion)
			{
				if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
				{
					newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + insertionCount);
					if (force)
					{
						this.dataGridViewState1[4194304] = true;
						bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
					}
					else
					{
						this.ResetCurrentCell();
					}
				}
				else
				{
					newCurrentCell = new Point(-1, -1);
				}
			}
			else if (newCurrentCell.Y != -1)
			{
				newCurrentCell.Y += insertionCount;
			}
			this.OnAddingRow(dataGridViewRow, rowState, false);
			this.CorrectRowFrozenState(dataGridViewRow, rowState, rowIndexInserted);
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int count = this.selectedBandIndexes.Count;
				for (int i = 0; i < count; i++)
				{
					int num = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num)
					{
						this.selectedBandIndexes[i] = num + insertionCount;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					count = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < count; i++)
					{
						int num2 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num2)
						{
							this.selectedBandSnapshotIndexes[i] = num2 + insertionCount;
						}
					}
				}
			}
		}

		// Token: 0x0600186C RID: 6252 RVA: 0x0006AE54 File Offset: 0x00069054
		internal void OnInsertingRows(int rowIndexInserted, DataGridViewRow[] dataGridViewRows, ref Point newCurrentCell)
		{
			if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
			{
				newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + dataGridViewRows.Length);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			this.OnAddingRows(dataGridViewRows, false);
			this.CorrectRowFrozenStates(dataGridViewRows, rowIndexInserted);
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int count = this.selectedBandIndexes.Count;
				for (int i = 0; i < count; i++)
				{
					int num = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num)
					{
						this.selectedBandIndexes[i] = num + dataGridViewRows.Length;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					count = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < count; i++)
					{
						int num2 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num2)
						{
							this.selectedBandSnapshotIndexes[i] = num2 + dataGridViewRows.Length;
						}
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.Exception">This action would cause the control to enter edit mode but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x0600186D RID: 6253 RVA: 0x0006AF58 File Offset: 0x00069158
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyDown(KeyEventArgs e)
		{
			base.OnKeyDown(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyDownUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
				else
				{
					currentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
			}
			if (!e.Handled)
			{
				Keys keys = e.KeyData & Keys.KeyCode;
				if (keys <= Keys.D0)
				{
					if (keys != Keys.Tab && keys != Keys.Return)
					{
						switch (keys)
						{
						case Keys.Escape:
						case Keys.Space:
						case Keys.Prior:
						case Keys.Next:
						case Keys.End:
						case Keys.Home:
						case Keys.Left:
						case Keys.Up:
						case Keys.Right:
						case Keys.Down:
						case Keys.Insert:
						case Keys.Delete:
						case Keys.D0:
							break;
						case Keys.IMEConvert:
						case Keys.IMENonconvert:
						case Keys.IMEAccept:
						case Keys.IMEModeChange:
						case Keys.Select:
						case Keys.Print:
						case Keys.Execute:
						case Keys.Snapshot:
						case Keys.Help:
							return;
						default:
							return;
						}
					}
				}
				else if (keys <= Keys.C)
				{
					if (keys != Keys.A && keys != Keys.C)
					{
						return;
					}
				}
				else if (keys != Keys.NumPad0 && keys - Keys.F2 > 1)
				{
					return;
				}
				e.Handled = this.ProcessDataGridViewKey(e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data. </param>
		// Token: 0x0600186E RID: 6254 RVA: 0x0006B098 File Offset: 0x00069298
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyPress(KeyPressEventArgs e)
		{
			base.OnKeyPress(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyPressUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data. </param>
		// Token: 0x0600186F RID: 6255 RVA: 0x0006B120 File Offset: 0x00069320
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyUp(KeyEventArgs e)
		{
			base.OnKeyUp(e);
			if (e.Handled)
			{
				return;
			}
			if (this.dataGridViewOper[16777216] && (e.KeyData & Keys.Alt) != Keys.Alt && AccessibilityImprovements.Level2)
			{
				this.EndColumnResize(this.currentColSplitBar);
				this.ResetKeyboardTrackingState();
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyUpUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data. </param>
		// Token: 0x06001870 RID: 6256 RVA: 0x0006B1E8 File Offset: 0x000693E8
		protected override void OnLayout(LayoutEventArgs e)
		{
			if (this.dataGridViewState1[16384])
			{
				return;
			}
			base.OnLayout(e);
			this.PerformLayoutPrivate(false, false, false, false);
			if (this.RightToLeftInternal)
			{
				base.Invalidate();
			}
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001871 RID: 6257 RVA: 0x0006B238 File Offset: 0x00069438
		protected override void OnLeave(EventArgs e)
		{
			if (this.ptCurrentCell.X > -1 && !this.dataGridViewState1[64])
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnCellLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnRowLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewState1[64])
			{
				base.OnLeave(e);
				if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			if (this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateRectangleEdges(this.GetGridFocusRectangle());
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001872 RID: 6258 RVA: 0x0006B311 File Offset: 0x00069511
		protected override void OnLostFocus(EventArgs e)
		{
			base.OnLostFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001873 RID: 6259 RVA: 0x0006B344 File Offset: 0x00069544
		protected override void OnMouseClick(MouseEventArgs e)
		{
			bool flag = false;
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row && (e.Button != MouseButtons.Left || this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (this.ptMouseDownCell.X == this.ptCurrentCell.X && this.ptMouseDownCell.Y == this.ptCurrentCell.Y)))
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.RecordCellMouseClick(dataGridViewCellMouseEventArgs);
						if (e.Button == MouseButtons.Left)
						{
							this.OnCellClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
						}
						base.OnMouseClick(e);
						flag = true;
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
					else
					{
						base.OnMouseClick(e);
						flag = true;
					}
					if (!this.dataGridViewOper[32])
					{
						DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
						if (typeInternal <= DataGridView.DataGridViewHitTestTypeInternal.RowHeader)
						{
							if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader)
							{
								if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.RowHeader)
								{
									goto IL_2A7;
								}
								if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
								{
									this.OnRowHeaderMouseClick(dataGridViewCellMouseEventArgs);
									goto IL_2A7;
								}
								goto IL_2A7;
							}
						}
						else if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft && typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft > 1)
						{
							goto IL_2A7;
						}
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnColumnHeaderMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
				}
			}
			IL_2A7:
			if (!flag)
			{
				base.OnMouseClick(e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</summary>
		/// <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
		// Token: 0x06001874 RID: 6260 RVA: 0x0006B604 File Offset: 0x00069804
		protected override void OnMouseDoubleClick(MouseEventArgs e)
		{
			base.OnMouseDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row)
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					if (!this.dataGridViewOper[32])
					{
						switch (hitTestInfo.typeInternal)
						{
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
						case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnColumnHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnRowHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
						{
							int num2 = (hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol;
							if (num2 < this.Columns.Count)
							{
								HandledMouseEventArgs e2 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewColumnDividerDoubleClickEventArgs e3 = new DataGridViewColumnDividerDoubleClickEventArgs(num2, e2);
								this.OnColumnDividerDoubleClick(e3);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
						{
							int num3 = (hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow;
							if (num3 < this.Rows.Count)
							{
								HandledMouseEventArgs e4 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewRowDividerDoubleClickEventArgs e5 = new DataGridViewRowDividerDoubleClickEventArgs(num3, e4);
								this.OnRowDividerDoubleClick(e5);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						{
							HandledMouseEventArgs e6 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewColumnDividerDoubleClickEventArgs e7 = new DataGridViewColumnDividerDoubleClickEventArgs(-1, e6);
							this.OnColumnDividerDoubleClick(e7);
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						{
							HandledMouseEventArgs e8 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewRowDividerDoubleClickEventArgs e9 = new DataGridViewRowDividerDoubleClickEventArgs(-1, e8);
							this.OnRowDividerDoubleClick(e9);
							return;
						}
						default:
							return;
						}
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001875 RID: 6261 RVA: 0x0006B948 File Offset: 0x00069B48
		protected override void OnMouseDown(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewOper[512] = true;
			}
			base.OnMouseDown(e);
			if (this.dataGridViewState2[134217728])
			{
				return;
			}
			if (this.ptMouseDownCell.X != -2)
			{
				return;
			}
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				this.ptMouseDownCell.X = hitTestInfo.col;
				this.ptMouseDownCell.Y = hitTestInfo.row;
				this.ptMouseDownGridCoord = new Point(e.X, e.Y);
				int num = e.X - hitTestInfo.ColumnX;
				if (this.RightToLeftInternal)
				{
					num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
				}
				DataGridViewCellMouseEventArgs e2 = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
				this.OnCellMouseDown(e2);
			}
		}

		/// <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001876 RID: 6262 RVA: 0x0006BA7C File Offset: 0x00069C7C
		protected override void OnMouseEnter(EventArgs e)
		{
			if (!this.dataGridViewState2[8] && !this.dataGridViewState2[16] && this.dataGridViewState2[32] && !this.toolTipControl.Activated)
			{
				base.OnMouseEnter(e);
			}
			this.dataGridViewState2[8] = false;
			this.dataGridViewState2[16] = false;
			this.dataGridViewState2[32] = false;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x06001877 RID: 6263 RVA: 0x0006BAF4 File Offset: 0x00069CF4
		protected override void OnMouseLeave(EventArgs e)
		{
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			bool mouseOverEditingControl = this.MouseOverEditingControl;
			bool mouseOverEditingPanel = this.MouseOverEditingPanel;
			bool flag = this.toolTipControl.Activated && base.ClientRectangle.Contains(base.PointToClient(Control.MousePosition));
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs e2 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(e2);
				}
				else
				{
					this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
				}
			}
			this.ResetTrackingState();
			this.dataGridViewOper[512] = false;
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && !this.MouseOverScrollBar)
			{
				this.toolTipControl.Activate(false);
				base.OnMouseLeave(e);
				this.dataGridViewState2[32] = true;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
		// Token: 0x06001878 RID: 6264 RVA: 0x0006BC68 File Offset: 0x00069E68
		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			this.UpdateMouseEnteredCell(hitTestInfo, e);
			if (this.dataGridViewOper[1])
			{
				this.MoveRowHeadersOrColumnResize(e.X);
			}
			else if (this.dataGridViewOper[2])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[32])
			{
				this.MoveColumnRelocation(e, hitTestInfo);
			}
			else if (this.dataGridViewOper[128])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[256])
			{
				this.MoveRowHeadersOrColumnResize(e.X);
			}
			if (this.dataGridViewOper[1] || this.dataGridViewOper[256] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight) && !this.dataGridViewOper[128] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeWE;
				return;
			}
			if (this.dataGridViewOper[2] || this.dataGridViewOper[128] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom) && !this.dataGridViewOper[256] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeNS;
				return;
			}
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			if (this.dataGridViewOper[4] || this.dataGridViewOper[8] || this.dataGridViewOper[16])
			{
				int x = e.X;
				int y = e.Y;
				int num;
				int num2;
				if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
				{
					if (num == 0)
					{
						if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
						{
							this.horizScrollTimer.Enabled = false;
						}
					}
					else if (this.horizScrollTimer == null || !this.horizScrollTimer.Enabled)
					{
						this.HorizScrollTimer.Interval = DataGridView.GetColumnScrollRate(Math.Abs(num));
						this.HorizScrollTimer.Enabled = true;
					}
					if (num2 == 0)
					{
						if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
						{
							this.vertScrollTimer.Enabled = false;
						}
					}
					else if (this.vertScrollTimer == null || !this.vertScrollTimer.Enabled)
					{
						this.VertScrollTimer.Interval = DataGridView.GetRowScrollRate(Math.Abs(num2));
						this.VertScrollTimer.Enabled = true;
					}
					if (this.HorizScrollTimer.Enabled || this.VertScrollTimer.Enabled)
					{
						return;
					}
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
						}
					}
				}
			}
			if (!this.toolTipControl.Activated)
			{
				this.ptToolTipCell = new Point(-1, -1);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
		// Token: 0x06001879 RID: 6265 RVA: 0x0006C0E4 File Offset: 0x0006A2E4
		protected override void OnMouseUp(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewState1[2048] = false;
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (!this.IsMouseOperationActive())
				{
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs;
						if (this.dataGridViewState2[8388608])
						{
							MouseEventArgs e2 = new MouseEventArgs(e.Button, 2, e.X, e.Y, e.Delta);
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e2);
						}
						else
						{
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						}
						if (hitTestInfo.col >= 0 && this.ptMouseDownCell.X == hitTestInfo.col && hitTestInfo.row >= 0 && this.ptMouseDownCell.Y == hitTestInfo.row && this.EditMode == DataGridViewEditMode.EditOnEnter && this.editingControl != null)
						{
							this.OnClick(e);
							this.OnMouseClick(e);
						}
						this.CorrectFocus(true);
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
						}
					}
					else if (hitTestInfo.Type == DataGridViewHitTestType.None)
					{
						this.CorrectFocus(true);
					}
				}
				else
				{
					if (this.dataGridViewOper[1])
					{
						this.EndColumnResize(e);
					}
					if (this.dataGridViewOper[2])
					{
						this.EndRowResize(e);
					}
					if (this.dataGridViewOper[32])
					{
						this.EndColumnRelocation(e, hitTestInfo);
					}
					if (this.dataGridViewOper[128])
					{
						this.EndColumnHeadersResize(e);
					}
					if (this.dataGridViewOper[256])
					{
						this.EndRowHeadersResize(e);
					}
					this.CorrectFocus(true);
					hitTestInfo = this.HitTest(e.X, e.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num2 = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num2 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						this.OnCellMouseUp(new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num2, e.Y - hitTestInfo.RowY, e));
					}
				}
				this.ResetTrackingState();
			}
			base.OnMouseUp(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x0600187A RID: 6266 RVA: 0x0006C3D8 File Offset: 0x0006A5D8
		protected override void OnMouseWheel(MouseEventArgs e)
		{
			base.OnMouseWheel(e);
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null && handledMouseEventArgs.Handled)
			{
				return;
			}
			if ((Control.ModifierKeys & (Keys.Shift | Keys.Alt)) != Keys.None || Control.MouseButtons != MouseButtons.None)
			{
				return;
			}
			bool flag = (Control.ModifierKeys & Keys.Control) == Keys.None;
			ScrollBar scrollBar = flag ? this.vertScrollBar : this.horizScrollBar;
			if (!scrollBar.Visible || !scrollBar.Enabled)
			{
				return;
			}
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
			int mouseWheelScrollLines = SystemInformation.MouseWheelScrollLines;
			if (mouseWheelScrollLines == 0)
			{
				return;
			}
			float num;
			if (flag)
			{
				this.cumulativeVerticalWheelDelta += e.Delta;
				num = (float)this.cumulativeVerticalWheelDelta / 120f;
			}
			else
			{
				this.cumulativeHorizontalWheelDelta += e.Delta;
				num = (float)this.cumulativeHorizontalWheelDelta / 120f;
			}
			int num2 = (int)num;
			if (mouseWheelScrollLines == -1)
			{
				if (num2 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						int num3 = this.VerticalOffset;
						this.VerticalOffset -= num2 * this.vertScrollBar.LargeChange;
						if (Math.Abs(this.VerticalOffset - num3) >= Math.Abs(num2 * this.vertScrollBar.LargeChange))
						{
							this.cumulativeVerticalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeVerticalWheelDelta = 0;
						return;
					}
					else
					{
						int num4 = this.HorizontalOffset;
						this.HorizontalOffset -= num2 * this.horizScrollBar.LargeChange;
						if (Math.Abs(this.HorizontalOffset - num4) >= Math.Abs(num2 * this.horizScrollBar.LargeChange))
						{
							this.cumulativeHorizontalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeHorizontalWheelDelta = 0;
						return;
					}
				}
			}
			else
			{
				int num5 = (int)((float)mouseWheelScrollLines * num);
				if (num5 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						if (num5 > 0)
						{
							int num6 = num5;
							while (this.vertScrollBar.Value != this.vertScrollBar.Minimum && num6 > 0)
							{
								this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
								num6--;
							}
							if (this.vertScrollBar.Value == this.vertScrollBar.Minimum)
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
						else
						{
							int num6 = -num5;
							int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							while (num6 > 0 && this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
								num6--;
							}
							if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) > this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
					}
					else
					{
						int num7;
						int columns;
						if (num5 > 0)
						{
							num7 = this.horizScrollBar.Minimum;
							columns = -1;
						}
						else
						{
							num7 = this.horizScrollBar.Maximum;
							columns = 1;
						}
						int num6 = Math.Abs(num5);
						while (this.horizScrollBar.Value != num7 && num6 > 0)
						{
							this.ScrollColumns(columns);
							num6--;
						}
						if (this.horizScrollBar.Value == num7)
						{
							this.cumulativeHorizontalWheelDelta = 0;
							return;
						}
						this.cumulativeHorizontalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
					}
				}
			}
		}

		// Token: 0x0600187B RID: 6267 RVA: 0x0003FCD6 File Offset: 0x0003DED6
		internal void OnMouseWheelInternal(MouseEventArgs e)
		{
			this.OnMouseWheel(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.MultiSelectChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600187C RID: 6268 RVA: 0x0006C7A0 File Offset: 0x0006A9A0
		protected virtual void OnMultiSelectChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.NewRowNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600187D RID: 6269 RVA: 0x0006C7E8 File Offset: 0x0006A9E8
		protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.Exception">Any exceptions that occur during this method are ignored unless they are one of the following:
		///             <see cref="T:System.NullReferenceException" />
		///
		///             <see cref="T:System.StackOverflowException" />
		///
		///             <see cref="T:System.OutOfMemoryException" />
		///
		///             <see cref="T:System.Threading.ThreadAbortException" />
		///
		///             <see cref="T:System.ExecutionEngineException" />
		///
		///             <see cref="T:System.IndexOutOfRangeException" />
		///
		///             <see cref="T:System.AccessViolationException" />
		///           </exception>
		// Token: 0x0600187E RID: 6270 RVA: 0x0006C854 File Offset: 0x0006AA54
		protected override void OnPaint(PaintEventArgs e)
		{
			try
			{
				if (!this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					if (this.layout.dirty)
					{
						this.PerformLayoutPrivate(false, true, false, false);
					}
					Graphics graphics = e.Graphics;
					Rectangle rectangle = e.ClipRectangle;
					Rectangle gridRectangle = this.GetGridRectangle();
					if (this.currentRowSplitBar != -1)
					{
						rectangle = Rectangle.Union(rectangle, this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
					}
					else if (this.currentColSplitBar != -1)
					{
						rectangle = Rectangle.Union(rectangle, this.CalcColResizeFeedbackRect(this.currentColSplitBar));
					}
					if (rectangle.IntersectsWith(gridRectangle))
					{
						using (Region clip = graphics.Clip)
						{
							graphics.SetClip(gridRectangle);
							this.PaintBackground(graphics, rectangle, gridRectangle);
							this.PaintGrid(graphics, gridRectangle, rectangle, this.SingleVerticalBorderAdded, this.SingleHorizontalBorderAdded);
							graphics.Clip = clip;
						}
					}
					this.PaintBorder(graphics, rectangle, this.layout.ClientRectangle);
					if (rectangle.IntersectsWith(this.layout.ResizeBoxRect))
					{
						graphics.FillRectangle(SystemBrushes.Control, this.layout.ResizeBoxRect);
					}
					if (this.Focused && this.IsGridFocusRectangleEnabled())
					{
						if (SystemInformation.HighContrast)
						{
							ControlPaint.DrawHighContrastFocusRectangle(graphics, this.GetGridFocusRectangle(), SystemColors.ActiveCaptionText);
						}
						else
						{
							ControlPaint.DrawFocusRectangle(graphics, this.GetGridFocusRectangle());
						}
					}
					base.OnPaint(e);
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
			}
		}

		// Token: 0x0600187F RID: 6271 RVA: 0x0006C9F0 File Offset: 0x0006ABF0
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsGridFocusRectangleEnabled()
		{
			return this.ShowFocusCues && this.CurrentCell == null && AccessibilityImprovements.Level2;
		}

		// Token: 0x06001880 RID: 6272 RVA: 0x0006CA0C File Offset: 0x0006AC0C
		private Rectangle GetGridRectangle()
		{
			Rectangle rectangle = this.layout.Data;
			if (this.layout.RowHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
			}
			else if (this.SingleVerticalBorderAdded)
			{
				int num;
				if (!this.RightToLeftInternal)
				{
					num = rectangle.X;
					rectangle.X = num - 1;
				}
				num = rectangle.Width;
				rectangle.Width = num + 1;
			}
			if (this.layout.ColumnHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
			}
			else if (this.SingleHorizontalBorderAdded && rectangle.Y == this.layout.Data.Y)
			{
				int num = rectangle.Y;
				rectangle.Y = num - 1;
				num = rectangle.Height;
				rectangle.Height = num + 1;
			}
			return rectangle;
		}

		// Token: 0x06001881 RID: 6273 RVA: 0x0006CAE0 File Offset: 0x0006ACE0
		private Rectangle GetGridFocusRectangle()
		{
			Rectangle gridRectangle = this.GetGridRectangle();
			gridRectangle.Inflate(-1, -1);
			return gridRectangle;
		}

		// Token: 0x06001882 RID: 6274 RVA: 0x0006CB00 File Offset: 0x0006AD00
		private void InvalidateGridFocusOnScroll(int change, ScrollOrientation orientation)
		{
			if (change == 0)
			{
				return;
			}
			Rectangle gridFocusRectangle = this.GetGridFocusRectangle();
			if (orientation == ScrollOrientation.HorizontalScroll)
			{
				if (change > 0)
				{
					gridFocusRectangle.Width -= change;
				}
				else
				{
					gridFocusRectangle.X -= change;
					gridFocusRectangle.Width += change;
				}
			}
			else if (change > 0)
			{
				gridFocusRectangle.Height -= change;
			}
			else
			{
				gridFocusRectangle.Y -= change;
				gridFocusRectangle.Height += change;
			}
			this.InvalidateRectangleEdges(gridFocusRectangle);
		}

		// Token: 0x06001883 RID: 6275 RVA: 0x0006CB8C File Offset: 0x0006AD8C
		private void InvalidateRectangleEdges(Rectangle rect)
		{
			Rectangle rc = rect;
			rc.Width = 1;
			base.Invalidate(rc);
			rc.X += rect.Width - 1;
			base.Invalidate(rc);
			rc = rect;
			rc.Height = 1;
			base.Invalidate(rc);
			rc.Y += rect.Height - 1;
			base.Invalidate(rc);
		}

		// Token: 0x06001884 RID: 6276 RVA: 0x0006CBF7 File Offset: 0x0006ADF7
		internal override void OnParentBecameInvisible()
		{
			base.OnParentBecameInvisible();
			if (base.GetState(2))
			{
				this.OnVisibleChangedPrivate();
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidCastException">The control changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001885 RID: 6277 RVA: 0x0006CC10 File Offset: 0x0006AE10
		protected virtual void OnReadOnlyChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			base.VerifyImeRestrictedModeChanged();
			if (!this.ReadOnly && this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)) && !this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X].ReadOnly)
			{
				this.BeginEditInternal(true);
			}
		}

		// Token: 0x06001886 RID: 6278 RVA: 0x0006CCF0 File Offset: 0x0006AEF0
		internal void OnRemovedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.SortGlyphDirectionInternal = SortOrder.None;
			}
			this.CorrectColumnIndexesAfterDeletion(dataGridViewColumn);
			this.CorrectColumnDisplayIndexesAfterDeletion(dataGridViewColumn);
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(dataGridViewColumn.Index);
			this.OnColumnRemoved(dataGridViewColumn);
		}

		// Token: 0x06001887 RID: 6279 RVA: 0x0006CD2C File Offset: 0x0006AF2C
		internal void OnRemovedColumn_PostNotification(DataGridViewColumn dataGridViewColumn, Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			this.OnColumnHidden(dataGridViewColumn);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.GetInheritedAutoSizeMode(this);
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.ThicknessInternal != dataGridViewColumn.CachedThickness)
			{
				dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
			}
			this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
		}

		// Token: 0x06001888 RID: 6280 RVA: 0x0006CDAE File Offset: 0x0006AFAE
		internal void OnRemovedRow_PreNotification(int rowIndexDeleted)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(rowIndexDeleted);
			this.CorrectRowIndexesAfterDeletion(rowIndexDeleted);
			this.ComputeVisibleRows();
		}

		// Token: 0x06001889 RID: 6281 RVA: 0x0006CDCC File Offset: 0x0006AFCC
		internal void OnRemovedRow_PostNotification(DataGridViewRow dataGridViewRow, Point newCurrentCell)
		{
			if (newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			bool flag2 = dataGridViewRow.DataGridView == null && dataGridViewRow.Displayed;
			if (flag2)
			{
				dataGridViewRow.DisplayedInternal = false;
				DataGridViewRowStateChangedEventArgs e = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
				this.OnRowStateChanged(-1, e);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None && dataGridViewRow.ThicknessInternal != dataGridViewRow.CachedThickness)
			{
				dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag2)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			bool flag3 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag4 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag5 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag5 && !flag3)
			{
				flag4 = true;
			}
			if (!flag4)
			{
				this.AutoResizeColumnHeadersHeight(flag5, true);
			}
			if (!flag5)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (!flag4 && !flag5)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x0600188A RID: 6282 RVA: 0x0006CECC File Offset: 0x0006B0CC
		internal void OnRemovingColumn(DataGridViewColumn dataGridViewColumn, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			int index = dataGridViewColumn.Index;
			if (this.ptCurrentCell.X != -1)
			{
				int num = this.ptCurrentCell.X;
				if (index == this.ptCurrentCell.X)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (nextColumn != null)
					{
						if (nextColumn.Index > index)
						{
							num = nextColumn.Index - 1;
						}
						else
						{
							num = nextColumn.Index;
						}
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							if (previousColumn.Index > index)
							{
								num = previousColumn.Index - 1;
							}
							else
							{
								num = previousColumn.Index;
							}
						}
						else
						{
							num = -1;
						}
					}
				}
				else if (index < this.ptCurrentCell.X)
				{
					num = this.ptCurrentCell.X - 1;
				}
				newCurrentCell = new Point(num, (num == -1) ? -1 : this.ptCurrentCell.Y);
				if (index == this.ptCurrentCell.X)
				{
					bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Columns.Count == 1)
			{
				this.Rows.ClearInternal(false);
			}
			int num2 = this.Columns.Count - 1;
			for (int i = 0; i < this.Rows.Count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Cells.Count > num2)
				{
					dataGridViewRow.Cells.RemoveAtInternal(index);
				}
			}
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = null;
			}
			if (dataGridViewColumn == this.sortedColumn)
			{
				this.sortedColumn = null;
				this.sortOrder = SortOrder.None;
				if (dataGridViewColumn.IsDataBound)
				{
					for (int j = 0; j < this.Columns.Count; j++)
					{
						if (dataGridViewColumn != this.Columns[j] && this.Columns[j].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(dataGridViewColumn.DataPropertyName, this.Columns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
						{
							this.sortedColumn = this.Columns[j];
							this.sortOrder = this.Columns[j].HeaderCell.SortGlyphDirection;
							break;
						}
					}
				}
			}
			if (dataGridViewColumn.Visible && !dataGridViewColumn.Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol == dataGridViewColumn.Index)
				{
					this.horizontalOffset -= this.negOffset;
					this.negOffset = 0;
				}
				else if (this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, dataGridViewColumn.Index))
				{
					if (this.horizScrollBar.Enabled)
					{
						int num3 = this.horizScrollBar.Maximum - this.horizScrollBar.LargeChange - dataGridViewColumn.Thickness;
						if (num3 >= 0 && num3 < this.horizScrollBar.Value)
						{
							this.horizontalOffset = num3;
							this.negOffset = this.GetNegOffsetFromHorizontalOffset(this.horizontalOffset);
						}
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset -= dataGridViewColumn.Thickness;
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
			}
			bool flag3 = false;
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				int num4 = this.selectedBandIndexes.Count;
				int k = 0;
				while (k < num4)
				{
					int num5 = this.selectedBandIndexes[k];
					if (index == num5)
					{
						this.selectedBandIndexes.RemoveAt(k);
						num4--;
						flag3 = true;
					}
					else
					{
						if (index < num5)
						{
							this.selectedBandIndexes[k] = num5 - 1;
						}
						k++;
					}
				}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			ptr[262144] = (ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(true, index) > 0 || flag3));
			this.individualReadOnlyCells.RemoveAllCellsAtBand(true, index);
		}

		// Token: 0x0600188B RID: 6283 RVA: 0x0006D340 File Offset: 0x0006B540
		internal void OnRemovingRow(int rowIndexDeleted, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			newCurrentCell = new Point(-1, -1);
			if (this.ptCurrentCell.Y != -1 && rowIndexDeleted <= this.ptCurrentCell.Y)
			{
				int y;
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					int previousRow = this.Rows.GetPreviousRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					int nextRow = this.Rows.GetNextRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					if (previousRow > -1 && this.AllowUserToAddRowsInternal)
					{
						if (nextRow > -1 && nextRow < this.Rows.Count - 1)
						{
							y = nextRow - 1;
						}
						else
						{
							y = previousRow;
						}
					}
					else if (nextRow > -1)
					{
						y = nextRow - 1;
					}
					else
					{
						y = previousRow;
					}
					this.IsCurrentCellDirtyInternal = false;
					this.IsCurrentRowDirtyInternal = false;
				}
				else
				{
					y = this.ptCurrentCell.Y - 1;
				}
				newCurrentCell = new Point(this.ptCurrentCell.X, y);
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			bool flag3 = false;
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num = this.selectedBandIndexes.Count;
				int i = 0;
				while (i < num)
				{
					int num2 = this.selectedBandIndexes[i];
					if (rowIndexDeleted == num2)
					{
						flag3 = true;
						this.selectedBandIndexes.RemoveAt(i);
						num--;
					}
					else
					{
						if (rowIndexDeleted < num2)
						{
							this.selectedBandIndexes[i] = num2 - 1;
						}
						i++;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.Count;
					i = 0;
					while (i < num)
					{
						int num3 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexDeleted == num3)
						{
							this.selectedBandSnapshotIndexes.RemoveAt(i);
							num--;
						}
						else
						{
							if (rowIndexDeleted < num3)
							{
								this.selectedBandSnapshotIndexes[i] = num3 - 1;
							}
							i++;
						}
					}
				}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			ptr[262144] = (ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(false, rowIndexDeleted) > 0 || flag3));
			this.individualReadOnlyCells.RemoveAllCellsAtBand(false, rowIndexDeleted);
		}

		// Token: 0x0600188C RID: 6284 RVA: 0x0006D588 File Offset: 0x0006B788
		internal void OnReplacedCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Add(dataGridViewCell);
			}
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Add(dataGridViewCell);
			}
			this.OnCellCommonChange(columnIndex, dataGridViewRow.Index);
			if (this.ptCurrentCellCache.X != -1)
			{
				if (!this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetCurrentCellAddressCore(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, false, false, false);
				}
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
		}

		// Token: 0x0600188D RID: 6285 RVA: 0x0006D650 File Offset: 0x0006B850
		internal void OnReplacingCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			if (this.ptCurrentCell.X == dataGridViewRow.Index && this.ptCurrentCell.Y == columnIndex)
			{
				this.ptCurrentCellCache.X = this.ptCurrentCell.X;
				this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
				this.ResetCurrentCell();
			}
			else
			{
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			this.dataGridViewState2[65536] = this.individualSelectedCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Remove(dataGridViewCell);
			}
			this.dataGridViewState2[131072] = this.individualReadOnlyCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Remove(dataGridViewCell);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x0600188E RID: 6286 RVA: 0x0006D750 File Offset: 0x0006B950
		protected override void OnResize(EventArgs e)
		{
			int borderWidth = this.BorderWidth;
			Rectangle clientRectangle = this.layout.ClientRectangle;
			Rectangle gridFocusRectangle = this.GetGridFocusRectangle();
			Rectangle rc = new Rectangle(clientRectangle.X + clientRectangle.Width - borderWidth, clientRectangle.Y, borderWidth, clientRectangle.Height);
			Rectangle rc2 = new Rectangle(clientRectangle.X, clientRectangle.Y + clientRectangle.Height - borderWidth, clientRectangle.Width, borderWidth);
			if (!this.IsMinimized)
			{
				this.normalClientRectangle = base.ClientRectangle;
			}
			Rectangle clientRectangle2 = this.normalClientRectangle;
			Rectangle displayRectangle = this.DisplayRectangle;
			displayRectangle.Inflate(1 - borderWidth - 2, 1 - borderWidth - 2);
			if (clientRectangle2.Width != clientRectangle.Width)
			{
				base.Invalidate(rc);
				rc = new Rectangle(clientRectangle2.X + clientRectangle2.Width - borderWidth, clientRectangle2.Y, borderWidth, clientRectangle2.Height);
				base.Invalidate(rc);
			}
			if (clientRectangle2.Height != clientRectangle.Height)
			{
				base.Invalidate(rc2);
				rc2 = new Rectangle(clientRectangle2.X, clientRectangle2.Y + clientRectangle2.Height - borderWidth, clientRectangle2.Width, borderWidth);
				base.Invalidate(rc2);
			}
			if (this.Focused && this.IsGridFocusRectangleEnabled() && gridFocusRectangle != displayRectangle)
			{
				rc = new Rectangle(gridFocusRectangle.X + gridFocusRectangle.Width - 1, gridFocusRectangle.Y, 1, gridFocusRectangle.Height);
				base.Invalidate(rc);
				rc2 = new Rectangle(gridFocusRectangle.X, gridFocusRectangle.Y + gridFocusRectangle.Height - 1, gridFocusRectangle.Width, 1);
				base.Invalidate(rc2);
				this.InvalidateRectangleEdges(displayRectangle);
			}
			if (!this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			this.layout.ClientRectangle = clientRectangle2;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			base.OnResize(e);
			if (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
			{
				base.Invalidate();
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x0600188F RID: 6287 RVA: 0x0006D95D File Offset: 0x0006BB5D
		protected override void OnRightToLeftChanged(EventArgs e)
		{
			this.dataGridViewState2[4096] = false;
			base.OnRightToLeftChanged(e);
			this.CorrectFocus(true);
			this.PerformLayoutPrivate(false, false, true, false);
		}

		// Token: 0x06001890 RID: 6288 RVA: 0x0006D988 File Offset: 0x0006BB88
		internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, DataGridViewRow dataGridViewRow, int rowIndex)
		{
			if (recreateNewRow && cca == CollectionChangeAction.Refresh && this.Columns.Count != 0 && this.Rows.Count == 0 && this.AllowUserToAddRowsInternal)
			{
				this.AddNewRow(false);
			}
			if (cca == CollectionChangeAction.Refresh)
			{
				this.FlushSelectionChanged();
			}
			if ((cca == CollectionChangeAction.Refresh || cca == CollectionChangeAction.Add) && this.ptCurrentCell.X == -1 && allowSettingCurrentCell && !this.InSortOperation)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			if (this.AutoSize)
			{
				bool flag = true;
				if (cca != CollectionChangeAction.Add)
				{
					if (cca == CollectionChangeAction.Remove)
					{
						flag = (dataGridViewRow.DataGridView == null && dataGridViewRow.Visible);
					}
				}
				else
				{
					DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
					flag = ((rowState & DataGridViewElementStates.Visible) > DataGridViewElementStates.None);
				}
				if (flag)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001891 RID: 6289 RVA: 0x0006DA50 File Offset: 0x0006BC50
		protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001892 RID: 6290 RVA: 0x0006DABC File Offset: 0x0006BCBC
		internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewRowContextMenuStripNeededEventArgs dataGridViewRowContextMenuStripNeededEventArgs = new DataGridViewRowContextMenuStripNeededEventArgs(rowIndex, contextMenuStrip);
			this.OnRowContextMenuStripNeeded(dataGridViewRowContextMenuStripNeededEventArgs);
			return dataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" /> that contains the event data. </param>
		// Token: 0x06001893 RID: 6291 RVA: 0x0006DAE0 File Offset: 0x0006BCE0
		protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e)
		{
			DataGridViewRowContextMenuStripNeededEventHandler dataGridViewRowContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED] as DataGridViewRowContextMenuStripNeededEventHandler;
			if (dataGridViewRowContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowContextMenuStripNeededEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001894 RID: 6292 RVA: 0x0006DB28 File Offset: 0x0006BD28
		protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data. </param>
		// Token: 0x06001895 RID: 6293 RVA: 0x0006DBA4 File Offset: 0x0006BDA4
		protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" /> that contains the event data. </param>
		// Token: 0x06001896 RID: 6294 RVA: 0x0006DBEC File Offset: 0x0006BDEC
		protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e)
		{
			DataGridViewRowDividerDoubleClickEventHandler dataGridViewRowDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK] as DataGridViewRowDividerDoubleClickEventHandler;
			if (dataGridViewRowDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.RowIndex < this.Rows.Count)
			{
				if (e.RowIndex == -1)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
					return;
				}
				if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					this.AutoResizeRowInternal(e.RowIndex, DataGridViewAutoSizeRowMode.AllCells, true, true);
					return;
				}
				this.AutoResizeRowInternal(e.RowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001897 RID: 6295 RVA: 0x0006DCA0 File Offset: 0x0006BEA0
		protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001898 RID: 6296 RVA: 0x0006DD1C File Offset: 0x0006BF1C
		private void OnRowEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred)
		{
			if (!validationFailureOccurred)
			{
				this.dataGridViewState1[524288] = false;
			}
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				bool flag = false;
				if (!validationFailureOccurred && this.AllowUserToAddRowsInternal && this.newRowIndex == rowIndex)
				{
					this.dataGridViewState1[524288] = true;
					if (canCreateNewRow)
					{
						DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents)
							{
								this.dataConnection.OnNewRowNeeded();
								flag = true;
							}
							if (this.VirtualMode)
							{
								this.OnNewRowNeeded(e);
							}
						}
						if (this.AllowUserToAddRowsInternal)
						{
							this.OnDefaultValuesNeeded(e);
							this.InvalidateRowPrivate(this.newRowIndex);
						}
					}
				}
				if (flag && rowIndex > this.Rows.Count - 1)
				{
					rowIndex = Math.Min(rowIndex, this.Rows.Count - 1);
				}
				DataGridViewCellEventArgs e2 = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowEnter(e2);
				if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset && (!flag || this.dataConnection.List.Count > 0))
				{
					this.dataConnection.OnRowEnter(e2);
				}
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		// Token: 0x06001899 RID: 6297 RVA: 0x0006DEBC File Offset: 0x0006C0BC
		protected virtual void OnRowEnter(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x0600189A RID: 6298 RVA: 0x0006DF3C File Offset: 0x0006C13C
		internal void OnRowErrorTextChanged(DataGridViewRow dataGridViewRow)
		{
			DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowErrorTextChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600189B RID: 6299 RVA: 0x0006DF58 File Offset: 0x0006C158
		protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowErrorText(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x0600189C RID: 6300 RVA: 0x0006DFD4 File Offset: 0x0006C1D4
		internal string OnRowErrorTextNeeded(int rowIndex, string errorText)
		{
			DataGridViewRowErrorTextNeededEventArgs dataGridViewRowErrorTextNeededEventArgs = new DataGridViewRowErrorTextNeededEventArgs(rowIndex, errorText);
			this.OnRowErrorTextNeeded(dataGridViewRowErrorTextNeededEventArgs);
			return dataGridViewRowErrorTextNeededEventArgs.ErrorText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" /> that contains the event data. </param>
		// Token: 0x0600189D RID: 6301 RVA: 0x0006DFF8 File Offset: 0x0006C1F8
		protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e)
		{
			DataGridViewRowErrorTextNeededEventHandler dataGridViewRowErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED] as DataGridViewRowErrorTextNeededEventHandler;
			if (dataGridViewRowErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x0600189E RID: 6302 RVA: 0x0006E040 File Offset: 0x0006C240
		private void OnRowGlobalAutoSize(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return;
			}
			this.InvalidateRowPrivate(rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
			bool flag = false;
			bool flag2 = (rowState & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
			if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2))
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
				flag = true;
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag2)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag3 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag3, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (flag)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag3)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x0600189F RID: 6303 RVA: 0x0006E120 File Offset: 0x0006C320
		protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowHeaderGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x060018A0 RID: 6304 RVA: 0x0006E19C File Offset: 0x0006C39C
		private void OnRowHeaderGlobalAutoSize(int rowIndex)
		{
			if (!this.RowHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(-1, rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None);
			}
			bool flag2 = rowIndex != -1 || this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag3 = rowIndex == -1 || (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)8) != DataGridViewAutoSizeRowsMode.None && rowIndex != -1 && !flag);
			bool flag4 = false;
			if (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || ((this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1 && flag) || (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing && rowIndex == -1)) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex == this.Rows.GetFirstRow(DataGridViewElementStates.Visible)))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag2, flag3);
				flag4 = true;
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(-1, true, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (flag4 && (!flag2 || !flag3))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was clicked.</param>
		// Token: 0x060018A1 RID: 6305 RVA: 0x0006E2B8 File Offset: 0x0006C4B8
		protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was double-clicked.</param>
		// Token: 0x060018A2 RID: 6306 RVA: 0x0006E300 File Offset: 0x0006C500
		protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x060018A3 RID: 6307 RVA: 0x0006E348 File Offset: 0x0006C548
		private void OnRowHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						if (firstColumn != null && hti.row != this.ptCurrentCell.Y)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, hti.row != this.ptCurrentCell.Y, hti.row != this.ptCurrentCell.Y, false, this.EditMode > DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
									if (hti.row >= this.Rows.Count)
									{
										int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
										if (this.ptCurrentCell.X == -1 && lastRow != -1)
										{
											if (!this.IsColumnOutOfBounds(x))
											{
												bool flag2 = this.SetAndSelectCurrentCellAddress(x, lastRow, true, false, false, false, false);
											}
										}
										break;
									}
									if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
									{
										break;
									}
								}
							}
						}
						bool flag3 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag3 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag4 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag4 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
								if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
								{
									this.RemoveIndividuallySelectedCells();
								}
							}
							finally
							{
								if (flag4)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag3)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
						if (firstColumn != null)
						{
							if (hti.row != this.ptCurrentCell.Y)
							{
								if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
								{
									bool flag5 = this.ScrollIntoView(firstColumn.Index, hti.row, false);
									if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
									{
										flag5 = this.SetCurrentCellAddressCore(firstColumn.Index, hti.row, !flag3, false, true);
									}
								}
							}
							else if (-1 != this.ptCurrentCell.Y)
							{
								bool flag6 = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
							}
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060018A4 RID: 6308 RVA: 0x0006E7B4 File Offset: 0x0006C9B4
		protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060018A5 RID: 6309 RVA: 0x0006E80C File Offset: 0x0006CA0C
		protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.RowHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnRowHeadersGlobalAutoSize(false);
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060018A6 RID: 6310 RVA: 0x0006E8A8 File Offset: 0x0006CAA8
		private void OnRowHeadersGlobalAutoSize(bool expandingRows)
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || !this.RowHeadersVisible;
			bool flag2 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag2)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, flag);
			}
			if (!flag)
			{
				if (expandingRows)
				{
					this.AdjustExpandingRows(-1, true);
				}
				else
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060018A7 RID: 6311 RVA: 0x0006E930 File Offset: 0x0006CB30
		protected virtual void OnRowHeadersWidthChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, false, false);
				}
				if (base.IsHandleCreated)
				{
					this.UpdateMouseEnteredCell(null, null);
				}
				this.OnRowHeadersGlobalAutoSize(false);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data. </param>
		// Token: 0x060018A8 RID: 6312 RVA: 0x0006E9A8 File Offset: 0x0006CBA8
		protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedRowHeadersWidth = this.RowHeadersWidth;
				}
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.RowHeadersWidth = this.cachedRowHeadersWidth;
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x060018A9 RID: 6313 RVA: 0x0006EA3C File Offset: 0x0006CC3C
		protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowHeightInfoPrivate(e.Row.Index, false, false);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
		}

		// Token: 0x060018AA RID: 6314 RVA: 0x0006EACC File Offset: 0x0006CCCC
		internal DataGridViewRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight)
		{
			DataGridViewRowHeightInfoNeededEventArgs rowHeightInfoNeededEventArgs = this.RowHeightInfoNeededEventArgs;
			rowHeightInfoNeededEventArgs.SetProperties(rowIndex, height, minimumHeight);
			this.OnRowHeightInfoNeeded(rowHeightInfoNeededEventArgs);
			return rowHeightInfoNeededEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" /> that contains the event data. </param>
		// Token: 0x060018AB RID: 6315 RVA: 0x0006EAF4 File Offset: 0x0006CCF4
		protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e)
		{
			DataGridViewRowHeightInfoNeededEventHandler dataGridViewRowHeightInfoNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED] as DataGridViewRowHeightInfoNeededEventHandler;
			if (dataGridViewRowHeightInfoNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoNeededEventHandler(this, e);
			}
		}

		// Token: 0x060018AC RID: 6316 RVA: 0x0006EB3C File Offset: 0x0006CD3C
		private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight)
		{
			if (this.VirtualMode || this.DataSource != null)
			{
				DataGridViewRowHeightInfoPushedEventArgs dataGridViewRowHeightInfoPushedEventArgs = new DataGridViewRowHeightInfoPushedEventArgs(rowIndex, height, minimumHeight);
				this.OnRowHeightInfoPushed(dataGridViewRowHeightInfoPushedEventArgs);
				if (dataGridViewRowHeightInfoPushedEventArgs.Handled)
				{
					this.UpdateRowHeightInfoPrivate(rowIndex, false, true);
					return true;
				}
			}
			return false;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" /> that contains the event data. </param>
		// Token: 0x060018AD RID: 6317 RVA: 0x0006EB80 File Offset: 0x0006CD80
		protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e)
		{
			DataGridViewRowHeightInfoPushedEventHandler dataGridViewRowHeightInfoPushedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED] as DataGridViewRowHeightInfoPushedEventHandler;
			if (dataGridViewRowHeightInfoPushedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoPushedEventHandler(this, e);
			}
		}

		// Token: 0x060018AE RID: 6318 RVA: 0x0006EBC8 File Offset: 0x0006CDC8
		private void OnRowLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowLeave(e);
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		// Token: 0x060018AF RID: 6319 RVA: 0x0006EC2C File Offset: 0x0006CE2C
		protected virtual void OnRowLeave(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x060018B0 RID: 6320 RVA: 0x0006ECAC File Offset: 0x0006CEAC
		protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPostPaint" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventArgs" /> that contains the event data. </param>
		// Token: 0x060018B1 RID: 6321 RVA: 0x0006ED18 File Offset: 0x0006CF18
		protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e)
		{
			DataGridViewRowPostPaintEventHandler dataGridViewRowPostPaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT] as DataGridViewRowPostPaintEventHandler;
			if (dataGridViewRowPostPaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPostPaintEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPrePaint" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs" /> that contains the event data. </param>
		// Token: 0x060018B2 RID: 6322 RVA: 0x0006ED60 File Offset: 0x0006CF60
		protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e)
		{
			DataGridViewRowPrePaintEventHandler dataGridViewRowPrePaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT] as DataGridViewRowPrePaintEventHandler;
			if (dataGridViewRowPrePaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPrePaintEventHandler(this, e);
			}
		}

		// Token: 0x060018B3 RID: 6323 RVA: 0x0006EDA8 File Offset: 0x0006CFA8
		internal void OnRowsAddedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsAdded(new DataGridViewRowsAddedEventArgs(rowIndex, rowCount));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsAdded" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" /> that contains information about the added rows. </param>
		// Token: 0x060018B4 RID: 6324 RVA: 0x0006EDB8 File Offset: 0x0006CFB8
		protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e)
		{
			DataGridViewRowsAddedEventHandler dataGridViewRowsAddedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSADDED] as DataGridViewRowsAddedEventHandler;
			if (dataGridViewRowsAddedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsAddedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
		// Token: 0x060018B5 RID: 6325 RVA: 0x0006EE00 File Offset: 0x0006D000
		protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060018B6 RID: 6326 RVA: 0x0006EE7C File Offset: 0x0006D07C
		private void OnRowSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y && !this.CommitEditForOperation(this.ptCurrentCell.X, hti.row, true))
			{
				return;
			}
			if (this.IsRowOutOfBounds(hti.row))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackRowEdge >= this.trackRow && hti.row > this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRowEdge, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRowEdge && hti.row >= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(hti.row, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge <= this.trackRow && hti.row < this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRowEdge, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge < this.trackRow && hti.row > this.trackRowEdge && hti.row <= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(hti.row, DataGridViewElementStates.Visible), false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row < this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRow)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge < this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), false);
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y)
			{
				if (this.IsRowOutOfBounds(hti.row))
				{
					return;
				}
				bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, hti.row, false, false, false);
			}
		}

		// Token: 0x060018B7 RID: 6327 RVA: 0x0006F240 File Offset: 0x0006D440
		private void OnRowsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x060018B8 RID: 6328 RVA: 0x0006F2E2 File Offset: 0x0006D4E2
		internal void OnRowsRemovedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsRemoved(new DataGridViewRowsRemovedEventArgs(rowIndex, rowCount));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsRemoved" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" /> that contains information about the deleted rows. </param>
		// Token: 0x060018B9 RID: 6329 RVA: 0x0006F2F4 File Offset: 0x0006D4F4
		protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e)
		{
			DataGridViewRowsRemovedEventHandler dataGridViewRowsRemovedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED] as DataGridViewRowsRemovedEventHandler;
			if (dataGridViewRowsRemovedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsRemovedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowStateChanged" /> event.</summary>
		/// <param name="rowIndex">The index of the row that is changing state.</param>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.InvalidCastException">The row changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x060018BA RID: 6330 RVA: 0x0006F33C File Offset: 0x0006D53C
		protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e)
		{
			DataGridViewRow dataGridViewRow = e.Row;
			DataGridViewElementStates dataGridViewElementStates = DataGridViewElementStates.None;
			bool flag = false;
			if (rowIndex >= 0)
			{
				dataGridViewElementStates = this.Rows.GetRowState(rowIndex);
				flag = ((dataGridViewElementStates & DataGridViewElementStates.Visible) > DataGridViewElementStates.None);
			}
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!flag && (dataGridViewElementStates & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Displayed, false);
						}
						this.PerformLayoutPrivate(false, false, true, true);
						base.Invalidate();
						bool flag2 = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
						DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
						bool flag3 = false;
						if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None)
						{
							int thicknessInternal = dataGridViewRow.ThicknessInternal;
							if (flag)
							{
								dataGridViewRow.CachedThickness = thicknessInternal;
								if ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2)
								{
									this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
									flag3 = true;
								}
							}
							else if (thicknessInternal != dataGridViewRow.CachedThickness)
							{
								if (dataGridViewRow.Index == -1)
								{
									dataGridViewRow = this.Rows[rowIndex];
								}
								dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
							}
						}
						DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
						if (flag2)
						{
							dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
						}
						if (flag && this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
						{
							this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
						}
						else
						{
							this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
						}
						if (flag3)
						{
							this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
						}
					}
				}
				else if (flag && this.inBulkPaintCount == 0)
				{
					this.InvalidateRowPrivate(rowIndex);
				}
			}
			else if (flag)
			{
				if ((dataGridViewElementStates & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					this.FirstVisibleScrollingRowTempted(rowIndex);
				}
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
			if (dataGridViewRowStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && rowIndex == this.ptCurrentCell.Y && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if ((dataGridViewElementStates & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && !this.Columns[this.ptCurrentCell.X].ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x060018BB RID: 6331 RVA: 0x0006F5B4 File Offset: 0x0006D7B4
		internal void OnRowUnshared(DataGridViewRow dataGridViewRow)
		{
			if (-1 != this.ptCurrentCell.X && dataGridViewRow.Index == this.ptCurrentCell.Y && this.editingControl != null)
			{
				this.CurrentCellInternal.CacheEditingControl();
			}
			DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowUnshared(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowUnshared" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x060018BC RID: 6332 RVA: 0x0006F604 File Offset: 0x0006D804
		protected virtual void OnRowUnshared(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x060018BD RID: 6333 RVA: 0x0006F670 File Offset: 0x0006D870
		private bool OnRowValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
			this.OnRowValidating(dataGridViewCellCancelEventArgs);
			if (!dataGridViewCellCancelEventArgs.Cancel && this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)
			{
				this.dataConnection.OnRowValidating(dataGridViewCellCancelEventArgs);
			}
			if (dataGridViewCell != null && rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
			return dataGridViewCellCancelEventArgs.Cancel;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidating" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data. </param>
		// Token: 0x060018BE RID: 6334 RVA: 0x0006F710 File Offset: 0x0006D910
		protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING] as DataGridViewCellCancelEventHandler;
				if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellCancelEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x060018BF RID: 6335 RVA: 0x0006F790 File Offset: 0x0006D990
		private void OnRowValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.IsCurrentRowDirtyInternal = false;
			this.dataGridViewState1[2097152] = false;
			if (rowIndex == this.newRowIndex)
			{
				this.InvalidateRowPrivate(rowIndex);
			}
			DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
			this.OnRowValidated(e);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidated" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data. </param>
		// Token: 0x060018C0 RID: 6336 RVA: 0x0006F800 File Offset: 0x0006DA00
		protected virtual void OnRowValidated(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x060018C1 RID: 6337 RVA: 0x0006F880 File Offset: 0x0006DA80
		private void RefreshByCurrentPos(int oldValue, int newValue)
		{
			Point pt = base.PointToScreen(base.Location);
			int num = newValue - oldValue;
			if (pt.X < 0 && num < 0)
			{
				base.Invalidate(new Rectangle(new Point(-pt.X, this.ColumnHeadersHeight), new Size(-num, base.ClientSize.Height)));
			}
			pt.X += base.Width;
			pt.Y += base.Height;
			Rectangle bounds = Screen.GetBounds(pt);
			if (pt.X > bounds.Right && num > 0)
			{
				base.Invalidate(new Rectangle(new Point(base.ClientSize.Width - (pt.X - bounds.Right) - num, this.ColumnHeadersHeight), new Size(num, base.ClientSize.Height)));
			}
			if (pt.Y < 0 && num < 0)
			{
				base.Invalidate(new Rectangle(new Point(0, -pt.Y), new Size(-num, base.ClientSize.Width)));
			}
			if (pt.Y > bounds.Bottom && num > 0)
			{
				base.Invalidate(new Rectangle(new Point(0, this.ColumnHeadersHeight), new Size(base.ClientSize.Width, base.ClientSize.Height - (pt.Y - bounds.Bottom) - num)));
			}
		}

		// Token: 0x060018C2 RID: 6338 RVA: 0x0006FA08 File Offset: 0x0006DC08
		private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation)
		{
			ScrollEventArgs scrollEventArgs = new ScrollEventArgs(scrollEventType, oldValue, newValue, orientation);
			this.OnScroll(scrollEventArgs);
			this.RefreshByCurrentPos(oldValue, newValue);
			if (this.Focused && this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateGridFocusOnScroll(newValue - oldValue, orientation);
			}
			if (ScrollOrientation.VerticalScroll == orientation)
			{
				if (scrollEventArgs.NewValue == newValue)
				{
					return;
				}
				try
				{
					this.dataGridViewState2[16384] = true;
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					int num2 = num;
					newValue = scrollEventArgs.NewValue;
					while (num != -1 && newValue > 0)
					{
						num2 = num;
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						newValue--;
					}
					if (num != -1)
					{
						num2 = num;
					}
					if (num2 != -1)
					{
						this.FirstDisplayedScrollingRowIndex = num2;
					}
					return;
				}
				finally
				{
					this.dataGridViewState2[16384] = false;
				}
			}
			if (scrollEventArgs.NewValue != newValue)
			{
				try
				{
					this.dataGridViewState2[32768] = true;
					this.HorizontalOffset = scrollEventArgs.NewValue;
				}
				finally
				{
					this.dataGridViewState2[32768] = false;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Scroll" /> event. </summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data. </param>
		// Token: 0x060018C3 RID: 6339 RVA: 0x0006FB20 File Offset: 0x0006DD20
		protected virtual void OnScroll(ScrollEventArgs e)
		{
			ScrollEventHandler scrollEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSCROLL] as ScrollEventHandler;
			if (scrollEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				scrollEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SelectionChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains information about the event.</param>
		// Token: 0x060018C4 RID: 6340 RVA: 0x0006FB68 File Offset: 0x0006DD68
		protected virtual void OnSelectionChanged(EventArgs e)
		{
			this.dataGridViewState2[262144] = false;
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060018C5 RID: 6341 RVA: 0x0006FBC4 File Offset: 0x0006DDC4
		internal bool OnSortCompare(DataGridViewColumn dataGridViewSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, out int sortResult)
		{
			DataGridViewSortCompareEventArgs dataGridViewSortCompareEventArgs = new DataGridViewSortCompareEventArgs(dataGridViewSortedColumn, value1, value2, rowIndex1, rowIndex2);
			this.OnSortCompare(dataGridViewSortCompareEventArgs);
			sortResult = dataGridViewSortCompareEventArgs.SortResult;
			return dataGridViewSortCompareEventArgs.Handled;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SortCompare" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" /> that contains the event data. </param>
		// Token: 0x060018C6 RID: 6342 RVA: 0x0006FBF4 File Offset: 0x0006DDF4
		protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e)
		{
			DataGridViewSortCompareEventHandler dataGridViewSortCompareEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE] as DataGridViewSortCompareEventHandler;
			if (dataGridViewSortCompareEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewSortCompareEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Sorted" /> event. </summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x060018C7 RID: 6343 RVA: 0x0006FC3C File Offset: 0x0006DE3C
		protected virtual void OnSorted(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060018C8 RID: 6344 RVA: 0x0006FC84 File Offset: 0x0006DE84
		internal void OnSortGlyphDirectionChanged(DataGridViewColumnHeaderCell dataGridViewColumnHeaderCell)
		{
			if (dataGridViewColumnHeaderCell.OwningColumn == this.SortedColumn)
			{
				if (dataGridViewColumnHeaderCell.SortGlyphDirection == SortOrder.None)
				{
					this.sortedColumn = null;
					DataGridViewColumn owningColumn = dataGridViewColumnHeaderCell.OwningColumn;
					if (owningColumn.IsDataBound)
					{
						for (int i = 0; i < this.Columns.Count; i++)
						{
							if (owningColumn != this.Columns[i] && this.Columns[i].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(owningColumn.DataPropertyName, this.Columns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								this.sortedColumn = this.Columns[i];
								break;
							}
						}
					}
				}
				this.sortOrder = ((this.sortedColumn != null) ? this.sortedColumn.HeaderCell.SortGlyphDirection : SortOrder.None);
			}
			this.InvalidateCellPrivate(dataGridViewColumnHeaderCell);
		}

		// Token: 0x060018C9 RID: 6345 RVA: 0x0006FD5C File Offset: 0x0006DF5C
		private void OnTopLeftHeaderMouseDown()
		{
			if (this.MultiSelect)
			{
				this.SelectAll();
				if (-1 != this.ptCurrentCell.X)
				{
					bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserAddedRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x060018CA RID: 6346 RVA: 0x0006FDA8 File Offset: 0x0006DFA8
		protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletedRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data. </param>
		// Token: 0x060018CB RID: 6347 RVA: 0x0006FE14 File Offset: 0x0006E014
		protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletingRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowCancelEventArgs" /> that contains the event data. </param>
		// Token: 0x060018CC RID: 6348 RVA: 0x0006FE5C File Offset: 0x0006E05C
		protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e)
		{
			DataGridViewRowCancelEventHandler dataGridViewRowCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW] as DataGridViewRowCancelEventHandler;
			if (dataGridViewRowCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowCancelEventHandler(this, e);
			}
		}

		// Token: 0x060018CD RID: 6349 RVA: 0x0006FEA4 File Offset: 0x0006E0A4
		private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			if (e.Category == UserPreferenceCategory.Color || e.Category == UserPreferenceCategory.Locale || e.Category == UserPreferenceCategory.General || e.Category == UserPreferenceCategory.Window || e.Category == UserPreferenceCategory.VisualStyle)
			{
				this.OnGlobalAutoSize();
				if (e.Category == UserPreferenceCategory.Window)
				{
					this.cachedEditingControl = null;
					if (this.editingControl != null)
					{
						this.dataGridViewState2[536870912] = true;
					}
					this.PerformLayoutPrivate(false, false, false, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</summary>
		/// <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data. </param>
		/// <exception cref="T:System.Exception">Validation failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x060018CE RID: 6350 RVA: 0x0006FF1C File Offset: 0x0006E11C
		protected override void OnValidating(CancelEventArgs e)
		{
			if (!base.BecomingActiveControl && (this.editingControl == null || !this.editingControl.BecomingActiveControl))
			{
				if (!this.dataGridViewState1[64] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, false, false, false))
				{
					e.Cancel = true;
					return;
				}
				if (this.ptCurrentCell.X >= 0)
				{
					DataGridViewCell dataGridViewCell = null;
					if (this.OnRowValidating(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y))
					{
						e.Cancel = true;
						return;
					}
					if (this.ptCurrentCell.X == -1)
					{
						return;
					}
					this.OnRowValidated(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					if (this.DataSource != null && this.ptCurrentCell.X >= 0 && this.AllowUserToAddRowsInternal && this.newRowIndex == this.ptCurrentCell.Y)
					{
						int previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
						if (previousRow > -1)
						{
							bool flag = this.SetAndSelectCurrentCellAddress(this.ptCurrentCell.X, previousRow, true, false, false, false, false);
						}
						else
						{
							bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
						}
					}
				}
			}
			base.OnValidating(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
		// Token: 0x060018CF RID: 6351 RVA: 0x0007005C File Offset: 0x0006E25C
		protected override void OnVisibleChanged(EventArgs e)
		{
			base.OnVisibleChanged(e);
			this.OnVisibleChangedPrivate();
		}

		// Token: 0x060018D0 RID: 6352 RVA: 0x0007006C File Offset: 0x0006E26C
		private void OnVisibleChangedPrivate()
		{
			if (base.Visible)
			{
				int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
				int num;
				if (i > 0)
				{
					num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (i > 0)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						i--;
					}
				}
				num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				if (num > -1)
				{
					for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
					}
				}
			}
			else
			{
				this.UpdateRowsDisplayedState(false);
			}
			this.UpdateColumnsDisplayedState(base.Visible);
		}

		/// <summary>Paints the background of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the background.</param>
		/// <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
		/// <param name="gridBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area in which cells are drawn.</param>
		// Token: 0x060018D1 RID: 6353 RVA: 0x00070144 File Offset: 0x0006E344
		protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
		{
			Rectangle rect = gridBounds;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Displayed);
			if (this.layout.ColumnHeadersVisible)
			{
				rect.Y += this.layout.ColumnHeaders.Height;
				rect.Height -= this.layout.ColumnHeaders.Height;
			}
			else if (this.SingleHorizontalBorderAdded && rowsHeight > 0)
			{
				int num = rect.Y;
				rect.Y = num + 1;
				num = rect.Height;
				rect.Height = num - 1;
			}
			rect.Y += rowsHeight;
			rect.Height -= rowsHeight;
			if (rect.Width > 0 && rect.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rect);
			}
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Displayed);
			Rectangle rect2 = gridBounds;
			if (this.Columns.Count > 0)
			{
				if (this.layout.RowHeadersVisible)
				{
					if (!this.RightToLeftInternal)
					{
						rect2.X += this.layout.RowHeaders.Width;
					}
					rect2.Width -= this.layout.RowHeaders.Width;
				}
				else if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					int num;
					if (!this.RightToLeftInternal)
					{
						num = rect2.X;
						rect2.X = num + 1;
					}
					num = rect2.Width;
					rect2.Width = num - 1;
				}
			}
			int num2 = columnsWidth - this.horizontalOffset;
			if (!this.RightToLeftInternal)
			{
				rect2.X += num2;
			}
			rect2.Width -= num2;
			if (rect.Height > 0)
			{
				rect2.Height = gridBounds.Height - rect.Height;
			}
			if (rect2.Width > 0 && rect2.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rect2);
			}
		}

		// Token: 0x060018D2 RID: 6354 RVA: 0x0007033C File Offset: 0x0006E53C
		private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds)
		{
			if (this.BorderStyle == BorderStyle.None)
			{
				return;
			}
			int borderWidth = this.BorderWidth;
			Rectangle rect = new Rectangle(0, 0, bounds.Width, borderWidth);
			bool flag = clipRect.IntersectsWith(rect);
			if (!flag)
			{
				rect.Y = bounds.Height - borderWidth;
				flag = clipRect.IntersectsWith(rect);
				if (!flag)
				{
					rect.Y = 0;
					rect.Height = bounds.Height;
					rect.Width = borderWidth;
					flag = clipRect.IntersectsWith(rect);
					if (!flag)
					{
						rect.X = bounds.Width - borderWidth;
						flag = clipRect.IntersectsWith(rect);
					}
				}
			}
			if (flag)
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (Application.RenderWithVisualStyles)
					{
						Pen cachedPen = this.GetCachedPen(VisualStyleInformation.TextControlBorder);
						g.DrawRectangle(cachedPen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
						return;
					}
					ControlPaint.DrawBorder3D(g, bounds, Border3DStyle.Sunken);
					return;
				}
				else if (this.BorderStyle == BorderStyle.FixedSingle)
				{
					Pen cachedPen2 = this.GetCachedPen(SystemColors.ControlText);
					g.DrawRectangle(cachedPen2, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
				}
			}
		}

		// Token: 0x060018D3 RID: 6355 RVA: 0x00070458 File Offset: 0x0006E658
		private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded)
		{
			if (g.IsVisible(this.layout.ColumnHeaders))
			{
				Rectangle columnHeaders;
				Rectangle cellBounds = columnHeaders = this.layout.ColumnHeaders;
				columnHeaders.Height = (cellBounds.Height = this.columnHeadersHeight);
				int num = 0;
				bool flag = true;
				bool isLastVisibleColumn = false;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder = new DataGridViewAdvancedBorderStyle();
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (dataGridViewColumn != null)
				{
					DataGridViewCell headerCell = dataGridViewColumn.HeaderCell;
					cellBounds.Width = dataGridViewColumn.Thickness;
					if (singleBorderAdded && flag)
					{
						int width = cellBounds.Width;
						cellBounds.Width = width + 1;
					}
					if (this.RightToLeftInternal)
					{
						cellBounds.X = columnHeaders.Right - num - cellBounds.Width;
					}
					else
					{
						cellBounds.X = columnHeaders.X + num;
					}
					this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, headerCell);
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (nextColumn == null)
					{
						isLastVisibleColumn = (this.displayedBandsInfo.FirstDisplayedScrollingCol < 0);
					}
					DataGridViewAdvancedBorderStyle advancedBorderStyle = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStylePlaceholder, flag, isLastVisibleColumn);
					headerCell.PaintWork(g, clipBounds, cellBounds, -1, dataGridViewColumn.State, dataGridViewCellStyle, advancedBorderStyle, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
					num += cellBounds.Width;
					if (num >= columnHeaders.Width)
					{
						break;
					}
					dataGridViewColumn = nextColumn;
					flag = false;
				}
				Rectangle rectangle = columnHeaders;
				if (!this.RightToLeftInternal)
				{
					rectangle.X -= this.negOffset;
				}
				rectangle.Width += this.negOffset;
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && num < rectangle.Width)
				{
					Region region = null;
					if (this.negOffset > 0)
					{
						region = g.Clip;
						Rectangle clip = columnHeaders;
						if (!this.RightToLeftInternal)
						{
							clip.X += num;
						}
						clip.Width -= num;
						g.SetClip(clip);
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
					while (dataGridViewColumn != null)
					{
						DataGridViewCell headerCell = dataGridViewColumn.HeaderCell;
						cellBounds.Width = dataGridViewColumn.Thickness;
						if (singleBorderAdded && flag)
						{
							int width = cellBounds.Width;
							cellBounds.Width = width + 1;
						}
						if (this.RightToLeftInternal)
						{
							cellBounds.X = rectangle.Right - num - cellBounds.Width;
						}
						else
						{
							cellBounds.X = rectangle.X + num;
						}
						this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, headerCell);
						DataGridViewColumn nextColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						isLastVisibleColumn = (nextColumn == null);
						DataGridViewAdvancedBorderStyle advancedBorderStyle = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStylePlaceholder, flag, isLastVisibleColumn);
						headerCell.PaintWork(g, clipBounds, cellBounds, -1, dataGridViewColumn.State, dataGridViewCellStyle, advancedBorderStyle, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
						num += cellBounds.Width;
						if (num >= rectangle.Width)
						{
							break;
						}
						dataGridViewColumn = nextColumn;
						flag = false;
					}
					if (this.negOffset > 0)
					{
						g.Clip = region;
						region.Dispose();
					}
				}
			}
		}

		// Token: 0x060018D4 RID: 6356 RVA: 0x00070748 File Offset: 0x0006E948
		private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded)
		{
			Rectangle boundingRect = gridBounds;
			if (this.layout.TopLeftHeader.Width > 0 && (clipRect.IntersectsWith(this.layout.TopLeftHeader) || this.lastHeaderShadow != -1) && (this.Columns.Count > 0 || this.Rows.Count > 0))
			{
				using (Region clip = g.Clip)
				{
					g.SetClip(this.layout.TopLeftHeader);
					this.PaintTopLeftHeaderCell(g);
					g.Clip = clip;
				}
			}
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle rectangle = default(Rectangle);
				rectangle = this.layout.ColumnHeaders;
				if (singleVerticalBorderAdded)
				{
					int width = rectangle.Width;
					rectangle.Width = width + 1;
				}
				if (clipRect.IntersectsWith(rectangle) || this.lastHeaderShadow != -1)
				{
					using (Region clip2 = g.Clip)
					{
						g.SetClip(rectangle);
						this.PaintColumnHeaders(g, rectangle, singleVerticalBorderAdded);
						g.Clip = clip2;
					}
				}
				int height = this.layout.ColumnHeaders.Height;
				boundingRect.Y += height;
				boundingRect.Height -= height;
				if (this.lastHeaderShadow != -1)
				{
					this.DrawColHeaderShadow(g, this.lastHeaderShadow);
				}
			}
			if (boundingRect.Height > 0)
			{
				this.PaintRows(g, boundingRect, clipRect, singleHorizontalBorderAdded);
			}
			if (this.currentRowSplitBar != -1)
			{
				this.DrawRowSplitBar(this.currentRowSplitBar);
				return;
			}
			if (this.currentColSplitBar != -1)
			{
				this.DrawColSplitBar(this.currentColSplitBar);
			}
		}

		// Token: 0x060018D5 RID: 6357 RVA: 0x000708F4 File Offset: 0x0006EAF4
		private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded)
		{
			int num = 0;
			bool flag = true;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1)
			{
				Rectangle rectangle = boundingRect;
				DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
				if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None)
				{
					int height = this.Rows.SharedRow(num2).GetHeight(num2);
					this.Rows.SharedRow(num2).CachedThickness = height;
					this.AutoResizeRowInternal(num2, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
				}
				rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
				if (flag && singleHorizontalBorderAdded)
				{
					int height2 = rectangle.Height;
					rectangle.Height = height2 + 1;
				}
				rectangle.Y = boundingRect.Y + num;
				int nextRow = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (clipRect.IntersectsWith(rectangle))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
					dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, nextRow == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow == -1);
				}
				num += rectangle.Height;
				if (num >= boundingRect.Height)
				{
					break;
				}
				num2 = nextRow;
				flag = false;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && num < boundingRect.Height)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1)
				{
					Rectangle rectangle = boundingRect;
					DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal2 = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
					if (dataGridViewAutoSizeRowsModeInternal2 != DataGridViewAutoSizeRowsModeInternal.None)
					{
						int height3 = this.Rows.SharedRow(num2).GetHeight(num2);
						this.Rows.SharedRow(num2).CachedThickness = height3;
						this.AutoResizeRowInternal(num2, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
					}
					rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
					if (flag && singleHorizontalBorderAdded)
					{
						int height2 = rectangle.Height;
						rectangle.Height = height2 + 1;
					}
					rectangle.Y = boundingRect.Y + num;
					int nextRow = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (clipRect.IntersectsWith(rectangle))
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, nextRow == -1);
					}
					num += rectangle.Height;
					if (num >= boundingRect.Height)
					{
						break;
					}
					num2 = nextRow;
					flag = false;
				}
			}
		}

		// Token: 0x060018D6 RID: 6358 RVA: 0x00070B50 File Offset: 0x0006ED50
		private void PaintTopLeftHeaderCell(Graphics g)
		{
			if (g.IsVisible(this.layout.TopLeftHeader))
			{
				DataGridViewCell dataGridViewCell = this.TopLeftHeaderCell;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
				Rectangle topLeftHeader = this.layout.TopLeftHeader;
				topLeftHeader.Width = this.rowHeadersWidth;
				topLeftHeader.Height = this.columnHeadersHeight;
				dataGridViewCell.PaintWork(g, this.layout.TopLeftHeader, topLeftHeader, -1, dataGridViewCell.State, dataGridViewCellStyle, this.AdjustedTopLeftHeaderBorderStyle, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
			}
		}

		// Token: 0x060018D7 RID: 6359 RVA: 0x00070BD0 File Offset: 0x0006EDD0
		private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl)
		{
			this.inPerformLayoutCount++;
			try
			{
				if (invalidInAdjustFillingColumns && this.InAdjustFillingColumns)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
				}
				if (base.IsHandleCreated)
				{
					bool flag = false;
					if (useRowShortcut)
					{
						this.ComputeLayoutShortcut(computeVisibleRows);
					}
					else
					{
						flag = this.ComputeLayout();
					}
					this.FlushDisplayedChanged();
					if (flag && this.inPerformLayoutCount < 3)
					{
						if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
						{
							this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						}
						if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
						{
							this.AutoResizeColumnHeadersHeight(true, true);
						}
					}
					if (repositionEditingControl && this.editingControl != null)
					{
						this.PositionEditingControl(true, false, false);
					}
				}
				else
				{
					this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
					this.displayedBandsInfo.FirstDisplayedFrozenRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
					this.displayedBandsInfo.NumDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
					this.displayedBandsInfo.NumDisplayedScrollingRows = 0;
					this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
					this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
					this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
					if (this.layout != null)
					{
						this.layout.dirty = true;
					}
				}
			}
			finally
			{
				this.inPerformLayoutCount--;
			}
		}

		// Token: 0x060018D8 RID: 6360 RVA: 0x00070D50 File Offset: 0x0006EF50
		private void PopulateNewRowWithDefaultValues()
		{
			if (this.newRowIndex != -1)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.newRowIndex);
				DataGridViewCellCollection cells = dataGridViewRow.Cells;
				foreach (object obj in cells)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (dataGridViewCell.DefaultNewRowValue != null)
					{
						dataGridViewRow = this.Rows[this.newRowIndex];
						cells = dataGridViewRow.Cells;
						break;
					}
				}
				foreach (object obj2 in cells)
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj2;
					dataGridViewCell2.SetValueInternal(this.newRowIndex, dataGridViewCell2.DefaultNewRowValue);
				}
			}
		}

		// Token: 0x060018D9 RID: 6361 RVA: 0x00070E44 File Offset: 0x0006F044
		private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus)
		{
			if (!base.IsHandleCreated)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if (data.Width == 0 || data.Height == 0)
			{
				return;
			}
			this.dataGridViewState1[16384] = true;
			try
			{
				int num = this.GetColumnXFromIndex(this.ptCurrentCell.X);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[this.ptCurrentCell.X].Width - 1;
				}
				Rectangle rectangle = new Rectangle(num, this.GetRowYFromIndex(this.ptCurrentCell.Y), this.Columns[this.ptCurrentCell.X].Width, this.Rows.SharedRow(this.ptCurrentCell.Y).GetHeight(this.ptCurrentCell.Y));
				Rectangle cellClip = rectangle;
				if (!this.Columns[this.ptCurrentCell.X].Frozen)
				{
					int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					if (!this.RightToLeftInternal)
					{
						data.X += columnsWidth;
					}
					data.Width = Math.Max(0, data.Width - columnsWidth);
				}
				if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					data.Y += rowsHeight;
				}
				cellClip.Intersect(data);
				if (cellClip.Width == 0 || cellClip.Height == 0)
				{
					this.editingPanel.Location = new Point(base.Width + 1, 0);
					this.dataGridViewState1[4096] = true;
				}
				else
				{
					bool singleVerticalBorderAdded = this.SingleVerticalBorderAdded;
					bool singleHorizontalBorderAdded = this.SingleHorizontalBorderAdded;
					bool flag = this.FirstDisplayedColumnIndex == this.ptCurrentCell.X;
					bool flag2 = this.FirstDisplayedRowIndex == this.ptCurrentCell.Y;
					if (singleVerticalBorderAdded && flag)
					{
						int num2;
						if (!this.RightToLeftInternal)
						{
							num2 = rectangle.X;
							rectangle.X = num2 - 1;
							num2 = cellClip.X;
							cellClip.X = num2 - 1;
						}
						num2 = rectangle.Width;
						rectangle.Width = num2 + 1;
						num2 = cellClip.Width;
						cellClip.Width = num2 + 1;
					}
					if (singleHorizontalBorderAdded && flag2)
					{
						int num2 = rectangle.Y;
						rectangle.Y = num2 - 1;
						num2 = cellClip.Y;
						cellClip.Y = num2 - 1;
						num2 = rectangle.Height;
						rectangle.Height = num2 + 1;
						num2 = cellClip.Height;
						cellClip.Height = num2 + 1;
					}
					this.CurrentCellInternal.PositionEditingControl(setLocation || this.dataGridViewState1[4096], setSize || this.dataGridViewState1[4096], rectangle, cellClip, this.InheritedEditingCellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, flag, flag2);
					this.dataGridViewState1[4096] = false;
				}
				this.editingPanel.Visible = true;
				if (setFocus)
				{
					this.CorrectFocus(false);
				}
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
			}
		}

		/// <summary>Processes the A key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x060018DA RID: 6362 RVA: 0x00071184 File Offset: 0x0006F384
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessAKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control && this.MultiSelect)
			{
				this.SelectAll();
				return true;
			}
			return false;
		}

		/// <summary>Processes the DELETE key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018DB RID: 6363 RVA: 0x000711A8 File Offset: 0x0006F3A8
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDeleteKey(Keys keyData)
		{
			if (this.AllowUserToDeleteRowsInternal)
			{
				if (this.editingControl != null)
				{
					return false;
				}
				DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
				if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					int num = 0;
					try
					{
						this.selectedBandSnapshotIndexes = new DataGridViewIntLinkedList(this.selectedBandIndexes);
						while (this.selectedBandSnapshotIndexes.Count > num)
						{
							int num2 = this.selectedBandSnapshotIndexes[num];
							if (num2 == this.newRowIndex || num2 >= this.Rows.Count)
							{
								num++;
							}
							else
							{
								DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[num2]);
								this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
								if (!dataGridViewRowCancelEventArgs.Cancel)
								{
									DataGridViewRow dataGridViewRow = this.Rows[num2];
									if (this.DataSource != null)
									{
										int count = this.Rows.Count;
										DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
										try
										{
											this.DataConnection.DeleteRow(num2);
										}
										catch (Exception ex)
										{
											if (ClientUtils.IsCriticalException(ex))
											{
												throw;
											}
											dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, num2, DataGridViewDataErrorContexts.RowDeletion);
											this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
											if (dataGridViewDataErrorEventArgs.ThrowException)
											{
												throw dataGridViewDataErrorEventArgs.Exception;
											}
											num++;
										}
										if (count != this.Rows.Count)
										{
											DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
											this.OnUserDeletedRow(e);
										}
										else if (dataGridViewDataErrorEventArgs == null)
										{
											num++;
										}
									}
									else
									{
										this.Rows.RemoveAtInternal(num2, false);
										DataGridViewRowEventArgs e2 = new DataGridViewRowEventArgs(dataGridViewRow);
										this.OnUserDeletedRow(e2);
									}
								}
								else
								{
									num++;
								}
							}
						}
					}
					finally
					{
						this.selectedBandSnapshotIndexes = null;
					}
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes keys, such as the TAB, ESCAPE, ENTER, and ARROW keys, used to control dialog boxes.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018DC RID: 6364 RVA: 0x00071358 File Offset: 0x0006F558
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			Keys keys = keyData & Keys.KeyCode;
			if (keys == Keys.Return)
			{
				if (this.ProcessEnterKey(keyData))
				{
					return true;
				}
			}
			else
			{
				if (keys == Keys.Escape)
				{
					bool isEscapeKeyEffective = this.IsEscapeKeyEffective;
					bool result = base.ProcessDialogKey(keyData);
					if (!isEscapeKeyEffective && this.Focused && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
					{
						this.BeginEditInternal(true);
					}
					return result;
				}
				if (keys == Keys.D0 || keys == Keys.NumPad0)
				{
					if (this.ProcessZeroKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.C || keys == Keys.Insert)
				{
					if (this.ProcessInsertKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.Tab)
				{
					IntSecurity.AllWindows.Demand();
					if (this.ProcessTabKey(keyData))
					{
						return true;
					}
					if (this.editingControl != null)
					{
						this.dataGridViewState1[64] = true;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, true, true, true, true, true, false, false, false))
						{
							return true;
						}
					}
					keyData &= ~Keys.Control;
					bool result2 = false;
					IntSecurity.ModifyFocus.Assert();
					try
					{
						result2 = base.ProcessDialogKey(keyData);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
					if (this.dataGridViewState1[64] && this.Focused)
					{
						this.OnEnter(EventArgs.Empty);
					}
					return result2;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		/// <summary>Processes the DOWN ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The DOWN ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018DD RID: 6365 RVA: 0x000714C0 File Offset: 0x0006F6C0
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDownKey(Keys keyData)
		{
			bool flag;
			return this.ProcessDownKeyInternal(keyData, out flag);
		}

		// Token: 0x060018DE RID: 6366 RVA: 0x000714D8 File Offset: 0x0006F6D8
		private bool ProcessDownKeyInternal(Keys keyData, out bool moved)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (firstColumn == null) ? -1 : firstColumn.Index;
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || lastRow == -1)
			{
				moved = false;
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			moved = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptCurrentCell.X == -1 || this.ptAnchorCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, lastRow);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								if (num2 >= this.ptAnchorCell.Y)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, lastRow);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(lastRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										moved = false;
										return true;
									}
									if (num2 >= this.ptAnchorCell.Y)
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
									else
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
								}
								else
								{
									this.SetSelectedRowCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		/// <summary>Processes the END key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The END key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018DF RID: 6367 RVA: 0x0007269C File Offset: 0x0007089C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEndKey(Keys keyData)
		{
			DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = (lastColumn == null) ? -1 : lastColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.Y >= 0)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
						}
						else
						{
							this.SetSelectedRowCore(lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedRowCore(lastRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							this.SelectColumnRange(this.ptAnchorCell.X, num, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(this.ptCurrentCell.Y, lastRow, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, lastRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(this.ptAnchorCell.X, num, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num2 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num2 - 1;
			}
			return true;
		}

		/// <summary>Processes the ENTER key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The ENTER key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E0 RID: 6368 RVA: 0x00072D98 File Offset: 0x00070F98
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEnterKey(Keys keyData)
		{
			bool flag = false;
			bool result = true;
			if ((keyData & Keys.Control) == Keys.None)
			{
				keyData &= ~Keys.Shift;
				result = this.ProcessDownKeyInternal(keyData, out flag);
			}
			if (!flag)
			{
				DataGridViewCell dataGridViewCell = null;
				if (this.EditMode == DataGridViewEditMode.EditOnEnter)
				{
					if (this.ptCurrentCell.X != -1)
					{
						dataGridViewCell = this.CurrentCellInternal;
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref dataGridViewCell, DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false);
						if (dataGridViewDataErrorEventArgs != null && dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
					}
				}
				else
				{
					this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false, true, true, true);
				}
				if (this.IsCurrentRowDirty)
				{
					dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return result;
					}
					if (!this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return result;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			return result;
		}

		/// <summary>Processes the ESC key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />. </returns>
		// Token: 0x060018E1 RID: 6369 RVA: 0x00072E80 File Offset: 0x00071080
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEscapeKey(Keys keyData)
		{
			if (this.IsEscapeKeyEffective)
			{
				if (this.IsMouseOperationActive())
				{
					this.ResetTrackingState();
				}
				else
				{
					this.CancelEdit(true);
				}
				return true;
			}
			return false;
		}

		/// <summary>Processes the F2 key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />. </returns>
		/// <exception cref="T:System.InvalidCastException">The F2 key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">The F2 key would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E2 RID: 6370 RVA: 0x00072EA8 File Offset: 0x000710A8
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessF2Key(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && Control.ModifierKeys == Keys.None && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(this.CurrentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2 || this.EditMode == DataGridViewEditMode.EditOnF2))
			{
				bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
				this.BeginEditInternal(this.EditMode == DataGridViewEditMode.EditOnF2);
				return true;
			}
			return false;
		}

		/// <summary>Processes the F3 key by sorting the current column. </summary>
		/// <param name="keyData">A bitwise combination of values that represents the key or keys to process. </param>
		// Token: 0x060018E3 RID: 6371 RVA: 0x00072F44 File Offset: 0x00071144
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessF3Key(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && AccessibilityImprovements.Level2)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[this.ptCurrentCell.X];
				if (dataGridViewColumn != null && this.CanSort(dataGridViewColumn))
				{
					ListSortDirection direction = (this.SortedColumn == dataGridViewColumn && this.SortOrder == SortOrder.Ascending) ? ListSortDirection.Descending : ListSortDirection.Ascending;
					this.Sort(dataGridViewColumn, direction);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes the HOME key.</summary>
		/// <param name="keyData">The key that was pressed.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The HOME key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E4 RID: 6372 RVA: 0x00072FAC File Offset: 0x000711AC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessHomeKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (firstColumn == null) ? -1 : firstColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
				{
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					this.SetSelectedRowCore(firstRow, true);
					bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					return true;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.SelectColumnRange(num, this.ptAnchorCell.X, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, firstRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(num, this.ptAnchorCell.X, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num2 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num2 - 1;
			}
			return true;
		}

		/// <summary>Processes the INSERT key.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x060018E5 RID: 6373 RVA: 0x00073614 File Offset: 0x00071814
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessInsertKey(Keys keyData)
		{
			if (((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control || ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == (Keys.Shift | Keys.Control) && (keyData & Keys.KeyCode) == Keys.C)) && this.ClipboardCopyMode != DataGridViewClipboardCopyMode.Disable)
			{
				DataObject clipboardContent = this.GetClipboardContent();
				if (clipboardContent != null)
				{
					Clipboard.SetDataObject(clipboardContent);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes a key message and generates the appropriate control events.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		/// <returns>
		///     <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E6 RID: 6374 RVA: 0x00073664 File Offset: 0x00071864
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyEventArgs(ref Message m)
		{
			if (m.Msg == 260 || m.Msg == 256)
			{
				if (this.ptCurrentCell.X != -1)
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2))
					{
						KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)((long)m.WParam) | Control.ModifierKeys);
						if (keyEventArgs.KeyCode != Keys.ProcessKey || (int)m.LParam != 1)
						{
							Type editType = currentCellInternal.EditType;
							Type left = null;
							if (editType == null)
							{
								left = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
							}
							if ((editType != null || left == null) && currentCellInternal.KeyEntersEditMode(keyEventArgs))
							{
								bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								if (this.BeginEditInternal(keyEventArgs.KeyCode != Keys.F2 || Control.ModifierKeys != Keys.None || this.EditMode != DataGridViewEditMode.EditOnKeystrokeOrF2) && this.editingControl != null)
								{
									this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
									this.dataGridViewState1[32] = true;
									return true;
								}
							}
						}
					}
				}
			}
			else if (this.dataGridViewState1[32] && (m.Msg == 262 || m.Msg == 258 || m.Msg == 646))
			{
				this.dataGridViewState1[32] = false;
				if (this.editingControl != null)
				{
					this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
					return true;
				}
			}
			return base.ProcessKeyEventArgs(ref m);
		}

		/// <summary>Previews a keyboard message.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		/// <returns>
		///     <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E7 RID: 6375 RVA: 0x00073864 File Offset: 0x00071A64
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyPreview(ref Message m)
		{
			KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)((int)m.WParam | (int)Control.ModifierKeys));
			bool flag;
			if (m.Msg == 258)
			{
				Keys keyCode = keyEventArgs.KeyCode;
				flag = (keyCode == Keys.Escape || keyCode == Keys.Space);
			}
			else
			{
				Keys keyCode = keyEventArgs.KeyCode;
				if (keyCode <= Keys.Return)
				{
					if (keyCode != Keys.Tab && keyCode != Keys.Return)
					{
						goto IL_BC;
					}
				}
				else
				{
					switch (keyCode)
					{
					case Keys.Escape:
					case Keys.Space:
					case Keys.Prior:
					case Keys.Next:
					case Keys.End:
					case Keys.Home:
					case Keys.Left:
					case Keys.Up:
					case Keys.Right:
					case Keys.Down:
					case Keys.Delete:
						break;
					case Keys.IMEConvert:
					case Keys.IMENonconvert:
					case Keys.IMEAccept:
					case Keys.IMEModeChange:
					case Keys.Select:
					case Keys.Print:
					case Keys.Execute:
					case Keys.Snapshot:
					case Keys.Insert:
						goto IL_BC;
					default:
						if (keyCode - Keys.F2 > 1)
						{
							goto IL_BC;
						}
						break;
					}
				}
				flag = true;
				goto IL_BE;
				IL_BC:
				flag = false;
			}
			IL_BE:
			if (this.editingControl != null && (m.Msg == 256 || m.Msg == 260))
			{
				this.dataGridViewState2[8192] = ((IDataGridViewEditingControl)this.editingControl).EditingControlWantsInputKey(keyEventArgs.KeyData, flag);
			}
			if (this.dataGridViewState2[8192])
			{
				return base.ProcessKeyPreview(ref m);
			}
			if (flag)
			{
				if (m.Msg != 256 && m.Msg != 260)
				{
					return true;
				}
				if (this.ProcessDataGridViewKey(keyEventArgs))
				{
					return true;
				}
				this.dataGridViewState2[8192] = true;
			}
			return base.ProcessKeyPreview(ref m);
		}

		// Token: 0x060018E8 RID: 6376 RVA: 0x000739D8 File Offset: 0x00071BD8
		private bool? ProcessColumnResize(Keys keyData, int step)
		{
			if (!AccessibilityImprovements.Level2 || (keyData & Keys.Alt) != Keys.Alt || !this.AllowUserToResizeColumns || this.ptCurrentCell.X == -1)
			{
				return null;
			}
			if (this.currentColSplitBar == -1)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[this.ptCurrentCell.X];
				if (dataGridViewColumn != null && dataGridViewColumn.Resizable == DataGridViewTriState.True && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
				{
					this.BeginKeyboardColumnResize(this.ptCurrentCell.X);
					return new bool?(true);
				}
				return new bool?(false);
			}
			else
			{
				int x = this.currentColSplitBar + step;
				if (this.dataGridViewOper[16777216] && this.resizeClipRectangle.Contains(x, this.resizeClipRectangle.Top))
				{
					this.MoveRowHeadersOrColumnResize(x);
					return new bool?(true);
				}
				return new bool?(false);
			}
		}

		/// <summary>Processes the LEFT ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The LEFT ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018E9 RID: 6377 RVA: 0x00073ACC File Offset: 0x00071CCC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessLeftKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessRightKeyPrivate(keyData);
			}
			return this.ProcessLeftKeyPrivate(keyData);
		}

		// Token: 0x060018EA RID: 6378 RVA: 0x00073AE8 File Offset: 0x00071CE8
		private bool ProcessLeftKeyPrivate(Keys keyData)
		{
			bool? flag = this.ProcessColumnResize(keyData, -this.keyboardResizeStep);
			if (flag != null)
			{
				return flag.Value;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (dataGridViewColumn == null) ? -1 : dataGridViewColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								this.SetSelectedColumnCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		// Token: 0x060018EB RID: 6379 RVA: 0x00074438 File Offset: 0x00072638
		private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
							}
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							}
							else
							{
								this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							}
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			return true;
		}

		/// <summary>Processes the PAGE DOWN key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The PAGE DOWN key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018EC RID: 6380 RVA: 0x00074C1C File Offset: 0x00072E1C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessNextKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (firstColumn == null) ? -1 : firstColumn.Index;
			if (num == -1)
			{
				return false;
			}
			int num2 = 0;
			int num3;
			if (this.ptCurrentCell.Y == -1)
			{
				num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num3 == -1)
				{
					return false;
				}
			}
			else
			{
				num3 = this.ptCurrentCell.Y;
			}
			if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingRow > 0)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (!this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
					{
						return true;
					}
					num2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.ptCurrentCell.Y, firstRow) - 1;
				}
				else
				{
					num2 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
				}
			}
			num2 += this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			int num4 = num3;
			if (num2 == 0)
			{
				num2 = 1;
			}
			while (num2 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num3 = num4;
					num2--;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num3, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num3, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					bool flag = this.ScrollIntoView(num, num3, false);
					if (this.IsInnerCellOutOfBounds(num, num3))
					{
						return true;
					}
					flag = this.SetCurrentCellAddressCore(num, num3, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num3);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullRowSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num3)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
							}
							else
							{
								this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullColumnSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, true, false, false);
						return true;
					}
					case DataGridViewSelectionMode.RowHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num3)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
								}
								else
								{
									this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num3);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num3, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, !this.MultiSelect, false, false);
						return true;
					}
					}
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			return true;
		}

		/// <summary>Processes the PAGE UP key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The PAGE UP key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018ED RID: 6381 RVA: 0x000751C4 File Offset: 0x000733C4
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessPriorKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (firstColumn == null) ? -1 : firstColumn.Index;
			if (num == -1)
			{
				return false;
			}
			int num2;
			if (this.ptCurrentCell.Y == -1)
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num2 == -1)
				{
					return false;
				}
			}
			else
			{
				num2 = this.ptCurrentCell.Y;
			}
			int num3;
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
			}
			else
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			if (num3 == 0)
			{
				num3 = 1;
			}
			int num4 = num2;
			while (num3 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num2 = num4;
				}
				num3--;
			}
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (firstRow != -1 && !this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
				{
					return true;
				}
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num2, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num2, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					bool flag = this.ScrollIntoView(num, num2, false);
					if (this.IsInnerCellOutOfBounds(num, num2))
					{
						return true;
					}
					flag = this.SetCurrentCellAddressCore(num, num2, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num2);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullRowSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num2)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
							}
							else
							{
								this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullColumnSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
						return true;
					}
					case DataGridViewSelectionMode.RowHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num2)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						return true;
					}
					}
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			return true;
		}

		/// <summary>Processes the RIGHT ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The RIGHT ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018EE RID: 6382 RVA: 0x00075760 File Offset: 0x00073960
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessRightKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessLeftKeyPrivate(keyData);
			}
			return this.ProcessRightKeyPrivate(keyData);
		}

		// Token: 0x060018EF RID: 6383 RVA: 0x0007577C File Offset: 0x0007397C
		private bool ProcessRightKeyPrivate(Keys keyData)
		{
			bool? flag = this.ProcessColumnResize(keyData, this.keyboardResizeStep);
			if (flag != null)
			{
				return flag.Value;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = (dataGridViewColumn == null) ? -1 : dataGridViewColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								else
								{
									this.SetSelectedColumnCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		// Token: 0x060018F0 RID: 6384 RVA: 0x000760D4 File Offset: 0x000742D4
		private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.ClearSelection();
								this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.ClearSelection();
									this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								}
								else
								{
									int x2 = this.ptCurrentCell.X;
									int y2 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
								}
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
									this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								}
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			return true;
		}

		/// <summary>Processes the SPACEBAR.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x060018F1 RID: 6385 RVA: 0x0007681C File Offset: 0x00074A1C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessSpaceKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && this.ptCurrentCell.X != -1)
			{
				this.noSelectionChangeCount++;
				bool flag = false;
				if (this.selectedBandIndexes.Count > 8)
				{
					this.inBulkPaintCount++;
					flag = true;
				}
				try
				{
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						int i = 0;
						while (i < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[i] != this.ptCurrentCell.X)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
							}
							else
							{
								i++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if (!this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.SetSelectedColumnCore(this.ptCurrentCell.X, true);
						}
						return true;
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						int j = 0;
						while (j < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[j] != this.ptCurrentCell.Y)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes[j], false);
							}
							else
							{
								j++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(this.ptCurrentCell.Y, true);
						}
						return true;
					}
				}
				finally
				{
					int num = this.NoSelectionChangeCount;
					this.NoSelectionChangeCount = num - 1;
					if (flag)
					{
						this.ExitBulkPaint(-1, -1);
					}
				}
				return false;
			}
			return false;
		}

		/// <summary>Processes the TAB key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />. </returns>
		/// <exception cref="T:System.InvalidCastException">The TAB key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018F2 RID: 6386 RVA: 0x000769CC File Offset: 0x00074BCC
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected bool ProcessTabKey(Keys keyData)
		{
			if (this.StandardTab)
			{
				if ((keyData & Keys.Control) != Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
			else
			{
				if ((keyData & Keys.Control) == Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
		}

		/// <summary>Processes keys used for navigating in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <param name="e">Contains information about the key that was pressed.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.-or-The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018F3 RID: 6387 RVA: 0x00076A80 File Offset: 0x00074C80
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected virtual bool ProcessDataGridViewKey(KeyEventArgs e)
		{
			Keys keyCode = e.KeyCode;
			if (keyCode <= Keys.A)
			{
				if (keyCode <= Keys.Return)
				{
					if (keyCode == Keys.Tab)
					{
						return this.ProcessTabKey(e.KeyData);
					}
					if (keyCode != Keys.Return)
					{
						return false;
					}
					return this.ProcessEnterKey(e.KeyData);
				}
				else
				{
					switch (keyCode)
					{
					case Keys.Escape:
						return this.ProcessEscapeKey(e.KeyData);
					case Keys.IMEConvert:
					case Keys.IMENonconvert:
					case Keys.IMEAccept:
					case Keys.IMEModeChange:
					case Keys.Select:
					case Keys.Print:
					case Keys.Execute:
					case Keys.Snapshot:
					case Keys.Help:
						return false;
					case Keys.Space:
						return this.ProcessSpaceKey(e.KeyData);
					case Keys.Prior:
						return this.ProcessPriorKey(e.KeyData);
					case Keys.Next:
						return this.ProcessNextKey(e.KeyData);
					case Keys.End:
						return this.ProcessEndKey(e.KeyData);
					case Keys.Home:
						return this.ProcessHomeKey(e.KeyData);
					case Keys.Left:
						return this.ProcessLeftKey(e.KeyData);
					case Keys.Up:
						return this.ProcessUpKey(e.KeyData);
					case Keys.Right:
						return this.ProcessRightKey(e.KeyData);
					case Keys.Down:
						return this.ProcessDownKey(e.KeyData);
					case Keys.Insert:
						goto IL_190;
					case Keys.Delete:
						return this.ProcessDeleteKey(e.KeyData);
					case Keys.D0:
						break;
					default:
						if (keyCode != Keys.A)
						{
							return false;
						}
						return this.ProcessAKey(e.KeyData);
					}
				}
			}
			else if (keyCode <= Keys.NumPad0)
			{
				if (keyCode == Keys.C)
				{
					goto IL_190;
				}
				if (keyCode != Keys.NumPad0)
				{
					return false;
				}
			}
			else
			{
				if (keyCode == Keys.F2)
				{
					return this.ProcessF2Key(e.KeyData);
				}
				if (keyCode != Keys.F3)
				{
					return false;
				}
				return this.ProcessF3Key(e.KeyData);
			}
			return this.ProcessZeroKey(e.KeyData);
			IL_190:
			return this.ProcessInsertKey(e.KeyData);
		}

		/// <summary>Processes the UP ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The UP ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018F4 RID: 6388 RVA: 0x00076C38 File Offset: 0x00074E38
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessUpKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (firstColumn == null) ? -1 : firstColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, firstRow);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(firstRow, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								if (this.ptAnchorCell.Y >= num2)
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
								else
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, firstRow);
								}
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(firstRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								}
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										return true;
									}
									if (this.ptAnchorCell.Y >= num2)
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
									else
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
								}
								this.SetSelectedRowCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		/// <summary>Processes the 0 key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The 0 key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. </exception>
		// Token: 0x060018F5 RID: 6389 RVA: 0x00077C64 File Offset: 0x00075E64
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessZeroKey(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X))
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2) && currentCellInternal.EditType != null)
				{
					bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
					if (!this.BeginEditInternal(false))
					{
						return false;
					}
				}
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) != Keys.Control || !this.IsCurrentCellInEditMode)
			{
				return false;
			}
			DataGridViewCell currentCellInternal2 = this.CurrentCellInternal;
			object nullValue = currentCellInternal2.GetInheritedStyle(null, this.ptCurrentCell.Y, false).NullValue;
			if (nullValue == null || (currentCellInternal2.FormattedValueType != null && currentCellInternal2.FormattedValueType.IsAssignableFrom(nullValue.GetType())))
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = nullValue;
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = true;
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
				}
				else
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal2 as IDataGridViewEditingCell;
					dataGridViewEditingCell.EditingCellFormattedValue = nullValue;
					dataGridViewEditingCell.EditingCellValueChanged = true;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				this.NotifyCurrentCellDirty(true);
				return true;
			}
			return false;
		}

		// Token: 0x060018F6 RID: 6390 RVA: 0x00077DEC File Offset: 0x00075FEC
		private void PushAllowUserToAddRows()
		{
			if (this.AllowUserToAddRowsInternal)
			{
				if (this.Columns.Count > 0 && this.newRowIndex == -1)
				{
					this.AddNewRow(false);
					return;
				}
			}
			else if (this.newRowIndex != -1)
			{
				this.Rows.RemoveAtInternal(this.newRowIndex, false);
			}
		}

		// Token: 0x060018F7 RID: 6391 RVA: 0x00077E3C File Offset: 0x0007603C
		private bool PushFormattedValue(ref DataGridViewCell dataGridViewCurrentCell, object formattedValue, out Exception exception)
		{
			exception = null;
			DataGridViewCellStyle inheritedEditingCellStyle = this.InheritedEditingCellStyle;
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = this.OnCellParsing(this.ptCurrentCell.Y, this.ptCurrentCell.X, formattedValue, dataGridViewCurrentCell.ValueType, inheritedEditingCellStyle);
			if (dataGridViewCellParsingEventArgs.ParsingApplied && dataGridViewCellParsingEventArgs.Value != null && dataGridViewCurrentCell.ValueType != null && dataGridViewCurrentCell.ValueType.IsAssignableFrom(dataGridViewCellParsingEventArgs.Value.GetType()))
			{
				if (dataGridViewCurrentCell.RowIndex == -1)
				{
					dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
				}
				return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, dataGridViewCellParsingEventArgs.Value);
			}
			object value;
			try
			{
				value = dataGridViewCurrentCell.ParseFormattedValue(formattedValue, dataGridViewCellParsingEventArgs.InheritedCellStyle, null, null);
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				exception = ex;
				return false;
			}
			if (dataGridViewCurrentCell.RowIndex == -1)
			{
				dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
			}
			return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, value);
		}

		// Token: 0x060018F8 RID: 6392 RVA: 0x00077F88 File Offset: 0x00076188
		private void RecordCellMouseClick(DataGridViewCellMouseEventArgs dgvcme)
		{
			this.lastMouseClickInfo.button = dgvcme.Button;
			this.lastMouseClickInfo.timeStamp = DateTime.Now.Ticks;
			this.lastMouseClickInfo.x = dgvcme.X;
			this.lastMouseClickInfo.y = dgvcme.Y;
			this.lastMouseClickInfo.col = dgvcme.ColumnIndex;
			this.lastMouseClickInfo.row = dgvcme.RowIndex;
		}

		// Token: 0x060018F9 RID: 6393 RVA: 0x00078002 File Offset: 0x00076202
		private void RefreshColumnsAndRows()
		{
			this.Rows.ClearInternal(false);
			this.RefreshColumns();
			this.RefreshRows(true);
		}

		// Token: 0x060018FA RID: 6394 RVA: 0x00078020 File Offset: 0x00076220
		private void RefreshColumns()
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			this.dataGridViewOper[1024] = true;
			try
			{
				DataGridViewColumnCollection columns = this.Columns;
				DataGridViewColumn[] boundColumns = null;
				if (this.dataConnection != null)
				{
					boundColumns = this.dataConnection.GetCollectionOfBoundDataGridViewColumns();
				}
				if (this.AutoGenerateColumns)
				{
					this.AutoGenerateDataBoundColumns(boundColumns);
				}
				else
				{
					for (int i = 0; i < columns.Count; i++)
					{
						columns[i].IsDataBoundInternal = false;
						columns[i].BoundColumnIndex = -1;
						columns[i].BoundColumnConverter = null;
						if (this.DataSource != null && columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(columns[i]);
						}
					}
				}
				if (this.DataSource != null)
				{
					this.dataConnection.ApplySortingInformationFromBackEnd();
				}
			}
			finally
			{
				this.dataGridViewOper[1024] = false;
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		/// <summary>Refreshes the value of the current cell with the underlying cell value when the cell is in edit mode, discarding any previous value.</summary>
		/// <returns>
		///     <see langword="true" /> if successful; <see langword="false" /> if a <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event occurred.</returns>
		// Token: 0x060018FB RID: 6395 RVA: 0x00078128 File Offset: 0x00076328
		public bool RefreshEdit()
		{
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return true;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
			if (this.editingControl != null)
			{
				if (this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal))
				{
					if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
					{
						this.PositionEditingControl(true, true, false);
					}
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
			else
			{
				if (this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal))
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal as IDataGridViewEditingCell;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					dataGridViewEditingCell.EditingCellValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
		}

		// Token: 0x060018FC RID: 6396 RVA: 0x000781F4 File Offset: 0x000763F4
		private void RefreshRows(bool scrollIntoView)
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			try
			{
				if (this.dataGridViewOper[131072])
				{
					this.dataGridViewState2[4194304] = true;
				}
				this.Rows.ClearInternal(true);
				if (this.dataConnection != null && this.Columns.Count > 0)
				{
					IList list = this.dataConnection.List;
					if (list != null && list.Count > 0)
					{
						int count = list.Count;
						bool doNotChangePositionInTheCurrencyManager = this.dataConnection.DoNotChangePositionInTheCurrencyManager;
						bool flag = !this.layout.dirty && !this.InSortOperation;
						if (flag)
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = true;
						}
						try
						{
							this.Rows.AddInternal(this.RowTemplateClone);
							if (count > 1)
							{
								this.Rows.AddCopiesInternal(0, count - 1);
							}
							foreach (object obj in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
								if (dataGridViewColumn.Selected && !this.selectedBandIndexes.Contains(dataGridViewColumn.Index))
								{
									this.selectedBandIndexes.Add(dataGridViewColumn.Index);
								}
							}
						}
						finally
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = doNotChangePositionInTheCurrencyManager;
						}
						if (flag)
						{
							this.dataConnection.MatchCurrencyManagerPosition(scrollIntoView, true);
						}
					}
				}
			}
			finally
			{
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		// Token: 0x060018FD RID: 6397 RVA: 0x000783CC File Offset: 0x000765CC
		private void RealeaseMouse()
		{
			Cursor.ClipInternal = Rectangle.Empty;
			base.CaptureInternal = false;
		}

		// Token: 0x060018FE RID: 6398 RVA: 0x000783E0 File Offset: 0x000765E0
		private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x060018FF RID: 6399 RVA: 0x00078430 File Offset: 0x00076630
		private void RemoveIndividualReadOnlyCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, rowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06001900 RID: 6400 RVA: 0x0007847C File Offset: 0x0007667C
		private void RemoveIndividuallySelectedCells()
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001901 RID: 6401 RVA: 0x000784F8 File Offset: 0x000766F8
		private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException)
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell dataGridViewCell = this.individualSelectedCells.HeadCell;
					if (dataGridViewCell.ColumnIndex == columnIndexException && dataGridViewCell.RowIndex == rowIndexException)
					{
						while (this.individualSelectedCells.Count > 1)
						{
							dataGridViewCell = this.individualSelectedCells[1];
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						break;
					}
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001902 RID: 6402 RVA: 0x000785B8 File Offset: 0x000767B8
		private void RemoveIndividuallySelectedCellsInColumn(int columnIndex)
		{
			int i = 0;
			int num = 0;
			bool flag = false;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
					num++;
					if (num > 8)
					{
						flag = true;
						break;
					}
				}
				else
				{
					i++;
				}
			}
			if (flag)
			{
				this.inBulkPaintCount++;
				try
				{
					while (i < this.individualSelectedCells.Count)
					{
						DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
						if (dataGridViewCell.ColumnIndex == columnIndex)
						{
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						else
						{
							i++;
						}
					}
				}
				finally
				{
					this.ExitBulkPaint(columnIndex, -1);
				}
			}
		}

		// Token: 0x06001903 RID: 6403 RVA: 0x00078680 File Offset: 0x00076880
		private void RemoveIndividuallySelectedCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06001904 RID: 6404 RVA: 0x000786CE File Offset: 0x000768CE
		private void ResetBackgroundColor()
		{
			this.BackgroundColor = DataGridView.DefaultBackgroundBrush.Color;
		}

		// Token: 0x06001905 RID: 6405 RVA: 0x000786E0 File Offset: 0x000768E0
		private void ResetGridColor()
		{
			this.GridColor = DataGridView.DefaultGridColor;
		}

		/// <summary>Resets the <see cref="P:System.Windows.Forms.DataGridView.Text" /> property to its default value.</summary>
		// Token: 0x06001906 RID: 6406 RVA: 0x00022A32 File Offset: 0x00020C32
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void ResetText()
		{
			base.ResetText();
		}

		// Token: 0x06001907 RID: 6407 RVA: 0x000786F0 File Offset: 0x000768F0
		private void ResetTrackingState()
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
			{
				this.horizScrollTimer.Enabled = false;
			}
			if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
			{
				this.vertScrollTimer.Enabled = false;
			}
			this.dataGridViewOper[419] = false;
			this.dataGridViewOper[4] = false;
			this.dataGridViewOper[8] = false;
			this.dataGridViewOper[16] = false;
			this.trackColumn = -1;
			this.trackRow = -1;
			this.ptMouseDownCell.X = -2;
			this.ptMouseDownCell.Y = -2;
			if (this.currentRowSplitBar != -1)
			{
				base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
				this.lastRowSplitBar = (this.currentRowSplitBar = -1);
			}
			if (this.currentColSplitBar != -1)
			{
				base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
				this.lastColSplitBar = (this.currentColSplitBar = -1);
			}
			if (this.lastHeaderShadow != -1)
			{
				this.dataGridViewState2[1024] = false;
				this.trackColumnEdge = -1;
				this.lastHeaderShadow = -1;
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
			}
			this.RealeaseMouse();
		}

		// Token: 0x06001908 RID: 6408 RVA: 0x00078850 File Offset: 0x00076A50
		private void ResetKeyboardTrackingState()
		{
			if (this.IsMouseOperationActive())
			{
				return;
			}
			this.dataGridViewOper[16777216] = false;
			this.trackColumn = -1;
			if (this.currentColSplitBar != -1)
			{
				base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
				this.lastColSplitBar = (this.currentColSplitBar = -1);
			}
		}

		// Token: 0x06001909 RID: 6409 RVA: 0x000788AA File Offset: 0x00076AAA
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsMouseOperationActive()
		{
			return (this.dataGridViewOper.Data & 419) != 0;
		}

		// Token: 0x0600190A RID: 6410 RVA: 0x000788C0 File Offset: 0x00076AC0
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsKeyboardOperationActive()
		{
			return (this.dataGridViewOper.Data & 16777216) != 0;
		}

		// Token: 0x0600190B RID: 6411 RVA: 0x000788D6 File Offset: 0x00076AD6
		internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows)
		{
			this.PerformLayoutPrivate(useRowShortcut, computeVisibleRows, true, !useRowShortcut);
			if (!useRowShortcut)
			{
				base.Invalidate();
				this.InvalidateScrollBars();
			}
		}

		// Token: 0x0600190C RID: 6412 RVA: 0x000788F4 File Offset: 0x00076AF4
		private void RestoreRowsCachedThickness()
		{
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num);
					int num2;
					int minimumHeight;
					dataGridViewRow.GetHeightInfo(num, out num2, out minimumHeight);
					if (num2 != dataGridViewRow.CachedThickness && !this.OnRowHeightInfoPushed(num, dataGridViewRow.CachedThickness, minimumHeight))
					{
						dataGridViewRow.ThicknessInternal = dataGridViewRow.CachedThickness;
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x0600190D RID: 6413 RVA: 0x000789A0 File Offset: 0x00076BA0
		private bool RowIsResizable(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ResizableSet) == DataGridViewElementStates.ResizableSet)
			{
				return (rowState & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
			}
			return this.AllowUserToResizeRows;
		}

		// Token: 0x0600190E RID: 6414 RVA: 0x000789D0 File Offset: 0x00076BD0
		private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return false;
			}
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return rowIndex <= lastDisplayedFrozenRowIndex;
			}
			return this.displayedBandsInfo.FirstDisplayedScrollingRow != -1 && rowIndex >= this.displayedBandsInfo.FirstDisplayedScrollingRow && rowIndex <= lastDisplayedScrollingRowIndex;
		}

		// Token: 0x0600190F RID: 6415 RVA: 0x00078A22 File Offset: 0x00076C22
		private void ScrollBar_MouseEnter(object sender, EventArgs e)
		{
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x06001910 RID: 6416 RVA: 0x00078A48 File Offset: 0x00076C48
		private void ScrollBar_MouseLeave(object sender, EventArgs e)
		{
			this.UpdateMouseEnteredCell(null, null);
			Point pt = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(pt))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x06001911 RID: 6417 RVA: 0x00078A88 File Offset: 0x00076C88
		private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && !this.Columns[columnIndex].Frozen && (columnIndex != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.negOffset > 0))
			{
				if (this.Columns.DisplayInOrder(columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Columns.GetColumnCount(DataGridViewElementStates.Visible, columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol);
					if (this.negOffset > 0)
					{
						num++;
					}
					this.ScrollColumns(-num);
				}
				else if (columnIndex == this.displayedBandsInfo.FirstDisplayedScrollingCol && this.negOffset > 0)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					this.ScrollColumns(-1);
				}
				else if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != columnIndex && this.Columns.DisplayInOrder(this.displayedBandsInfo.LastTotallyDisplayedScrollingCol, columnIndex)))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					if (this.RightToLeftInternal)
					{
						int i = this.GetColumnXFromIndex(columnIndex) - this.Columns[columnIndex].Width;
						while (i < this.layout.Data.X)
						{
							if (!this.Columns.DisplayInOrder(num2, columnIndex))
							{
								break;
							}
							i += this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i -= this.negOffset;
							}
							num++;
							if (i < this.layout.Data.X)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					else
					{
						int i = this.GetColumnXFromIndex(columnIndex) + this.Columns[columnIndex].Width;
						while (i > this.layout.Data.Right && this.Columns.DisplayInOrder(num2, columnIndex))
						{
							i -= this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i += this.negOffset;
							}
							num++;
							if (i > this.layout.Data.Right)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					if (num != 0)
					{
						this.ScrollColumns(num);
					}
				}
			}
			return true;
		}

		// Token: 0x06001912 RID: 6418 RVA: 0x00078E04 File Offset: 0x00077004
		private void ScrollColumns(int columns)
		{
			DataGridViewColumn dataGridViewColumn = null;
			int num = 0;
			if (columns > 0)
			{
				DataGridViewColumn dataGridViewColumn2;
				if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
				{
					dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol];
					while (num < columns && dataGridViewColumn2 != null)
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num++;
					}
					if (dataGridViewColumn2 == null)
					{
						return;
					}
				}
				dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				num = 0;
				while (num < columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
			}
			if (columns < 0)
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				if (this.negOffset > 0)
				{
					num++;
				}
				while (num < -columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
				if (dataGridViewColumn == null)
				{
					if (this.negOffset == 0)
					{
						this.FlushDisplayedChanged();
						return;
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				}
			}
			int num2 = 0;
			for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn3 != dataGridViewColumn; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				num2 += dataGridViewColumn3.Thickness;
			}
			this.HorizontalOffset = num2;
		}

		// Token: 0x06001913 RID: 6419 RVA: 0x00078F44 File Offset: 0x00077144
		private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			bool committed = false;
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex))
			{
				if (!this.CommitEditForOperation(columnIndex, rowIndex, forCurrentCellChange))
				{
					return false;
				}
				committed = true;
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return false;
				}
			}
			return this.ScrollColumnIntoView(columnIndex, rowIndex, committed, forCurrentCellChange) && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex) && this.ScrollRowIntoView(columnIndex, rowIndex, committed, forCurrentCellChange);
		}

		// Token: 0x06001914 RID: 6420 RVA: 0x00078FBC File Offset: 0x000771BC
		private void ScrollRectangles(NativeMethods.RECT[] rects, int change)
		{
			if (rects != null)
			{
				if (Control.MouseButtons != MouseButtons.None)
				{
					this.dataGridViewState1[2048] = true;
				}
				foreach (NativeMethods.RECT rect in rects)
				{
					SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), change, 0, ref rect, ref rect);
				}
			}
		}

		// Token: 0x06001915 RID: 6421 RVA: 0x00079014 File Offset: 0x00077214
		private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				if (rowIndex < this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Rows.GetRowCount(DataGridViewElementStates.Visible, rowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					this.ScrollRowsByCount(-num, (num > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && rowIndex > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					int num3 = this.GetRowYFromIndex(rowIndex) + this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					while (num3 > this.layout.Data.Bottom && rowIndex > num2)
					{
						num3 -= this.Rows.SharedRow(num2).GetHeight(num2);
						num++;
						if (num3 > this.layout.Data.Bottom)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (num != 0)
					{
						if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
						{
							return false;
						}
						this.ScrollRowsByCount(num, (num > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					}
				}
			}
			return true;
		}

		// Token: 0x06001916 RID: 6422 RVA: 0x000791DC File Offset: 0x000773DC
		private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType)
		{
			bool flag = false;
			this.verticalOffset -= deltaY;
			if (this.vertScrollBar.Enabled)
			{
				this.vertScrollBar.Value = this.verticalOffset;
			}
			this.ClearRegionCache();
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			Rectangle rectangle = this.layout.Data;
			if (this.layout.RowHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
				if (this.SingleHorizontalBorderAdded)
				{
					int num = rectangle.Y;
					rectangle.Y = num + 1;
					num = rectangle.Height;
					rectangle.Height = num - 1;
					flag = true;
				}
			}
			else if (this.SingleVerticalBorderAdded)
			{
				int num = rectangle.X;
				rectangle.X = num - 1;
				num = rectangle.Width;
				rectangle.Width = num + 1;
			}
			rectangle.Y += rowsHeight;
			rectangle.Height -= rowsHeight;
			if (this.editingControl != null && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				this.PositionEditingControl(true, false, false);
			}
			if (Control.MouseButtons != MouseButtons.None)
			{
				this.dataGridViewState1[2048] = true;
			}
			this.UpdateMouseEnteredCell(null, null);
			NativeMethods.RECT rect = NativeMethods.RECT.FromXYWH(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
			SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), 0, deltaY, ref rect, ref rect);
			if (flag)
			{
				rectangle.X = this.layout.Inside.X;
				rectangle.Y = this.layout.Inside.Y;
				rectangle.Width = this.layout.RowHeaders.Width;
				rectangle.Height = 1;
				base.Invalidate(rectangle);
			}
			if (!this.dataGridViewState2[16384])
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int rowCount2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.OnScroll(scrollEventType, rowCount2 - rowCount, rowCount2, ScrollOrientation.VerticalScroll);
			}
		}

		// Token: 0x06001917 RID: 6423 RVA: 0x000793FC File Offset: 0x000775FC
		private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType)
		{
			int num = 0;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (rows > 0)
			{
				for (int i = rows; i > 0; i--)
				{
					num -= this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
				if (num2 != -1)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
					{
						num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
					else
					{
						rows = 0;
					}
				}
			}
			else
			{
				for (int j = rows; j < 0; j++)
				{
					num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (num2 != -1)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
					}
				}
				if (num2 != -1)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
				}
			}
			if (num2 != -1 && rows != 0)
			{
				this.ScrollRows(rows, num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		// Token: 0x06001918 RID: 6424 RVA: 0x00079524 File Offset: 0x00077724
		private void ScrollRowsByHeight(int height)
		{
			int num = 0;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (height > 0)
			{
				for (int i = this.Rows.SharedRow(num2).GetHeight(num2); i <= height; i += this.Rows.SharedRow(num2).GetHeight(num2))
				{
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (num2 == -1)
					{
						throw new InvalidOperationException();
					}
				}
			}
			else
			{
				num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int i = -this.Rows.SharedRow(num2).GetHeight(num2);
				while (i >= height)
				{
					int previousRow = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (previousRow == -1)
					{
						break;
					}
					i -= this.Rows.SharedRow(previousRow).GetHeight(previousRow);
					if (i >= height)
					{
						num2 = previousRow;
					}
				}
			}
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.ComputeVisibleRows();
			ScrollEventType scrollEventType = ScrollEventType.EndScroll;
			int num3 = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
			{
				num = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				num3 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				scrollEventType = ((num3 > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
			}
			else if (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow)
			{
				num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				num3 = -this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				scrollEventType = ((num3 < -1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
			}
			if (num != 0)
			{
				this.ScrollRows(num3, -num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		/// <summary>Selects all the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x06001919 RID: 6425 RVA: 0x000796C4 File Offset: 0x000778C4
		public void SelectAll()
		{
			if (!this.MultiSelect)
			{
				return;
			}
			this.inBulkPaintCount++;
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				{
					int count = this.Columns.Count;
					int i = 0;
					int count2 = this.Rows.Count;
					while (i < count2)
					{
						DataGridViewRow dataGridViewRow = this.Rows[i];
						for (int j = 0; j < count; j++)
						{
							this.SetSelectedCellCore(j, i, true);
						}
						i++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int k = 0;
					int count3 = this.Rows.Count;
					while (k < count3)
					{
						DataGridViewElementStates rowState = this.Rows.GetRowState(k);
						if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(k, true);
						}
						k++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int l = 0;
					int count4 = this.Columns.Count;
					while (l < count4)
					{
						if (!this.Columns[l].Selected)
						{
							this.SetSelectedColumnCore(l, true);
						}
						l++;
					}
					break;
				}
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.noSelectionChangeCount--;
				this.ExitBulkPaint(-1, -1);
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (firstColumn != null && firstRow != -1)
			{
				this.ptAnchorCell.X = firstColumn.Index;
				this.ptAnchorCell.Y = firstRow;
			}
			else
			{
				this.ptAnchorCell.X = -1;
				this.ptAnchorCell.Y = -1;
			}
			if (this.noSelectionChangeCount == 0)
			{
				this.FlushSelectionChanged();
			}
		}

		// Token: 0x0600191A RID: 6426 RVA: 0x000798A0 File Offset: 0x00077AA0
		private DataGridViewCell SelectedCell(int index)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				if (index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = 0;
				int count = this.selectedBandIndexes.Count;
				while (num < count && index >= 0)
				{
					if (index < this.Columns.Count)
					{
						int rowIndex = this.selectedBandIndexes[num];
						return this.Rows.SharedRow(rowIndex).Cells[index];
					}
					index -= this.Columns.Count;
					num++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				int num2 = 0;
				int count2 = this.selectedBandIndexes.Count;
				while (num2 < count2 && index >= 0)
				{
					if (index < this.Rows.Count)
					{
						int index2 = this.selectedBandIndexes[num2];
						return this.Rows.SharedRow(index).Cells[index2];
					}
					index -= this.Rows.Count;
					num2++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			}
			return null;
		}

		// Token: 0x0600191B RID: 6427 RVA: 0x00079A0C File Offset: 0x00077C0C
		private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns)
		{
			using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersHeight))
			{
				this.columnHeadersHeight = columnHeadersHeight;
				if (this.AutoSize)
				{
					this.InvalidateInside();
				}
				else if (this.layout.ColumnHeadersVisible)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, true);
					this.InvalidateInside();
				}
				this.OnColumnHeadersHeightChanged(EventArgs.Empty);
			}
		}

		/// <summary>Sets the currently active cell.</summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <param name="setAnchorCellAddress">
		///       <see langword="true" /> to make the new current cell the anchor cell for a subsequent multicell selection using the SHIFT key; otherwise, <see langword="false" />.</param>
		/// <param name="validateCurrentCell">
		///       <see langword="true" /> to validate the value in the old current cell and cancel the change if validation fails; otherwise, <see langword="false" />.</param>
		/// <param name="throughMouseClick">
		///       <see langword="true" /> if the current cell is being set as a result of a mouse click; otherwise, <see langword="false" />.</param>
		/// <returns>
		///     <see langword="true" /> if the current cell was successfully set; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1, and <paramref name="rowIndex" /> is not -1.-or-
		///         <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1, and <paramref name="columnIndex" /> is not -1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified cell has a <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> property value of <see langword="false" />.-or-This method was called for a reason other than the underlying data source being reset, and another thread is currently executing this method.</exception>
		/// <exception cref="T:System.InvalidCastException">The new current cell tried to enter edit mode, but its <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x0600191C RID: 6428 RVA: 0x00079A8C File Offset: 0x00077C8C
		protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			if (columnIndex < -1 || (columnIndex >= 0 && rowIndex == -1) || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || (columnIndex == -1 && rowIndex >= 0) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (columnIndex > -1 && rowIndex > -1 && !this.IsSharedCellVisible(this.Rows.SharedRow(rowIndex).Cells[columnIndex], rowIndex))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
			}
			if (this.dataGridViewOper[131072] && (this.dataConnection == null || !this.dataConnection.ProcessingListChangedEvent))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_SetCurrentCellAddressCoreNotReentrant"));
			}
			this.dataGridViewOper[131072] = true;
			try
			{
				DataGridViewCell dataGridViewCell = null;
				if (columnIndex > -1)
				{
					if (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex)
					{
						if (this.dataGridViewState1[4194304])
						{
							this.dataGridViewState1[4194304] = false;
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.cachedEditingControl != null)
							{
								this.editingControl = this.cachedEditingControl;
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
								this.cachedEditingControl = null;
								this.PositionEditingControl(true, true, false);
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							return true;
						}
						int x = this.ptCurrentCell.X;
						int y = this.ptCurrentCell.Y;
						if (x >= 0)
						{
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell && y != rowIndex, false, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
							{
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x, y))
							{
								dataGridViewCell2 = this.Rows.SharedRow(y).Cells[x];
								if (dataGridViewCell2.LeaveUnsharesRowInternal(y, throughMouseClick))
								{
									dataGridViewCell2 = this.Rows[y].Cells[x];
								}
								dataGridViewCell2.OnLeaveInternal(y, throughMouseClick);
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							if (y != rowIndex && validateCurrentCell)
							{
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (!this.IsInnerCellOutOfBounds(x, y))
									{
										this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
										if (!this.IsInnerCellOutOfBounds(x, y))
										{
											dataGridViewCell2.OnEnterInternal(y, throughMouseClick);
											this.OnCellEnter(ref dataGridViewCell, x, y);
										}
									}
									return false;
								}
								if (!this.IsInnerCellOutOfBounds(x, y))
								{
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						this.dataGridViewState2[4194304] = false;
						try
						{
							if (y != rowIndex && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								this.OnRowEnter(ref dataGridViewCell, columnIndex, rowIndex, true, false);
							}
							if (x != columnIndex && this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
							{
								if (x >= 0)
								{
									this.InvalidateCellPrivate(x, -1);
								}
								this.InvalidateCellPrivate(columnIndex, -1);
							}
							if (this.dataGridViewState2[4194304] && rowIndex >= this.Rows.Count)
							{
								return false;
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							if (setAnchorCellAddress)
							{
								this.ptAnchorCell.X = columnIndex;
								this.ptAnchorCell.Y = rowIndex;
							}
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (dataGridViewCell2.EnterUnsharesRowInternal(rowIndex, throughMouseClick))
							{
								dataGridViewCell2 = this.Rows[rowIndex].Cells[columnIndex];
							}
							dataGridViewCell2.OnEnterInternal(rowIndex, throughMouseClick);
							this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (x >= 0)
							{
								if (x < this.Columns.Count && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(x, y);
								}
								if (y != this.ptCurrentCell.Y && this.RowHeadersVisible && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(-1, y);
								}
							}
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (this.RowHeadersVisible && y != this.ptCurrentCell.Y)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
							}
							if (this.Focused && this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && !this.dataGridViewState1[64] && !this.dataGridViewState2[4194304] && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && dataGridViewCell2.EditType == null)))
							{
								this.BeginEditInternal(true);
							}
						}
						finally
						{
							this.dataGridViewState2[4194304] = false;
						}
						if (this.ptCurrentCell.X != -1)
						{
							this.AccessibilityNotifyCurrentCellChanged(new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y));
						}
					}
					else
					{
						if (setAnchorCellAddress)
						{
							this.ptAnchorCell.X = columnIndex;
							this.ptAnchorCell.Y = rowIndex;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						else
						{
							this.CorrectFocus(false);
						}
					}
				}
				else
				{
					int x2 = this.ptCurrentCell.X;
					int y2 = this.ptCurrentCell.Y;
					if (x2 >= 0 && !this.dataGridViewState1[4194304] && !this.dataGridViewOper[1048576])
					{
						DataGridViewCell dataGridViewCell3 = this.CurrentCellInternal;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell, false, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
						{
							return false;
						}
						if (!this.IsInnerCellOutOfBounds(x2, y2))
						{
							dataGridViewCell3 = this.Rows.SharedRow(y2).Cells[x2];
							if (dataGridViewCell3.LeaveUnsharesRowInternal(y2, throughMouseClick))
							{
								dataGridViewCell3 = this.Rows[y2].Cells[x2];
							}
							dataGridViewCell3.OnLeaveInternal(y2, throughMouseClick);
						}
						if (validateCurrentCell)
						{
							if (this.OnRowValidating(ref dataGridViewCell, x2, y2))
							{
								if (!this.IsInnerCellOutOfBounds(x2, y2))
								{
									this.OnRowEnter(ref dataGridViewCell, x2, y2, true, true);
									if (!this.IsInnerCellOutOfBounds(x2, y2))
									{
										dataGridViewCell3.OnEnterInternal(y2, throughMouseClick);
										this.OnCellEnter(ref dataGridViewCell, x2, y2);
									}
								}
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x2, y2))
							{
								this.OnRowValidated(ref dataGridViewCell, x2, y2);
							}
						}
					}
					if (this.ptCurrentCell.X != -1)
					{
						this.ptCurrentCell.X = -1;
						this.ptCurrentCell.Y = -1;
						this.OnCurrentCellChanged(EventArgs.Empty);
					}
					if (setAnchorCellAddress)
					{
						this.ptAnchorCell.X = -1;
						this.ptAnchorCell.Y = -1;
					}
					if (this.dataGridViewState1[4194304])
					{
						if (this.editingControl != null)
						{
							if (this.dataGridViewState2[536870912])
							{
								this.dataGridViewState2[536870912] = false;
							}
							else
							{
								this.cachedEditingControl = this.editingControl;
							}
							this.editingControl = null;
						}
					}
					else if (x2 >= 0 && !this.dataGridViewOper[1048576])
					{
						if (x2 < this.Columns.Count && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(x2, y2);
						}
						if (this.RowHeadersVisible && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(-1, y2);
						}
					}
				}
			}
			finally
			{
				this.dataGridViewOper[131072] = false;
			}
			return true;
		}

		// Token: 0x0600191D RID: 6429 RVA: 0x0007A2B4 File Offset: 0x000784B4
		internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick);
		}

		// Token: 0x0600191E RID: 6430 RVA: 0x0007A2C4 File Offset: 0x000784C4
		private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					int num = columnIndexFrom;
					do
					{
						for (int i = rowIndexFrom; i <= rowIndexTo; i++)
						{
							this.SetSelectedCellCore(num, i, true);
						}
						if (num != columnIndexTo)
						{
							DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num = nextColumn.Index;
						}
					}
					while (num != columnIndexTo);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int j = rowIndexFrom; j <= rowIndexTo; j++)
						{
							this.SetSelectedCellCore(num, j, true);
						}
					}
				}
				else
				{
					int num2 = columnIndexTo;
					do
					{
						for (int k = rowIndexTo; k >= rowIndexFrom; k--)
						{
							this.SetSelectedCellCore(num2, k, false);
						}
						if (num2 != columnIndexFrom)
						{
							DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num2 = previousColumn.Index;
						}
					}
					while (num2 != columnIndexFrom);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int l = rowIndexTo; l >= rowIndexFrom; l--)
						{
							this.SetSelectedCellCore(num2, l, false);
						}
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x0600191F RID: 6431 RVA: 0x0007A3E4 File Offset: 0x000785E4
		private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			int columnIndexFrom2;
			int columnIndexTo2;
			if (this.Columns.DisplayInOrder(columnIndexFrom, columnIndexTo))
			{
				columnIndexFrom2 = columnIndexFrom;
				columnIndexTo2 = columnIndexTo;
			}
			else
			{
				columnIndexFrom2 = columnIndexTo;
				columnIndexTo2 = columnIndexFrom;
			}
			int rowIndexFrom2;
			int rowIndexTo2;
			if (rowIndexFrom < rowIndexTo)
			{
				rowIndexFrom2 = rowIndexFrom;
				rowIndexTo2 = rowIndexTo;
			}
			else
			{
				rowIndexFrom2 = rowIndexTo;
				rowIndexTo2 = rowIndexFrom;
			}
			this.SelectCellRange(columnIndexFrom2, rowIndexFrom2, columnIndexTo2, rowIndexTo2, select);
		}

		// Token: 0x06001920 RID: 6432 RVA: 0x0007A428 File Offset: 0x00078628
		private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select)
		{
			int num = columnIndexFrom;
			do
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(num))
					{
						this.SetSelectedColumnCore(num, true);
					}
				}
				else
				{
					this.SetSelectedColumnCore(num, false);
				}
				if (num != columnIndexTo)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num = nextColumn.Index;
				}
			}
			while (num != columnIndexTo);
			if (columnIndexFrom != columnIndexTo)
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(columnIndexTo))
					{
						this.SetSelectedColumnCore(columnIndexTo, true);
						return;
					}
				}
				else
				{
					this.SetSelectedColumnCore(columnIndexTo, false);
				}
			}
		}

		// Token: 0x06001921 RID: 6433 RVA: 0x0007A4AC File Offset: 0x000786AC
		private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					for (int i = rowIndexFrom; i <= rowIndexTo; i++)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(i, true);
						}
					}
				}
				else
				{
					for (int j = rowIndexTo; j >= rowIndexFrom; j--)
					{
						this.SetSelectedRowCore(j, false);
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001922 RID: 6434 RVA: 0x0007A530 File Offset: 0x00078730
		private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection)
		{
			if (!this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick))
			{
				return false;
			}
			if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
			{
				return false;
			}
			if (clearSelection)
			{
				this.ClearSelection(columnIndex, rowIndex, true);
			}
			else if (forceCurrentCellSelection)
			{
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			else
			{
				if (this.MultiSelect && this.individualSelectedCells.Count + this.selectedBandIndexes.Count > 1)
				{
					return true;
				}
				if (this.individualSelectedCells.Count == 1)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					if (headCell.ColumnIndex != columnIndex || headCell.RowIndex != rowIndex)
					{
						return true;
					}
				}
				else if (this.selectedBandIndexes.Count == 1)
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != rowIndex)
						{
							return true;
						}
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != columnIndex)
						{
							return true;
						}
						break;
					}
				}
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			return true;
		}

		/// <summary>This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />.</summary>
		/// <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control. </param>
		/// <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control. </param>
		/// <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control. </param>
		/// <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control. </param>
		/// <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values. </param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">One or both of the width or height values exceeds the maximum value of 8,388,607. </exception>
		// Token: 0x06001923 RID: 6435 RVA: 0x0007A62C File Offset: 0x0007882C
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			if ((specified & BoundsSpecified.Width) == BoundsSpecified.Width && width > 8388607)
			{
				throw new ArgumentOutOfRangeException("width", width, SR.GetString("DataGridView_SizeTooLarge", new object[]
				{
					8388607.ToString(CultureInfo.CurrentCulture)
				}));
			}
			if ((specified & BoundsSpecified.Height) == BoundsSpecified.Height && height > 8388607)
			{
				throw new ArgumentOutOfRangeException("height", height, SR.GetString("DataGridView_SizeTooLarge", new object[]
				{
					8388607.ToString(CultureInfo.CurrentCulture)
				}));
			}
			base.SetBoundsCore(x, y, width, height, specified);
		}

		// Token: 0x06001924 RID: 6436 RVA: 0x0007A6D4 File Offset: 0x000788D4
		internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly)
		{
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellReadOnly(dataGridViewRow.Cells[columnIndex], rowIndex) != readOnly)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (readOnly)
				{
					if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.Columns[columnIndex].ReadOnly)
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
						dataGridViewCell.ReadOnlyInternal = true;
						return;
					}
				}
				else
				{
					if (this.individualReadOnlyCells.Contains(dataGridViewCell))
					{
						this.individualReadOnlyCells.Remove(dataGridViewCell);
					}
					else
					{
						if (this.Columns[columnIndex].ReadOnly)
						{
							this.Columns[columnIndex].ReadOnlyInternal = false;
							for (int i = 0; i < rowIndex; i++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int j = rowIndex + 1; j < this.Rows.Count; j++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
						if ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
							for (int k = 0; k < columnIndex; k++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int l = columnIndex + 1; l < this.Columns.Count; l++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
					}
					if (dataGridViewCell.ReadOnly)
					{
						dataGridViewCell.ReadOnlyInternal = false;
					}
				}
			}
		}

		// Token: 0x06001925 RID: 6437 RVA: 0x0007A8D8 File Offset: 0x00078AD8
		internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly)
		{
			if (this.Columns[columnIndex].ReadOnly == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Columns[columnIndex].ReadOnlyInternal = true;
				return;
			}
			this.Columns[columnIndex].ReadOnlyInternal = false;
		}

		// Token: 0x06001926 RID: 6438 RVA: 0x0007A968 File Offset: 0x00078B68
		internal void SetReadOnlyRowCore(int rowIndex, bool readOnly)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) > DataGridViewElementStates.None == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, true);
				return;
			}
			this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
		}

		/// <summary>Changes the selection state of the cell with the specified row and column indexes.</summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <param name="selected">
		///       <see langword="true" /> to select the cell; <see langword="false" /> to cancel the selection of the cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.-or-
		///         <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001927 RID: 6439 RVA: 0x0007A9F4 File Offset: 0x00078BF4
		protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellSelected(dataGridViewRow.Cells[columnIndex], rowIndex) != selected)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (selected)
				{
					if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None && !this.Columns[columnIndex].Selected)
					{
						this.individualSelectedCells.Add(dataGridViewCell);
						dataGridViewCell.SelectedInternal = true;
						return;
					}
				}
				else
				{
					if ((dataGridViewCell.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.individualSelectedCells.Remove(dataGridViewCell);
					}
					else
					{
						bool flag = false;
						if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
						{
							if (this.Rows.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(columnIndex);
								this.Columns[columnIndex].SelectedInternal = false;
								for (int i = 0; i < rowIndex; i++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int j = rowIndex + 1; j < this.Rows.Count; j++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								goto IL_297;
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(columnIndex, -1);
								}
							}
						}
						if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
						{
							if (this.Columns.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(rowIndex);
								this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
								for (int k = 0; k < columnIndex; k++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int l = columnIndex + 1; l < this.Columns.Count; l++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(-1, rowIndex);
								}
							}
						}
					}
					IL_297:
					if (dataGridViewCell.Selected)
					{
						dataGridViewCell.SelectedInternal = false;
					}
				}
			}
		}

		// Token: 0x06001928 RID: 6440 RVA: 0x0007ACC4 File Offset: 0x00078EC4
		internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected)
		{
			if (selected && !this.MultiSelect)
			{
				if (!this.Columns[columnIndex].Visible || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
				}
				if (!this.ScrollIntoView(columnIndex, rowIndex, true))
				{
					return;
				}
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if (selected && !this.MultiSelect)
					{
						this.RemoveIndividuallySelectedCells();
					}
					this.SetSelectedCellCore(columnIndex, rowIndex, selected);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int i = 0;
							while (i < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[i] != rowIndex)
								{
									this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
								}
								else
								{
									i++;
								}
							}
						}
						if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(rowIndex, true);
						}
					}
					else if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.SetSelectedRowCore(rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int j = 0;
							while (j < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[j] != columnIndex)
								{
									this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
								}
								else
								{
									j++;
								}
							}
						}
						if (!this.selectedBandIndexes.Contains(columnIndex))
						{
							this.SetSelectedColumnCore(columnIndex, true);
						}
					}
					else if (this.selectedBandIndexes.Contains(columnIndex))
					{
						this.SetSelectedColumnCore(columnIndex, false);
					}
					break;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (selected && !this.MultiSelect)
			{
				bool flag = this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, true);
			}
		}

		/// <summary>Changes the selection state of the column with the specified index.</summary>
		/// <param name="columnIndex">The index of the column.</param>
		/// <param name="selected">
		///       <see langword="true" /> to select the column; <see langword="false" /> to cancel the selection of the column.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.</exception>
		// Token: 0x06001929 RID: 6441 RVA: 0x0007AFD0 File Offset: 0x000791D0
		protected virtual void SetSelectedColumnCore(int columnIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.Columns[columnIndex].Selected != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
						this.Columns[columnIndex].SelectedInternal = true;
						this.selectedBandIndexes.Add(columnIndex);
					}
					else
					{
						this.Columns[columnIndex].SelectedInternal = false;
						this.selectedBandIndexes.Remove(columnIndex);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x0600192A RID: 6442 RVA: 0x0007B094 File Offset: 0x00079294
		internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != columnIndex)
					{
						this.SetSelectedColumnCore(headInt, false);
					}
				}
				this.SetSelectedColumnCore(columnIndex, selected);
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x0600192B RID: 6443 RVA: 0x0007B108 File Offset: 0x00079308
		private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullRowSelect:
				this.SetSelectedRowCore(rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullColumnSelect:
				this.SetSelectedColumnCore(columnIndex, selected);
				return;
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndex == -1)
				{
					this.SetSelectedRowCore(rowIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndex == -1)
				{
					this.SetSelectedColumnCore(columnIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			default:
				return;
			}
		}

		/// <summary>Changes the selection state of the row with the specified index.</summary>
		/// <param name="rowIndex">The index of the row.</param>
		/// <param name="selected">
		///       <see langword="true" /> to select the row; <see langword="false" /> to cancel the selection of the row.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x0600192C RID: 6444 RVA: 0x0007B180 File Offset: 0x00079380
		protected virtual void SetSelectedRowCore(int rowIndex, bool selected)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Selected) > DataGridViewElementStates.None != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInRow(rowIndex);
						this.selectedBandIndexes.Add(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, true);
					}
					else
					{
						this.selectedBandIndexes.Remove(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInRow(rowIndex);
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x0600192D RID: 6445 RVA: 0x0007B244 File Offset: 0x00079444
		internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != rowIndex)
					{
						this.SetSelectedRowCore(headInt, false);
					}
				}
				this.SetSelectedRowCore(rowIndex, selected);
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x0600192E RID: 6446 RVA: 0x0007B2B8 File Offset: 0x000794B8
		private bool ShouldSerializeAlternatingRowsDefaultCellStyle()
		{
			DataGridViewCellStyle obj = new DataGridViewCellStyle();
			return !this.AlternatingRowsDefaultCellStyle.Equals(obj);
		}

		// Token: 0x0600192F RID: 6447 RVA: 0x0007B2DA File Offset: 0x000794DA
		private bool ShouldSerializeColumnHeadersDefaultCellStyle()
		{
			return !this.ColumnHeadersDefaultCellStyle.Equals(this.DefaultColumnHeadersDefaultCellStyle);
		}

		// Token: 0x06001930 RID: 6448 RVA: 0x0007B2F0 File Offset: 0x000794F0
		private bool ShouldSerializeDefaultCellStyle()
		{
			return !this.DefaultCellStyle.Equals(this.DefaultDefaultCellStyle);
		}

		// Token: 0x06001931 RID: 6449 RVA: 0x0007B306 File Offset: 0x00079506
		private bool ShouldSerializeRowHeadersDefaultCellStyle()
		{
			return !this.RowHeadersDefaultCellStyle.Equals(this.DefaultRowHeadersDefaultCellStyle);
		}

		// Token: 0x06001932 RID: 6450 RVA: 0x0007B31C File Offset: 0x0007951C
		private bool ShouldSerializeRowsDefaultCellStyle()
		{
			DataGridViewCellStyle obj = new DataGridViewCellStyle();
			return !this.RowsDefaultCellStyle.Equals(obj);
		}

		/// <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control in ascending or descending order based on the contents of the specified column.</summary>
		/// <param name="dataGridViewColumn">The column by which to sort the contents of the <see cref="T:System.Windows.Forms.DataGridView" />. </param>
		/// <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values. </param>
		/// <exception cref="T:System.ArgumentException">The specified column is not part of this <see cref="T:System.Windows.Forms.DataGridView" />.-or-The <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has been set and the <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> property of the specified column returns <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">
		///         <paramref name="dataGridViewColumn" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property is set to <see langword="true" /> and the <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> property of the specified column returns <see langword="false" />.-or-The object specified by the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property does not implement the <see cref="T:System.ComponentModel.IBindingList" /> interface.-or-The object specified by the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has a <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> property value of <see langword="false" />.</exception>
		// Token: 0x06001933 RID: 6451 RVA: 0x0007B340 File Offset: 0x00079540
		public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (direction != ListSortDirection.Ascending && direction != ListSortDirection.Descending)
			{
				throw new InvalidEnumArgumentException("direction", (int)direction, typeof(ListSortDirection));
			}
			if (dataGridViewColumn.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.VirtualMode && !dataGridViewColumn.IsDataBound)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			this.SortInternal(null, dataGridViewColumn, direction);
		}

		/// <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control using an implementation of the <see cref="T:System.Collections.IComparer" /> interface.</summary>
		/// <param name="comparer">An implementation of <see cref="T:System.Collections.IComparer" /> that performs the custom sorting operation. </param>
		/// <exception cref="T:System.ArgumentNullException">
		///         <paramref name="comparer" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">
		///         <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> is set to <see langword="true" />.-or- 
		///         <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> is not <see langword="null" />.</exception>
		// Token: 0x06001934 RID: 6452 RVA: 0x0007B3BC File Offset: 0x000795BC
		public virtual void Sort(IComparer comparer)
		{
			if (comparer == null)
			{
				throw new ArgumentNullException("comparer");
			}
			if (this.VirtualMode)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			if (this.DataSource != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound"));
			}
			this.SortInternal(comparer, null, ListSortDirection.Ascending);
		}

		// Token: 0x06001935 RID: 6453 RVA: 0x0007B410 File Offset: 0x00079610
		private void SortDataBoundDataGridView_PerformCheck(DataGridViewColumn dataGridViewColumn)
		{
			IBindingList bindingList = this.dataConnection.List as IBindingList;
			if (bindingList == null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList"));
			}
			if (!bindingList.SupportsSorting)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_IBindingListNeedsToSupportSorting"));
			}
			if (!dataGridViewColumn.IsDataBound)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView"), "dataGridViewColumn");
			}
		}

		// Token: 0x06001936 RID: 6454 RVA: 0x0007B478 File Offset: 0x00079678
		private void SortInternal(IComparer comparer, DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			this.ptCurrentCellCache.X = this.ptCurrentCell.X;
			this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
			this.dataGridViewOper[64] = true;
			try
			{
				if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
				{
					return;
				}
				int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				int i = this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (i > 0 && this.DataSource == null)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					this.Rows.SetRowState(firstRow, DataGridViewElementStates.Frozen, false);
				}
				if (this.sortedColumn != null && this.sortedColumn.SortMode == DataGridViewColumnSortMode.Automatic && this.sortedColumn.HasHeaderCell)
				{
					this.sortedColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				if (comparer == null)
				{
					this.sortedColumn = dataGridViewColumn;
					this.sortOrder = ((direction == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && dataGridViewColumn.HasHeaderCell)
					{
						dataGridViewColumn.HeaderCell.SortGlyphDirection = this.sortOrder;
					}
				}
				else
				{
					this.sortedColumn = null;
					this.sortOrder = SortOrder.None;
				}
				if (this.DataSource == null)
				{
					this.UpdateRowsDisplayedState(false);
					this.Rows.Sort(comparer, direction == ListSortDirection.Ascending);
				}
				else
				{
					this.SortDataBoundDataGridView_PerformCheck(dataGridViewColumn);
					this.dataConnection.Sort(dataGridViewColumn, direction);
				}
				if (this.ptCurrentCellCache.X != -1 && !this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetAndSelectCurrentCellAddress(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, true, false, false, false, false);
				}
				if (i > 0)
				{
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					while (i > 1)
					{
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						i--;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
				}
				this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
			}
			finally
			{
				this.dataGridViewOper[64] = false;
			}
			this.OnGlobalAutoSize();
			if (this.DataSource == null)
			{
				this.displayedBandsInfo.EnsureDirtyState();
			}
			this.ResetUIState(false, false);
			this.OnSorted(EventArgs.Empty);
			if (AccessibilityImprovements.Level3)
			{
				base.AccessibilityNotifyClients(AccessibleEvents.Reorder, -4, 0);
			}
		}

		// Token: 0x06001937 RID: 6455 RVA: 0x0007B6C8 File Offset: 0x000798C8
		internal void SwapSortedRows(int rowIndex1, int rowIndex2)
		{
			if (rowIndex1 == rowIndex2)
			{
				return;
			}
			if (rowIndex1 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex2;
			}
			else if (rowIndex2 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex1;
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num = this.selectedBandIndexes.IndexOf(rowIndex1);
				int num2 = this.selectedBandIndexes.IndexOf(rowIndex2);
				if (num != -1 && num2 == -1)
				{
					this.selectedBandIndexes[num] = rowIndex2;
				}
				else if (num == -1 && num2 != -1)
				{
					this.selectedBandIndexes[num2] = rowIndex1;
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.IndexOf(rowIndex1);
					num2 = this.selectedBandSnapshotIndexes.IndexOf(rowIndex2);
					if (num != -1 && num2 == -1)
					{
						this.selectedBandSnapshotIndexes[num] = rowIndex2;
						return;
					}
					if (num == -1 && num2 != -1)
					{
						this.selectedBandSnapshotIndexes[num2] = rowIndex1;
					}
				}
			}
		}

		// Token: 0x06001938 RID: 6456 RVA: 0x0007B7B8 File Offset: 0x000799B8
		private void DataGridViewHScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			if (se.Type == ScrollEventType.SmallIncrement || se.Type == ScrollEventType.SmallDecrement)
			{
				int columns = (se.Type == ScrollEventType.SmallIncrement) ? 1 : -1;
				this.ScrollColumns(columns);
				se.NewValue = this.HorizontalOffset;
				return;
			}
			if (se.Type != ScrollEventType.EndScroll)
			{
				this.HorizontalOffset = se.NewValue;
			}
		}

		// Token: 0x06001939 RID: 6457 RVA: 0x0007B818 File Offset: 0x00079A18
		private void DataGridViewVScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			switch (se.Type)
			{
			case ScrollEventType.SmallDecrement:
				if (this.vertScrollBar.Value != this.vertScrollBar.Minimum)
				{
					this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.SmallIncrement:
				if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
				{
					this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeDecrement:
				this.VerticalOffset -= this.vertScrollBar.LargeChange;
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeIncrement:
			{
				int height = this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.VerticalOffset += Math.Max(height, this.vertScrollBar.LargeChange);
				se.NewValue = this.VerticalOffset;
				return;
			}
			case ScrollEventType.ThumbPosition:
				break;
			case ScrollEventType.ThumbTrack:
			case ScrollEventType.First:
			case ScrollEventType.Last:
				if (se.NewValue >= this.vertScrollBar.Maximum - this.vertScrollBar.LargeChange)
				{
					this.VerticalOffset = this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
					return;
				}
				this.VerticalOffset = se.NewValue;
				break;
			default:
				return;
			}
		}

		// Token: 0x0600193A RID: 6458 RVA: 0x0007B9B0 File Offset: 0x00079BB0
		private bool TabToNextCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (dataGridViewColumn == null) ? -1 : dataGridViewColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			int num4 = -1;
			int columnIndex = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? firstRow : num3);
						columnIndex = num;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						columnIndex = num2;
					}
					if (!this.ScrollIntoView(columnIndex, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(columnIndex, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(columnIndex, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(columnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(columnIndex, true);
					}
					break;
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			if (this.ptCurrentCell.X == -1)
			{
				bool flag = this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, num4))
				{
					return true;
				}
				bool flag = this.SetCurrentCellAddressCore(columnIndex, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x0600193B RID: 6459 RVA: 0x0007BC74 File Offset: 0x00079E74
		private bool TabToPreviousCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = (dataGridViewColumn == null) ? -1 : dataGridViewColumn.Index;
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int index = dataGridViewColumn.Index;
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			int num4 = -1;
			int columnIndex = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? lastRow : num3);
						columnIndex = index;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						columnIndex = num2;
					}
					if (!this.ScrollIntoView(columnIndex, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(columnIndex, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(columnIndex, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(columnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(columnIndex, true);
					}
					break;
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			if (this.ptCurrentCell.X == -1)
			{
				bool flag = this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, num4))
				{
					return true;
				}
				bool flag = this.SetCurrentCellAddressCore(columnIndex, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x0600193C RID: 6460 RVA: 0x0007BF60 File Offset: 0x0007A160
		private void UnwireEditingControlEvents()
		{
			this.editingPanel.Click -= this.EditingControls_Click;
			this.editingPanel.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick -= this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown -= this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove -= this.EditingControls_MouseMove;
			this.editingPanel.MouseUp -= this.EditingControls_MouseUp;
			this.editingControl.Click -= this.EditingControls_Click;
			this.editingControl.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingControl.MouseClick -= this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown -= this.EditingControls_MouseDown;
			this.editingControl.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingControl.MouseMove -= this.EditingControls_MouseMove;
			this.editingControl.MouseUp -= this.EditingControls_MouseUp;
		}

		// Token: 0x0600193D RID: 6461 RVA: 0x0007C10C File Offset: 0x0007A30C
		private void UnwireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
		}

		/// <summary>Forces the cell at the specified location to update its error text.</summary>
		/// <param name="columnIndex">The column index of the cell to update, or -1 to indicate a row header cell.</param>
		/// <param name="rowIndex">The row index of the cell to update, or -1 to indicate a column header cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.-or-
		///         <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x0600193E RID: 6462 RVA: 0x0007C188 File Offset: 0x0007A388
		public void UpdateCellErrorText(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.InvalidateCellPrivate(columnIndex, rowIndex);
			}
		}

		/// <summary>Forces the control to update its display of the cell at the specified location based on its new value, applying any automatic sizing modes currently in effect. </summary>
		/// <param name="columnIndex">The zero-based column index of the cell with the new value.</param>
		/// <param name="rowIndex">The zero-based row index of the cell with the new value.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="columnIndex" /> is less than zero or greater than the number of columns in the control minus one.-or-
		///         <paramref name="rowIndex" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x0600193F RID: 6463 RVA: 0x0007C1E0 File Offset: 0x0007A3E0
		public void UpdateCellValue(int columnIndex, int rowIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.OnCellCommonChange(columnIndex, rowIndex);
			}
		}

		// Token: 0x06001940 RID: 6464 RVA: 0x0007C238 File Offset: 0x0007A438
		private void UpdateColumnsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenCols;
			if (i > 0)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					i--;
				}
			}
			int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (firstDisplayedScrollingCol != -1)
			{
				int j = this.displayedBandsInfo.NumDisplayedScrollingCols;
				DataGridViewColumn dataGridViewColumn = this.Columns[firstDisplayedScrollingCol];
				while (j > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					j--;
				}
			}
		}

		/// <summary>Forces the row at the given row index to update its error text.</summary>
		/// <param name="rowIndex">The zero-based index of the row to update.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
		// Token: 0x06001941 RID: 6465 RVA: 0x0007C2E0 File Offset: 0x0007A4E0
		public void UpdateRowErrorText(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				this.InvalidateCellPrivate(-1, rowIndex);
			}
		}

		/// <summary>Forces the rows in the given range to update their error text.</summary>
		/// <param name="rowIndexStart">The zero-based index of the first row in the set of rows to update.</param>
		/// <param name="rowIndexEnd">The zero-based index of the last row in the set of rows to update.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndexStart" /> is not in the valid range of 0 to the number of rows in the control minus 1.-or-
		///         <paramref name="rowIndexEnd" /> is not in the valid range of 0 to the number of rows in the control minus 1.-or-
		///         <paramref name="rowIndexEnd" /> is less than <paramref name="rowIndexStart" />.</exception>
		// Token: 0x06001942 RID: 6466 RVA: 0x0007C31C File Offset: 0x0007A51C
		public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
		{
			if (rowIndexStart < 0 || rowIndexStart >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (rowIndexEnd < 0 || rowIndexEnd >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (rowIndexEnd < rowIndexStart)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(-1, rowIndexStart, true);
				Rectangle cellAdjustedDisplayRectangle2 = this.GetCellAdjustedDisplayRectangle(-1, rowIndexEnd, true);
				if (cellAdjustedDisplayRectangle.IsEmpty || cellAdjustedDisplayRectangle2.IsEmpty)
				{
					if (!cellAdjustedDisplayRectangle.IsEmpty || !cellAdjustedDisplayRectangle2.IsEmpty)
					{
						base.Invalidate(this.layout.RowHeaders);
						return;
					}
				}
				else
				{
					base.Invalidate(Rectangle.Union(cellAdjustedDisplayRectangle, cellAdjustedDisplayRectangle2));
				}
			}
		}

		/// <summary>Forces the specified row or rows to update their height information.</summary>
		/// <param name="rowIndex">The zero-based index of the first row to update.</param>
		/// <param name="updateToEnd">
		///       <see langword="true" /> to update the specified row and all subsequent rows.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///         <paramref name="rowIndex" /> is less than 0 and <paramref name="updateToEnd" /> is <see langword="true" />.-or-
		///         <paramref name="rowIndex" /> is less than -1 and <paramref name="updateToEnd" /> is <see langword="false" />.-or-
		///         <paramref name="rowIndex" /> is greater than the highest row index in the <see cref="P:System.Windows.Forms.DataGridView.Rows" /> collection.</exception>
		// Token: 0x06001943 RID: 6467 RVA: 0x0007C3DE File Offset: 0x0007A5DE
		public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
		{
			this.UpdateRowHeightInfoPrivate(rowIndex, updateToEnd, true);
		}

		// Token: 0x06001944 RID: 6468 RVA: 0x0007C3EC File Offset: 0x0007A5EC
		private void UpdateRowHeightInfoPrivate(int rowIndex, bool updateToEnd, bool invalidInAdjustFillingColumns)
		{
			if ((updateToEnd && rowIndex < 0) || (!updateToEnd && rowIndex < -1) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.Rows.InvalidateCachedRowsHeights();
			bool flag = rowIndex >= 0 && (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) > DataGridViewElementStates.None;
			if (base.IsHandleCreated && (rowIndex == -1 || flag))
			{
				if (updateToEnd)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (this.AutoSize)
					{
						LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
					}
					else
					{
						this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
					}
					Rectangle rectangle = this.layout.Data;
					if (this.layout.RowHeadersVisible)
					{
						rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
					}
					else if (this.SingleVerticalBorderAdded)
					{
						int num;
						if (!this.RightToLeftInternal)
						{
							num = rectangle.X;
							rectangle.X = num - 1;
						}
						num = rectangle.Width;
						rectangle.Width = num + 1;
					}
					if (!flag)
					{
						rowIndex = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
					}
					if (rowIndex != -1)
					{
						int rowYFromIndex = this.GetRowYFromIndex((firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rectangle.Height -= rectangle.Y - rowYFromIndex;
						rectangle.Y = rowYFromIndex;
						base.Invalidate(rectangle);
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
				else
				{
					if (rowIndex == -1)
					{
						if (this.AutoSize)
						{
							LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
						}
						else
						{
							this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
						}
						base.Invalidate();
					}
					else
					{
						int firstDisplayedScrollingRow2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						if (this.inBulkLayoutCount == 0)
						{
							if (this.AutoSize)
							{
								LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
							}
							else
							{
								this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
							}
						}
						if (this.inBulkPaintCount == 0)
						{
							Rectangle rectangle2 = this.layout.Data;
							if (this.layout.RowHeadersVisible)
							{
								rectangle2 = Rectangle.Union(rectangle2, this.layout.RowHeaders);
							}
							else if (this.SingleVerticalBorderAdded)
							{
								int num;
								if (!this.RightToLeftInternal)
								{
									num = rectangle2.X;
									rectangle2.X = num - 1;
								}
								num = rectangle2.Width;
								rectangle2.Width = num + 1;
							}
							int rowYFromIndex2 = this.GetRowYFromIndex((firstDisplayedScrollingRow2 == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
							rectangle2.Height -= rectangle2.Y - rowYFromIndex2;
							rectangle2.Y = rowYFromIndex2;
							base.Invalidate(rectangle2);
						}
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(rowIndex == -1 || this.ptCurrentCell.Y != rowIndex, true, false);
					}
				}
				this.UpdateMouseEnteredCell(null, null);
			}
		}

		// Token: 0x06001945 RID: 6469 RVA: 0x0007C6C8 File Offset: 0x0007A8C8
		private void UpdateRowsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
			int num;
			if (i > 0)
			{
				num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					i--;
				}
			}
			num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (num > -1)
			{
				for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x06001946 RID: 6470 RVA: 0x0007C788 File Offset: 0x0007A988
		private void UpdateMouseEnteredCell(DataGridView.HitTestInfo hti, MouseEventArgs e)
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo;
			if (hti != null)
			{
				hitTestInfo = hti;
			}
			else
			{
				hitTestInfo = this.HitTest(point.X, point.Y);
			}
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				if (this.ptMouseEnteredCell.X != hitTestInfo.col || this.ptMouseEnteredCell.Y != hitTestInfo.row)
				{
					DataGridViewCellEventArgs e2;
					if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
					{
						e2 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
						this.OnCellMouseLeave(e2);
					}
					e2 = new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row);
					this.OnCellMouseEnter(e2);
				}
				if (e != null)
				{
					int num = e.X - hitTestInfo.ColumnX;
					if (this.RightToLeftInternal)
					{
						num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
					}
					DataGridViewCellMouseEventArgs e3 = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
					this.OnCellMouseMove(e3);
					return;
				}
			}
			else if (this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs e4 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(e4);
					return;
				}
				this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
			}
		}

		// Token: 0x06001947 RID: 6471 RVA: 0x0007C9A4 File Offset: 0x0007ABA4
		private void UpdateSelectedCellsBlock(int anchorColumnIndex, ref int oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, ref int oldEdgeRowIndex, int newEdgeRowIndex)
		{
			if ((this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex)) || (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex)) || (anchorRowIndex < oldEdgeRowIndex && newEdgeRowIndex < anchorRowIndex) || (oldEdgeRowIndex < anchorRowIndex && anchorRowIndex < newEdgeRowIndex))
			{
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				oldEdgeColumnIndex = newEdgeColumnIndex;
				oldEdgeRowIndex = newEdgeRowIndex;
				return;
			}
			if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) || anchorColumnIndex == oldEdgeColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(nextColumn.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(nextColumn.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) || oldEdgeColumnIndex == anchorColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn.Index, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, previousColumn.Index, anchorRowIndex, true);
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && !this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(nextColumn2.Index, anchorRowIndex, newEdgeColumnIndex, oldEdgeRowIndex, true);
				this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex)
			{
				if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn3.Index, oldEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (!this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					if (anchorRowIndex == oldEdgeRowIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, anchorColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
					}
					else
					{
						DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, previousColumn2.Index, anchorRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && anchorRowIndex >= oldEdgeRowIndex)
			{
				if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, previousColumn3.Index, anchorRowIndex, true);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					DataGridViewColumn nextColumn4 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn4.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && !this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn previousColumn4 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn4.Index, oldEdgeRowIndex, true);
				this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex && this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && anchorRowIndex <= newEdgeRowIndex)
					{
						if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
						{
							if (!this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex))
							{
								this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
								this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, oldEdgeRowIndex, false);
							}
						}
						else
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, dataGridViewColumn.Index, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, dataGridViewColumn.Index, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(anchorRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(dataGridViewColumn2.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(dataGridViewColumn2.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex)
			{
				if (newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex <= anchorRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
					{
						this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
					else
					{
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex >= anchorRowIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
				}
				else
				{
					this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
				}
			}
			oldEdgeColumnIndex = newEdgeColumnIndex;
			oldEdgeRowIndex = newEdgeRowIndex;
		}

		// Token: 0x06001948 RID: 6472 RVA: 0x0007D4B8 File Offset: 0x0007B6B8
		private void VertScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.VertScrollTimerHandler));
		}

		// Token: 0x06001949 RID: 6473 RVA: 0x0007D4D0 File Offset: 0x0007B6D0
		private void VertScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num2 != 0)
				{
					int num3 = Math.Abs(num2);
					int num4 = num2 / num3;
					this.ScrollRowsByCount(num4, (num4 < 0) ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement);
					this.vertScrollTimer.Interval = DataGridView.GetRowScrollRate(num3);
					if (this.dataGridViewOper[8])
					{
						hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						if (hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num != 0)
						{
							hitTestInfo = this.HitTest(point.X - num - num / Math.Abs(num), point.Y - num2 - num4);
						}
						else
						{
							hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
					{
						this.OnRowSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.VertScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x0600194A RID: 6474 RVA: 0x0007D654 File Offset: 0x0007B854
		private void WireEditingControlEvents()
		{
			this.editingPanel.Click += this.EditingControls_Click;
			this.editingPanel.DoubleClick += this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick += this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown += this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter += this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave += this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove += this.EditingControls_MouseMove;
			this.editingPanel.MouseUp += this.EditingControls_MouseUp;
			this.editingControl.Click += this.EditingControls_Click;
			this.editingControl.DoubleClick += this.EditingControls_DoubleClick;
			this.editingControl.MouseClick += this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown += this.EditingControls_MouseDown;
			this.editingControl.MouseEnter += this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave += this.EditingControls_MouseLeave;
			this.editingControl.MouseMove += this.EditingControls_MouseMove;
			this.editingControl.MouseUp += this.EditingControls_MouseUp;
		}

		// Token: 0x0600194B RID: 6475 RVA: 0x0007D800 File Offset: 0x0007BA00
		private void WireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
		}

		// Token: 0x0600194C RID: 6476 RVA: 0x0007D87C File Offset: 0x0007BA7C
		internal override void WmContextMenu(ref Message m)
		{
			int x = (int)((short)((long)m.LParam));
			int y = (int)((long)m.LParam) >> 16;
			bool isKeyboardActivated = false;
			Point point;
			ContextMenuStrip contextMenuStrip;
			if ((int)((long)m.LParam) == -1)
			{
				isKeyboardActivated = true;
				point = new Point(base.Width / 2, base.Height / 2);
				contextMenuStrip = this.ContextMenuStrip;
			}
			else
			{
				point = base.PointToClientInternal(new Point(x, y));
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridViewCell dataGridViewCell = null;
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).Cells[hitTestInfo.col];
					break;
				case DataGridViewHitTestType.ColumnHeader:
					dataGridViewCell = this.Columns[hitTestInfo.col].HeaderCell;
					break;
				case DataGridViewHitTestType.RowHeader:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).HeaderCell;
					break;
				case DataGridViewHitTestType.TopLeftHeader:
					dataGridViewCell = this.TopLeftHeaderCell;
					break;
				}
				if (dataGridViewCell != null)
				{
					contextMenuStrip = dataGridViewCell.GetInheritedContextMenuStrip(hitTestInfo.row);
				}
				else
				{
					contextMenuStrip = this.ContextMenuStrip;
				}
			}
			if (contextMenuStrip != null && base.ClientRectangle.Contains(point))
			{
				contextMenuStrip.ShowInternal(this, point, isKeyboardActivated);
				return;
			}
			this.DefWndProc(ref m);
		}

		// Token: 0x0600194D RID: 6477 RVA: 0x0007D9D4 File Offset: 0x0007BBD4
		private void WmGetDlgCode(ref Message m)
		{
			m.Result = (IntPtr)((long)m.Result | 1L | 128L);
			Keys modifierKeys = Control.ModifierKeys;
			if (this.GetTabKeyEffective((modifierKeys & Keys.Shift) == Keys.Shift, (modifierKeys & Keys.Control) == Keys.Control))
			{
				m.Result = (IntPtr)((long)m.Result | 2L);
			}
		}

		// Token: 0x0600194E RID: 6478 RVA: 0x0007DA44 File Offset: 0x0007BC44
		private unsafe bool WmNotify(ref Message m)
		{
			if (m.LParam == IntPtr.Zero)
			{
				return false;
			}
			NativeMethods.NMHDR* ptr = (NativeMethods.NMHDR*)((void*)m.LParam);
			if (ptr->code == NativeMethods.TTN_GETDISPINFO && !base.DesignMode)
			{
				string toolTipPrivate = this.ToolTipPrivate;
				if (!string.IsNullOrEmpty(toolTipPrivate))
				{
					UnsafeNativeMethods.SendMessage(new HandleRef(this, ptr->hwndFrom), 1048, 0, SystemInformation.MaxWindowTrackSize.Width);
					NativeMethods.TOOLTIPTEXT tooltiptext = (NativeMethods.TOOLTIPTEXT)m.GetLParam(typeof(NativeMethods.TOOLTIPTEXT));
					tooltiptext.lpszText = toolTipPrivate;
					if (this.RightToLeft == RightToLeft.Yes)
					{
						tooltiptext.uFlags |= 4;
					}
					Marshal.StructureToPtr(tooltiptext, m.LParam, false);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes window messages.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		// Token: 0x0600194F RID: 6479 RVA: 0x0007DB00 File Offset: 0x0007BD00
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			int msg = m.Msg;
			if (msg <= 269)
			{
				if (msg != 78)
				{
					if (msg == 135)
					{
						this.WmGetDlgCode(ref m);
						return;
					}
					if (msg != 269)
					{
						goto IL_A5;
					}
				}
				else
				{
					if (this.WmNotify(ref m))
					{
						return;
					}
					goto IL_A5;
				}
			}
			else if (msg != 271)
			{
				if (msg != 513 && msg != 515)
				{
					goto IL_A5;
				}
				this.dataGridViewOper[8192] = true;
				try
				{
					base.WndProc(ref m);
				}
				finally
				{
					this.dataGridViewOper[8192] = false;
				}
				return;
			}
			if (this.editingControl != null)
			{
				this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
			}
			IL_A5:
			base.WndProc(ref m);
		}

		// Token: 0x04000A23 RID: 2595
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED = new object();

		// Token: 0x04000A24 RID: 2596
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED = new object();

		// Token: 0x04000A25 RID: 2597
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED = new object();

		// Token: 0x04000A26 RID: 2598
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED = new object();

		// Token: 0x04000A27 RID: 2599
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED = new object();

		// Token: 0x04000A28 RID: 2600
		private static readonly object EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A29 RID: 2601
		private static readonly object EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED = new object();

		// Token: 0x04000A2A RID: 2602
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED = new object();

		// Token: 0x04000A2B RID: 2603
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED = new object();

		// Token: 0x04000A2C RID: 2604
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED = new object();

		// Token: 0x04000A2D RID: 2605
		private static readonly object EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED = new object();

		// Token: 0x04000A2E RID: 2606
		private static readonly object EVENT_DATAGRIDVIEWBORDERSTYLECHANGED = new object();

		// Token: 0x04000A2F RID: 2607
		private static readonly object EVENT_DATAGRIDVIEWCANCELROWEDIT = new object();

		// Token: 0x04000A30 RID: 2608
		private static readonly object EVENT_DATAGRIDVIEWCELLBEGINEDIT = new object();

		// Token: 0x04000A31 RID: 2609
		private static readonly object EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED = new object();

		// Token: 0x04000A32 RID: 2610
		private static readonly object EVENT_DATAGRIDVIEWCELLCLICK = new object();

		// Token: 0x04000A33 RID: 2611
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTCLICK = new object();

		// Token: 0x04000A34 RID: 2612
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK = new object();

		// Token: 0x04000A35 RID: 2613
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000A36 RID: 2614
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x04000A37 RID: 2615
		private static readonly object EVENT_DATAGRIDVIEWCELLDOUBLECLICK = new object();

		// Token: 0x04000A38 RID: 2616
		private static readonly object EVENT_DATAGRIDVIEWCELLENDEDIT = new object();

		// Token: 0x04000A39 RID: 2617
		private static readonly object EVENT_DATAGRIDVIEWCELLENTER = new object();

		// Token: 0x04000A3A RID: 2618
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED = new object();

		// Token: 0x04000A3B RID: 2619
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED = new object();

		// Token: 0x04000A3C RID: 2620
		private static readonly object EVENT_DATAGRIDVIEWCELLFORMATTING = new object();

		// Token: 0x04000A3D RID: 2621
		private static readonly object EVENT_DATAGRIDVIEWCELLLEAVE = new object();

		// Token: 0x04000A3E RID: 2622
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSECLICK = new object();

		// Token: 0x04000A3F RID: 2623
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK = new object();

		// Token: 0x04000A40 RID: 2624
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOWN = new object();

		// Token: 0x04000A41 RID: 2625
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEENTER = new object();

		// Token: 0x04000A42 RID: 2626
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSELEAVE = new object();

		// Token: 0x04000A43 RID: 2627
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEMOVE = new object();

		// Token: 0x04000A44 RID: 2628
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEUP = new object();

		// Token: 0x04000A45 RID: 2629
		private static readonly object EVENT_DATAGRIDVIEWCELLPAINTING = new object();

		// Token: 0x04000A46 RID: 2630
		private static readonly object EVENT_DATAGRIDVIEWCELLPARSING = new object();

		// Token: 0x04000A47 RID: 2631
		private static readonly object EVENT_DATAGRIDVIEWCELLSTATECHANGED = new object();

		// Token: 0x04000A48 RID: 2632
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECHANGED = new object();

		// Token: 0x04000A49 RID: 2633
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED = new object();

		// Token: 0x04000A4A RID: 2634
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED = new object();

		// Token: 0x04000A4B RID: 2635
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED = new object();

		// Token: 0x04000A4C RID: 2636
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATING = new object();

		// Token: 0x04000A4D RID: 2637
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATED = new object();

		// Token: 0x04000A4E RID: 2638
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUECHANGED = new object();

		// Token: 0x04000A4F RID: 2639
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUENEEDED = new object();

		// Token: 0x04000A50 RID: 2640
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUEPUSHED = new object();

		// Token: 0x04000A51 RID: 2641
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNADDED = new object();

		// Token: 0x04000A52 RID: 2642
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000A53 RID: 2643
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED = new object();

		// Token: 0x04000A54 RID: 2644
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A55 RID: 2645
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED = new object();

		// Token: 0x04000A56 RID: 2646
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED = new object();

		// Token: 0x04000A57 RID: 2647
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED = new object();

		// Token: 0x04000A58 RID: 2648
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK = new object();

		// Token: 0x04000A59 RID: 2649
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK = new object();

		// Token: 0x04000A5A RID: 2650
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x04000A5B RID: 2651
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x04000A5C RID: 2652
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A5D RID: 2653
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED = new object();

		// Token: 0x04000A5E RID: 2654
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED = new object();

		// Token: 0x04000A5F RID: 2655
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED = new object();

		// Token: 0x04000A60 RID: 2656
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED = new object();

		// Token: 0x04000A61 RID: 2657
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNREMOVED = new object();

		// Token: 0x04000A62 RID: 2658
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED = new object();

		// Token: 0x04000A63 RID: 2659
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED = new object();

		// Token: 0x04000A64 RID: 2660
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED = new object();

		// Token: 0x04000A65 RID: 2661
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED = new object();

		// Token: 0x04000A66 RID: 2662
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLCHANGED = new object();

		// Token: 0x04000A67 RID: 2663
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED = new object();

		// Token: 0x04000A68 RID: 2664
		private static readonly object EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE = new object();

		// Token: 0x04000A69 RID: 2665
		private static readonly object EVENT_DATAGRIDVIEWDATAERROR = new object();

		// Token: 0x04000A6A RID: 2666
		private static readonly object EVENT_DATAGRIDVIEWDATAMEMBERCHANGED = new object();

		// Token: 0x04000A6B RID: 2667
		private static readonly object EVENT_DATAGRIDVIEWDATASOURCECHANGED = new object();

		// Token: 0x04000A6C RID: 2668
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A6D RID: 2669
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED = new object();

		// Token: 0x04000A6E RID: 2670
		private static readonly object EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING = new object();

		// Token: 0x04000A6F RID: 2671
		private static readonly object EVENT_DATAGRIDVIEWEDITMODECHANGED = new object();

		// Token: 0x04000A70 RID: 2672
		private static readonly object EVENT_DATAGRIDVIEWGRIDCOLORCHANGED = new object();

		// Token: 0x04000A71 RID: 2673
		private static readonly object EVENT_DATAGRIDVIEWMULTISELECTCHANGED = new object();

		// Token: 0x04000A72 RID: 2674
		private static readonly object EVENT_DATAGRIDVIEWNEWROWNEEDED = new object();

		// Token: 0x04000A73 RID: 2675
		private static readonly object EVENT_DATAGRIDVIEWREADONLYCHANGED = new object();

		// Token: 0x04000A74 RID: 2676
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000A75 RID: 2677
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x04000A76 RID: 2678
		private static readonly object EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A77 RID: 2679
		private static readonly object EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED = new object();

		// Token: 0x04000A78 RID: 2680
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED = new object();

		// Token: 0x04000A79 RID: 2681
		private static readonly object EVENT_DATAGRIDVIEWROWENTER = new object();

		// Token: 0x04000A7A RID: 2682
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED = new object();

		// Token: 0x04000A7B RID: 2683
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED = new object();

		// Token: 0x04000A7C RID: 2684
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED = new object();

		// Token: 0x04000A7D RID: 2685
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK = new object();

		// Token: 0x04000A7E RID: 2686
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK = new object();

		// Token: 0x04000A7F RID: 2687
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x04000A80 RID: 2688
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x04000A81 RID: 2689
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A82 RID: 2690
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED = new object();

		// Token: 0x04000A83 RID: 2691
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED = new object();

		// Token: 0x04000A84 RID: 2692
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTCHANGED = new object();

		// Token: 0x04000A85 RID: 2693
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED = new object();

		// Token: 0x04000A86 RID: 2694
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED = new object();

		// Token: 0x04000A87 RID: 2695
		private static readonly object EVENT_DATAGRIDVIEWROWLEAVE = new object();

		// Token: 0x04000A88 RID: 2696
		private static readonly object EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED = new object();

		// Token: 0x04000A89 RID: 2697
		private static readonly object EVENT_DATAGRIDVIEWROWPOSTPAINT = new object();

		// Token: 0x04000A8A RID: 2698
		private static readonly object EVENT_DATAGRIDVIEWROWPREPAINT = new object();

		// Token: 0x04000A8B RID: 2699
		private static readonly object EVENT_DATAGRIDVIEWROWSADDED = new object();

		// Token: 0x04000A8C RID: 2700
		private static readonly object EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000A8D RID: 2701
		private static readonly object EVENT_DATAGRIDVIEWROWSREMOVED = new object();

		// Token: 0x04000A8E RID: 2702
		private static readonly object EVENT_DATAGRIDVIEWROWSTATECHANGED = new object();

		// Token: 0x04000A8F RID: 2703
		private static readonly object EVENT_DATAGRIDVIEWROWUNSHARED = new object();

		// Token: 0x04000A90 RID: 2704
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATED = new object();

		// Token: 0x04000A91 RID: 2705
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATING = new object();

		// Token: 0x04000A92 RID: 2706
		private static readonly object EVENT_DATAGRIDVIEWSCROLL = new object();

		// Token: 0x04000A93 RID: 2707
		private static readonly object EVENT_DATAGRIDVIEWSELECTIONCHANGED = new object();

		// Token: 0x04000A94 RID: 2708
		private static readonly object EVENT_DATAGRIDVIEWSORTCOMPARE = new object();

		// Token: 0x04000A95 RID: 2709
		private static readonly object EVENT_DATAGRIDVIEWSORTED = new object();

		// Token: 0x04000A96 RID: 2710
		private static readonly object EVENT_DATAGRIDVIEWUSERADDEDROW = new object();

		// Token: 0x04000A97 RID: 2711
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETEDROW = new object();

		// Token: 0x04000A98 RID: 2712
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETINGROW = new object();

		// Token: 0x04000A99 RID: 2713
		private const int DATAGRIDVIEWSTATE1_allowUserToAddRows = 1;

		// Token: 0x04000A9A RID: 2714
		private const int DATAGRIDVIEWSTATE1_allowUserToDeleteRows = 2;

		// Token: 0x04000A9B RID: 2715
		private const int DATAGRIDVIEWSTATE1_allowUserToOrderColumns = 4;

		// Token: 0x04000A9C RID: 2716
		private const int DATAGRIDVIEWSTATE1_columnHeadersVisible = 8;

		// Token: 0x04000A9D RID: 2717
		private const int DATAGRIDVIEWSTATE1_rowHeadersVisible = 16;

		// Token: 0x04000A9E RID: 2718
		private const int DATAGRIDVIEWSTATE1_forwardCharMessage = 32;

		// Token: 0x04000A9F RID: 2719
		private const int DATAGRIDVIEWSTATE1_leavingWithTabKey = 64;

		// Token: 0x04000AA0 RID: 2720
		private const int DATAGRIDVIEWSTATE1_multiSelect = 128;

		// Token: 0x04000AA1 RID: 2721
		private const int DATAGRIDVIEWSTATE1_ignoringEditingChanges = 512;

		// Token: 0x04000AA2 RID: 2722
		private const int DATAGRIDVIEWSTATE1_ambientForeColor = 1024;

		// Token: 0x04000AA3 RID: 2723
		private const int DATAGRIDVIEWSTATE1_scrolledSinceMouseDown = 2048;

		// Token: 0x04000AA4 RID: 2724
		private const int DATAGRIDVIEWSTATE1_editingControlHidden = 4096;

		// Token: 0x04000AA5 RID: 2725
		private const int DATAGRIDVIEWSTATE1_standardTab = 8192;

		// Token: 0x04000AA6 RID: 2726
		private const int DATAGRIDVIEWSTATE1_editingControlChanging = 16384;

		// Token: 0x04000AA7 RID: 2727
		private const int DATAGRIDVIEWSTATE1_currentCellInEditMode = 32768;

		// Token: 0x04000AA8 RID: 2728
		private const int DATAGRIDVIEWSTATE1_virtualMode = 65536;

		// Token: 0x04000AA9 RID: 2729
		private const int DATAGRIDVIEWSTATE1_editedCellChanged = 131072;

		// Token: 0x04000AAA RID: 2730
		private const int DATAGRIDVIEWSTATE1_editedRowChanged = 262144;

		// Token: 0x04000AAB RID: 2731
		private const int DATAGRIDVIEWSTATE1_newRowEdited = 524288;

		// Token: 0x04000AAC RID: 2732
		private const int DATAGRIDVIEWSTATE1_readOnly = 1048576;

		// Token: 0x04000AAD RID: 2733
		private const int DATAGRIDVIEWSTATE1_newRowCreatedByEditing = 2097152;

		// Token: 0x04000AAE RID: 2734
		private const int DATAGRIDVIEWSTATE1_temporarilyResetCurrentCell = 4194304;

		// Token: 0x04000AAF RID: 2735
		private const int DATAGRIDVIEWSTATE1_autoGenerateColumns = 8388608;

		// Token: 0x04000AB0 RID: 2736
		private const int DATAGRIDVIEWSTATE1_customCursorSet = 16777216;

		// Token: 0x04000AB1 RID: 2737
		private const int DATAGRIDVIEWSTATE1_ambientFont = 33554432;

		// Token: 0x04000AB2 RID: 2738
		private const int DATAGRIDVIEWSTATE1_ambientColumnHeadersFont = 67108864;

		// Token: 0x04000AB3 RID: 2739
		private const int DATAGRIDVIEWSTATE1_ambientRowHeadersFont = 134217728;

		// Token: 0x04000AB4 RID: 2740
		private const int DATAGRIDVIEWSTATE1_isRestrictedChecked = 268435456;

		// Token: 0x04000AB5 RID: 2741
		private const int DATAGRIDVIEWSTATE1_isRestricted = 536870912;

		// Token: 0x04000AB6 RID: 2742
		private const int DATAGRIDVIEWSTATE1_isAutoSized = 1073741824;

		// Token: 0x04000AB7 RID: 2743
		private const int DATAGRIDVIEWSTATE2_showEditingIcon = 1;

		// Token: 0x04000AB8 RID: 2744
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeColumns = 2;

		// Token: 0x04000AB9 RID: 2745
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeRows = 4;

		// Token: 0x04000ABA RID: 2746
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingCtrl = 8;

		// Token: 0x04000ABB RID: 2747
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingPanel = 16;

		// Token: 0x04000ABC RID: 2748
		private const int DATAGRIDVIEWSTATE2_mouseEnterExpected = 32;

		// Token: 0x04000ABD RID: 2749
		private const int DATAGRIDVIEWSTATE2_enableHeadersVisualStyles = 64;

		// Token: 0x04000ABE RID: 2750
		private const int DATAGRIDVIEWSTATE2_showCellErrors = 128;

		// Token: 0x04000ABF RID: 2751
		private const int DATAGRIDVIEWSTATE2_showCellToolTips = 256;

		// Token: 0x04000AC0 RID: 2752
		private const int DATAGRIDVIEWSTATE2_showRowErrors = 512;

		// Token: 0x04000AC1 RID: 2753
		private const int DATAGRIDVIEWSTATE2_showColumnRelocationInsertion = 1024;

		// Token: 0x04000AC2 RID: 2754
		private const int DATAGRIDVIEWSTATE2_rightToLeftMode = 2048;

		// Token: 0x04000AC3 RID: 2755
		private const int DATAGRIDVIEWSTATE2_rightToLeftValid = 4096;

		// Token: 0x04000AC4 RID: 2756
		private const int DATAGRIDVIEWSTATE2_currentCellWantsInputKey = 8192;

		// Token: 0x04000AC5 RID: 2757
		private const int DATAGRIDVIEWSTATE2_stopRaisingVerticalScroll = 16384;

		// Token: 0x04000AC6 RID: 2758
		private const int DATAGRIDVIEWSTATE2_stopRaisingHorizontalScroll = 32768;

		// Token: 0x04000AC7 RID: 2759
		private const int DATAGRIDVIEWSTATE2_replacedCellSelected = 65536;

		// Token: 0x04000AC8 RID: 2760
		private const int DATAGRIDVIEWSTATE2_replacedCellReadOnly = 131072;

		// Token: 0x04000AC9 RID: 2761
		private const int DATAGRIDVIEWSTATE2_raiseSelectionChanged = 262144;

		// Token: 0x04000ACA RID: 2762
		private const int DATAGRIDVIEWSTATE2_initializing = 524288;

		// Token: 0x04000ACB RID: 2763
		private const int DATAGRIDVIEWSTATE2_autoSizedWithoutHandle = 1048576;

		// Token: 0x04000ACC RID: 2764
		private const int DATAGRIDVIEWSTATE2_ignoreCursorChange = 2097152;

		// Token: 0x04000ACD RID: 2765
		private const int DATAGRIDVIEWSTATE2_rowsCollectionClearedInSetCell = 4194304;

		// Token: 0x04000ACE RID: 2766
		private const int DATAGRIDVIEWSTATE2_nextMouseUpIsDouble = 8388608;

		// Token: 0x04000ACF RID: 2767
		private const int DATAGRIDVIEWSTATE2_inBindingContextChanged = 16777216;

		// Token: 0x04000AD0 RID: 2768
		private const int DATAGRIDVIEWSTATE2_allowHorizontalScrollbar = 33554432;

		// Token: 0x04000AD1 RID: 2769
		private const int DATAGRIDVIEWSTATE2_usedFillWeightsDirty = 67108864;

		// Token: 0x04000AD2 RID: 2770
		private const int DATAGRIDVIEWSTATE2_messageFromEditingCtrls = 134217728;

		// Token: 0x04000AD3 RID: 2771
		private const int DATAGRIDVIEWSTATE2_cellMouseDownInContentBounds = 268435456;

		// Token: 0x04000AD4 RID: 2772
		private const int DATAGRIDVIEWSTATE2_discardEditingControl = 536870912;

		// Token: 0x04000AD5 RID: 2773
		private const int DATAGRIDVIEWOPER_trackColResize = 1;

		// Token: 0x04000AD6 RID: 2774
		private const int DATAGRIDVIEWOPER_trackRowResize = 2;

		// Token: 0x04000AD7 RID: 2775
		private const int DATAGRIDVIEWOPER_trackColSelect = 4;

		// Token: 0x04000AD8 RID: 2776
		private const int DATAGRIDVIEWOPER_trackRowSelect = 8;

		// Token: 0x04000AD9 RID: 2777
		private const int DATAGRIDVIEWOPER_trackCellSelect = 16;

		// Token: 0x04000ADA RID: 2778
		private const int DATAGRIDVIEWOPER_trackColRelocation = 32;

		// Token: 0x04000ADB RID: 2779
		private const int DATAGRIDVIEWOPER_inSort = 64;

		// Token: 0x04000ADC RID: 2780
		private const int DATAGRIDVIEWOPER_trackColHeadersResize = 128;

		// Token: 0x04000ADD RID: 2781
		private const int DATAGRIDVIEWOPER_trackRowHeadersResize = 256;

		// Token: 0x04000ADE RID: 2782
		private const int DATAGRIDVIEWOPER_trackMouseMoves = 512;

		// Token: 0x04000ADF RID: 2783
		private const int DATAGRIDVIEWOPER_inRefreshColumns = 1024;

		// Token: 0x04000AE0 RID: 2784
		private const int DATAGRIDVIEWOPER_inDisplayIndexAdjustments = 2048;

		// Token: 0x04000AE1 RID: 2785
		private const int DATAGRIDVIEWOPER_lastEditCtrlClickDoubled = 4096;

		// Token: 0x04000AE2 RID: 2786
		private const int DATAGRIDVIEWOPER_inMouseDown = 8192;

		// Token: 0x04000AE3 RID: 2787
		private const int DATAGRIDVIEWOPER_inReadOnlyChange = 16384;

		// Token: 0x04000AE4 RID: 2788
		private const int DATAGRIDVIEWOPER_inCellValidating = 32768;

		// Token: 0x04000AE5 RID: 2789
		private const int DATAGRIDVIEWOPER_inBorderStyleChange = 65536;

		// Token: 0x04000AE6 RID: 2790
		private const int DATAGRIDVIEWOPER_inCurrentCellChange = 131072;

		// Token: 0x04000AE7 RID: 2791
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumns = 262144;

		// Token: 0x04000AE8 RID: 2792
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumn = 524288;

		// Token: 0x04000AE9 RID: 2793
		private const int DATAGRIDVIEWOPER_inDispose = 1048576;

		// Token: 0x04000AEA RID: 2794
		private const int DATAGRIDVIEWOPER_inBeginEdit = 2097152;

		// Token: 0x04000AEB RID: 2795
		private const int DATAGRIDVIEWOPER_inEndEdit = 4194304;

		// Token: 0x04000AEC RID: 2796
		private const int DATAGRIDVIEWOPER_resizingOperationAboutToStart = 8388608;

		// Token: 0x04000AED RID: 2797
		private const int DATAGRIDVIEWOPER_trackKeyboardColResize = 16777216;

		// Token: 0x04000AEE RID: 2798
		private const int DATAGRIDVIEWOPER_mouseOperationMask = 419;

		// Token: 0x04000AEF RID: 2799
		private const int DATAGRIDVIEWOPER_keyboardOperationMask = 16777216;

		// Token: 0x04000AF0 RID: 2800
		private static Size DragSize = SystemInformation.DragSize;

		// Token: 0x04000AF1 RID: 2801
		private const byte DATAGRIDVIEW_columnSizingHotZone = 6;

		// Token: 0x04000AF2 RID: 2802
		private const byte DATAGRIDVIEW_rowSizingHotZone = 5;

		// Token: 0x04000AF3 RID: 2803
		private const byte DATAGRIDVIEW_insertionBarWidth = 3;

		// Token: 0x04000AF4 RID: 2804
		private const byte DATAGRIDVIEW_bulkPaintThreshold = 8;

		// Token: 0x04000AF5 RID: 2805
		private const string DATAGRIDVIEW_htmlPrefix = "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n";

		// Token: 0x04000AF6 RID: 2806
		private const string DATAGRIDVIEW_htmlStartFragment = "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";

		// Token: 0x04000AF7 RID: 2807
		private const string DATAGRIDVIEW_htmlEndFragment = "\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>";

		// Token: 0x04000AF8 RID: 2808
		private const int FOCUS_RECT_OFFSET = 2;

		// Token: 0x04000AF9 RID: 2809
		private BitVector32 dataGridViewState1;

		// Token: 0x04000AFA RID: 2810
		private BitVector32 dataGridViewState2;

		// Token: 0x04000AFB RID: 2811
		private BitVector32 dataGridViewOper;

		// Token: 0x04000AFC RID: 2812
		private const BorderStyle defaultBorderStyle = BorderStyle.FixedSingle;

		// Token: 0x04000AFD RID: 2813
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedCellBorderStyle = DataGridViewAdvancedCellBorderStyle.Single;

		// Token: 0x04000AFE RID: 2814
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedRowHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x04000AFF RID: 2815
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedColumnHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x04000B00 RID: 2816
		private const DataGridViewSelectionMode defaultSelectionMode = DataGridViewSelectionMode.RowHeaderSelect;

		// Token: 0x04000B01 RID: 2817
		private const DataGridViewEditMode defaultEditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;

		// Token: 0x04000B02 RID: 2818
		private const DataGridViewAutoSizeRowCriteriaInternal invalidDataGridViewAutoSizeRowCriteriaInternalMask = ~(DataGridViewAutoSizeRowCriteriaInternal.Header | DataGridViewAutoSizeRowCriteriaInternal.AllColumns);

		// Token: 0x04000B03 RID: 2819
		private SolidBrush backgroundBrush = DataGridView.DefaultBackgroundBrush;

		// Token: 0x04000B04 RID: 2820
		private Pen gridPen;

		// Token: 0x04000B05 RID: 2821
		private Cursor oldCursor;

		// Token: 0x04000B06 RID: 2822
		private HScrollBar horizScrollBar = new HScrollBar();

		// Token: 0x04000B07 RID: 2823
		private VScrollBar vertScrollBar = new VScrollBar();

		// Token: 0x04000B08 RID: 2824
		private DataGridViewHeaderCell topLeftHeaderCell;

		// Token: 0x04000B09 RID: 2825
		private DataGridViewRow rowTemplate;

		// Token: 0x04000B0A RID: 2826
		private DataGridViewRowCollection dataGridViewRows;

		// Token: 0x04000B0B RID: 2827
		private DataGridViewColumnCollection dataGridViewColumns;

		// Token: 0x04000B0C RID: 2828
		private DataGridViewCellStyle placeholderCellStyle;

		// Token: 0x04000B0D RID: 2829
		private StringFormat placeholderStringFormat;

		// Token: 0x04000B0E RID: 2830
		private DataGridViewColumn sortedColumn;

		// Token: 0x04000B0F RID: 2831
		private SortOrder sortOrder;

		// Token: 0x04000B10 RID: 2832
		private object uneditedFormattedValue;

		// Token: 0x04000B11 RID: 2833
		private Control editingControl;

		// Token: 0x04000B12 RID: 2834
		private Control latestEditingControl;

		// Token: 0x04000B13 RID: 2835
		private Control cachedEditingControl;

		// Token: 0x04000B14 RID: 2836
		private Panel editingPanel;

		// Token: 0x04000B15 RID: 2837
		private DataGridView.DataGridViewEditingPanelAccessibleObject editingPanelAccessibleObject;

		// Token: 0x04000B16 RID: 2838
		private Point ptCurrentCell;

		// Token: 0x04000B17 RID: 2839
		private Point ptCurrentCellCache = Point.Empty;

		// Token: 0x04000B18 RID: 2840
		private Point ptAnchorCell;

		// Token: 0x04000B19 RID: 2841
		private Point ptMouseDownCell;

		// Token: 0x04000B1A RID: 2842
		private Point ptMouseEnteredCell;

		// Token: 0x04000B1B RID: 2843
		private Point ptToolTipCell;

		// Token: 0x04000B1C RID: 2844
		private Point ptMouseDownGridCoord;

		// Token: 0x04000B1D RID: 2845
		private DataGridViewSelectionMode selectionMode;

		// Token: 0x04000B1E RID: 2846
		private DataGridViewEditMode editMode;

		// Token: 0x04000B1F RID: 2847
		private DataGridViewCellLinkedList individualSelectedCells;

		// Token: 0x04000B20 RID: 2848
		private DataGridViewCellLinkedList individualReadOnlyCells;

		// Token: 0x04000B21 RID: 2849
		private DataGridViewIntLinkedList selectedBandIndexes;

		// Token: 0x04000B22 RID: 2850
		private DataGridViewIntLinkedList selectedBandSnapshotIndexes;

		// Token: 0x04000B23 RID: 2851
		private DataGridViewCellStyle defaultCellStyle;

		// Token: 0x04000B24 RID: 2852
		private DataGridViewCellStyle columnHeadersDefaultCellStyle;

		// Token: 0x04000B25 RID: 2853
		private DataGridViewCellStyle rowHeadersDefaultCellStyle;

		// Token: 0x04000B26 RID: 2854
		private DataGridViewCellStyle rowsDefaultCellStyle;

		// Token: 0x04000B27 RID: 2855
		private DataGridViewCellStyle alternatingRowsDefaultCellStyle;

		// Token: 0x04000B28 RID: 2856
		private ScrollBars scrollBars;

		// Token: 0x04000B29 RID: 2857
		private DataGridView.LayoutData layout;

		// Token: 0x04000B2A RID: 2858
		private DataGridView.DisplayedBandsData displayedBandsInfo;

		// Token: 0x04000B2B RID: 2859
		private Rectangle normalClientRectangle;

		// Token: 0x04000B2C RID: 2860
		private ArrayList lstRows;

		// Token: 0x04000B2D RID: 2861
		private int availableWidthForFillColumns;

		// Token: 0x04000B2E RID: 2862
		private BorderStyle borderStyle;

		// Token: 0x04000B2F RID: 2863
		private DataGridViewAdvancedBorderStyle advancedCellBorderStyle;

		// Token: 0x04000B30 RID: 2864
		private DataGridViewAdvancedBorderStyle advancedRowHeadersBorderStyle;

		// Token: 0x04000B31 RID: 2865
		private DataGridViewAdvancedBorderStyle advancedColumnHeadersBorderStyle;

		// Token: 0x04000B32 RID: 2866
		private DataGridViewClipboardCopyMode clipboardCopyMode;

		// Token: 0x04000B33 RID: 2867
		private const int minimumRowHeadersWidth = 4;

		// Token: 0x04000B34 RID: 2868
		private const int minimumColumnHeadersHeight = 4;

		// Token: 0x04000B35 RID: 2869
		private const int defaultRowHeadersWidth = 41;

		// Token: 0x04000B36 RID: 2870
		private const int maxHeadersThickness = 32768;

		// Token: 0x04000B37 RID: 2871
		private const int upperSize = 8388607;

		// Token: 0x04000B38 RID: 2872
		private int rowHeadersWidth = 41;

		// Token: 0x04000B39 RID: 2873
		private int cachedRowHeadersWidth;

		// Token: 0x04000B3A RID: 2874
		private const int defaultColumnHeadersHeight = 23;

		// Token: 0x04000B3B RID: 2875
		private int columnHeadersHeight = 23;

		// Token: 0x04000B3C RID: 2876
		private int cachedColumnHeadersHeight;

		// Token: 0x04000B3D RID: 2877
		private DataGridViewAutoSizeRowsMode autoSizeRowsMode;

		// Token: 0x04000B3E RID: 2878
		private DataGridViewAutoSizeColumnsMode autoSizeColumnsMode;

		// Token: 0x04000B3F RID: 2879
		private DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode;

		// Token: 0x04000B40 RID: 2880
		private DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode;

		// Token: 0x04000B41 RID: 2881
		private DataGridViewCellStyleChangedEventArgs dgvcsce;

		// Token: 0x04000B42 RID: 2882
		private DataGridViewCellPaintingEventArgs dgvcpe;

		// Token: 0x04000B43 RID: 2883
		private DataGridViewCellValueEventArgs dgvcve;

		// Token: 0x04000B44 RID: 2884
		private DataGridViewRowHeightInfoNeededEventArgs dgvrhine;

		// Token: 0x04000B45 RID: 2885
		private DataGridViewRowPostPaintEventArgs dgvrpope;

		// Token: 0x04000B46 RID: 2886
		private DataGridViewRowPrePaintEventArgs dgvrprpe;

		// Token: 0x04000B47 RID: 2887
		private int horizontalOffset;

		// Token: 0x04000B48 RID: 2888
		private int verticalOffset;

		// Token: 0x04000B49 RID: 2889
		private int negOffset;

		// Token: 0x04000B4A RID: 2890
		private int newRowIndex = -1;

		// Token: 0x04000B4B RID: 2891
		private int cumulativeVerticalWheelDelta;

		// Token: 0x04000B4C RID: 2892
		private int cumulativeHorizontalWheelDelta;

		// Token: 0x04000B4D RID: 2893
		private int trackColAnchor;

		// Token: 0x04000B4E RID: 2894
		private int trackColumn = -1;

		// Token: 0x04000B4F RID: 2895
		private int trackColumnEdge = -1;

		// Token: 0x04000B50 RID: 2896
		private int trackRowAnchor;

		// Token: 0x04000B51 RID: 2897
		private int trackRow = -1;

		// Token: 0x04000B52 RID: 2898
		private int trackRowEdge = -1;

		// Token: 0x04000B53 RID: 2899
		private int lastHeaderShadow = -1;

		// Token: 0x04000B54 RID: 2900
		private int currentColSplitBar = -1;

		// Token: 0x04000B55 RID: 2901
		private int lastColSplitBar = -1;

		// Token: 0x04000B56 RID: 2902
		private int currentRowSplitBar = -1;

		// Token: 0x04000B57 RID: 2903
		private int lastRowSplitBar = -1;

		// Token: 0x04000B58 RID: 2904
		private int mouseBarOffset;

		// Token: 0x04000B59 RID: 2905
		private int noDimensionChangeCount;

		// Token: 0x04000B5A RID: 2906
		private int noSelectionChangeCount;

		// Token: 0x04000B5B RID: 2907
		private int noAutoSizeCount;

		// Token: 0x04000B5C RID: 2908
		private int inBulkPaintCount;

		// Token: 0x04000B5D RID: 2909
		private int inBulkLayoutCount;

		// Token: 0x04000B5E RID: 2910
		private int inPerformLayoutCount;

		// Token: 0x04000B5F RID: 2911
		private int keyboardResizeStep;

		// Token: 0x04000B60 RID: 2912
		private Rectangle resizeClipRectangle;

		// Token: 0x04000B61 RID: 2913
		private Timer vertScrollTimer;

		// Token: 0x04000B62 RID: 2914
		private Timer horizScrollTimer;

		// Token: 0x04000B63 RID: 2915
		private Hashtable converters;

		// Token: 0x04000B64 RID: 2916
		private Hashtable pens;

		// Token: 0x04000B65 RID: 2917
		private Hashtable brushes;

		// Token: 0x04000B66 RID: 2918
		private NativeMethods.RECT[] cachedScrollableRegion;

		// Token: 0x04000B67 RID: 2919
		private DataGridView.DataGridViewDataConnection dataConnection;

		// Token: 0x04000B68 RID: 2920
		private DataGridView.DataGridViewToolTip toolTipControl;

		// Token: 0x04000B69 RID: 2921
		private string toolTipCaption = string.Empty;

		// Token: 0x04000B6A RID: 2922
		private const int maxTTDISPINFOBufferLength = 80;

		// Token: 0x04000B6B RID: 2923
		private DataGridView.MouseClickInfo lastMouseClickInfo;

		// Token: 0x0200059A RID: 1434
		internal enum DataGridViewHitTestTypeInternal
		{
			// Token: 0x040038AD RID: 14509
			None,
			// Token: 0x040038AE RID: 14510
			Cell,
			// Token: 0x040038AF RID: 14511
			ColumnHeader,
			// Token: 0x040038B0 RID: 14512
			RowHeader,
			// Token: 0x040038B1 RID: 14513
			ColumnResizeLeft,
			// Token: 0x040038B2 RID: 14514
			ColumnResizeRight,
			// Token: 0x040038B3 RID: 14515
			RowResizeTop,
			// Token: 0x040038B4 RID: 14516
			RowResizeBottom,
			// Token: 0x040038B5 RID: 14517
			FirstColumnHeaderLeft,
			// Token: 0x040038B6 RID: 14518
			TopLeftHeader,
			// Token: 0x040038B7 RID: 14519
			TopLeftHeaderResizeLeft,
			// Token: 0x040038B8 RID: 14520
			TopLeftHeaderResizeRight,
			// Token: 0x040038B9 RID: 14521
			TopLeftHeaderResizeTop,
			// Token: 0x040038BA RID: 14522
			TopLeftHeaderResizeBottom,
			// Token: 0x040038BB RID: 14523
			ColumnHeadersResizeBottom,
			// Token: 0x040038BC RID: 14524
			ColumnHeadersResizeTop,
			// Token: 0x040038BD RID: 14525
			RowHeadersResizeRight,
			// Token: 0x040038BE RID: 14526
			RowHeadersResizeLeft,
			// Token: 0x040038BF RID: 14527
			ColumnHeaderLeft,
			// Token: 0x040038C0 RID: 14528
			ColumnHeaderRight
		}

		// Token: 0x0200059B RID: 1435
		internal enum DataGridViewValidateCellInternal
		{
			// Token: 0x040038C2 RID: 14530
			Never,
			// Token: 0x040038C3 RID: 14531
			Always,
			// Token: 0x040038C4 RID: 14532
			WhenChanged
		}

		// Token: 0x0200059C RID: 1436
		private enum DataGridViewMouseEvent
		{
			// Token: 0x040038C6 RID: 14534
			Click,
			// Token: 0x040038C7 RID: 14535
			DoubleClick,
			// Token: 0x040038C8 RID: 14536
			MouseClick,
			// Token: 0x040038C9 RID: 14537
			MouseDoubleClick,
			// Token: 0x040038CA RID: 14538
			MouseDown,
			// Token: 0x040038CB RID: 14539
			MouseUp,
			// Token: 0x040038CC RID: 14540
			MouseMove
		}

		// Token: 0x0200059D RID: 1437
		private struct MouseClickInfo
		{
			// Token: 0x040038CD RID: 14541
			public MouseButtons button;

			// Token: 0x040038CE RID: 14542
			public long timeStamp;

			// Token: 0x040038CF RID: 14543
			public int x;

			// Token: 0x040038D0 RID: 14544
			public int y;

			// Token: 0x040038D1 RID: 14545
			public int col;

			// Token: 0x040038D2 RID: 14546
			public int row;
		}

		// Token: 0x0200059E RID: 1438
		internal class DataGridViewEditingPanel : Panel
		{
			// Token: 0x06005854 RID: 22612 RVA: 0x0017373C File Offset: 0x0017193C
			public DataGridViewEditingPanel(DataGridView owningDataGridView)
			{
				this.owningDataGridView = owningDataGridView;
			}

			// Token: 0x17001530 RID: 5424
			// (get) Token: 0x06005855 RID: 22613 RVA: 0x000A010F File Offset: 0x0009E30F
			internal override bool SupportsUiaProviders
			{
				get
				{
					return AccessibilityImprovements.Level3;
				}
			}

			// Token: 0x06005856 RID: 22614 RVA: 0x0017374B File Offset: 0x0017194B
			protected override AccessibleObject CreateAccessibilityInstance()
			{
				if (AccessibilityImprovements.Level3)
				{
					return new DataGridView.DataGridViewEditingPanelAccessibleObject(this.owningDataGridView, this);
				}
				return base.CreateAccessibilityInstance();
			}

			// Token: 0x040038D3 RID: 14547
			private DataGridView owningDataGridView;
		}

		/// <summary>Provides information about the <see cref="T:System.Windows.Forms.DataGridView" /> control to accessibility client applications.</summary>
		// Token: 0x0200059F RID: 1439
		[ComVisible(true)]
		protected class DataGridViewAccessibleObject : Control.ControlAccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> class. </summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" />.</param>
			// Token: 0x06005857 RID: 22615 RVA: 0x00173767 File Offset: 0x00171967
			public DataGridViewAccessibleObject(DataGridView owner) : base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets or sets the accessible object name.</summary>
			/// <returns>The accessible object name.</returns>
			// Token: 0x17001531 RID: 5425
			// (get) Token: 0x06005858 RID: 22616 RVA: 0x00173778 File Offset: 0x00171978
			public override string Name
			{
				get
				{
					string accessibleName = base.Owner.AccessibleName;
					if (!string.IsNullOrEmpty(accessibleName))
					{
						return accessibleName;
					}
					return "DataGridView";
				}
			}

			/// <summary>Gets the role of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" />.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Table" /> value.</returns>
			// Token: 0x17001532 RID: 5426
			// (get) Token: 0x06005859 RID: 22617 RVA: 0x001737A0 File Offset: 0x001719A0
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = this.owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.Table;
				}
			}

			// Token: 0x17001533 RID: 5427
			// (get) Token: 0x0600585A RID: 22618 RVA: 0x001737C1 File Offset: 0x001719C1
			private AccessibleObject TopRowAccessibilityObject
			{
				get
				{
					if (this.topRowAccessibilityObject == null)
					{
						this.topRowAccessibilityObject = new DataGridView.DataGridViewTopRowAccessibleObject(this.owner);
					}
					return this.topRowAccessibilityObject;
				}
			}

			// Token: 0x17001534 RID: 5428
			// (get) Token: 0x0600585B RID: 22619 RVA: 0x001737E2 File Offset: 0x001719E2
			private AccessibleObject SelectedCellsAccessibilityObject
			{
				get
				{
					if (this.selectedCellsAccessibilityObject == null)
					{
						this.selectedCellsAccessibilityObject = new DataGridView.DataGridViewSelectedCellsAccessibleObject(this.owner);
					}
					return this.selectedCellsAccessibilityObject;
				}
			}

			/// <summary>Returns the child accessible object corresponding to the specified index.</summary>
			/// <param name="index">The zero-based index of the child accessible object.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the child accessible object corresponding to the specified index.</returns>
			// Token: 0x0600585C RID: 22620 RVA: 0x00173804 File Offset: 0x00171A04
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner.Columns.Count == 0)
				{
					return null;
				}
				if (index < 1 && this.owner.ColumnHeadersVisible)
				{
					return this.TopRowAccessibilityObject;
				}
				if (this.owner.ColumnHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible))
				{
					int index2 = this.owner.Rows.DisplayIndexToRowIndex(index);
					return this.owner.Rows[index2].AccessibilityObject;
				}
				index -= this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.horizScrollBar.Visible)
				{
					if (index == 0)
					{
						return this.owner.horizScrollBar.AccessibilityObject;
					}
					index--;
				}
				if (this.owner.vertScrollBar.Visible && index == 0)
				{
					return this.owner.vertScrollBar.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns the number of child objects belonging to an accessible object.</summary>
			/// <returns>The number of child objects belonging to the accessible object.</returns>
			// Token: 0x0600585D RID: 22621 RVA: 0x001738F8 File Offset: 0x00171AF8
			public override int GetChildCount()
			{
				if (this.owner.Columns.Count == 0)
				{
					return 0;
				}
				int num = this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.ColumnHeadersVisible)
				{
					num++;
				}
				if (this.owner.horizScrollBar.Visible)
				{
					num++;
				}
				if (this.owner.vertScrollBar.Visible)
				{
					num++;
				}
				return num;
			}

			/// <summary>Returns the accessible object of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that has the keyboard focus.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that specifies the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that has the current focus, or <see langword="null" /> if the <see cref="T:System.Windows.Forms.DataGridView" /> does not have focus.</returns>
			// Token: 0x0600585E RID: 22622 RVA: 0x0017396A File Offset: 0x00171B6A
			public override AccessibleObject GetFocused()
			{
				if (this.owner.Focused && this.owner.CurrentCell != null)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns an <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the selected cells in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the currently selected cells, or <see langword="null" /> if no cells are selected or if the object itself does not have focus.</returns>
			// Token: 0x0600585F RID: 22623 RVA: 0x00173998 File Offset: 0x00171B98
			public override AccessibleObject GetSelected()
			{
				return this.SelectedCellsAccessibilityObject;
			}

			/// <summary>Retrieves the child object at the specified screen coordinates.</summary>
			/// <param name="x">The horizontal screen coordinate.</param>
			/// <param name="y">The vertical screen coordinate.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents an object at the given screen coordinates, or <see langword="null" /> if no object is at the specified location.</returns>
			// Token: 0x06005860 RID: 22624 RVA: 0x001739A0 File Offset: 0x00171BA0
			public override AccessibleObject HitTest(int x, int y)
			{
				Point point = this.owner.PointToClient(new Point(x, y));
				DataGridView.HitTestInfo hitTestInfo = this.owner.HitTest(point.X, point.Y);
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					return this.owner.Rows[hitTestInfo.RowIndex].Cells[hitTestInfo.ColumnIndex].AccessibilityObject;
				case DataGridViewHitTestType.ColumnHeader:
				{
					int num = this.owner.Columns.ColumnIndexToActualDisplayIndex(hitTestInfo.ColumnIndex, DataGridViewElementStates.Visible);
					if (this.owner.RowHeadersVisible)
					{
						return this.TopRowAccessibilityObject.GetChild(num + 1);
					}
					return this.TopRowAccessibilityObject.GetChild(num);
				}
				case DataGridViewHitTestType.RowHeader:
					return this.owner.Rows[hitTestInfo.RowIndex].AccessibilityObject;
				case DataGridViewHitTestType.TopLeftHeader:
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				case DataGridViewHitTestType.HorizontalScrollBar:
					return this.owner.HorizontalScrollBar.AccessibilityObject;
				case DataGridViewHitTestType.VerticalScrollBar:
					return this.owner.VerticalScrollBar.AccessibilityObject;
				default:
					return null;
				}
			}

			/// <summary>Navigates to another accessible object.</summary>
			/// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the object positioned at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
			// Token: 0x06005861 RID: 22625 RVA: 0x00173AC4 File Offset: 0x00171CC4
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (navigationDirection == AccessibleNavigation.FirstChild)
				{
					return this.GetChild(0);
				}
				if (navigationDirection != AccessibleNavigation.LastChild)
				{
					return null;
				}
				return this.GetChild(this.GetChildCount() - 1);
			}

			// Token: 0x17001535 RID: 5429
			// (get) Token: 0x06005862 RID: 22626 RVA: 0x00173AE8 File Offset: 0x00171CE8
			internal override int[] RuntimeId
			{
				get
				{
					if (this.runtimeId == null)
					{
						this.runtimeId = new int[2];
						this.runtimeId[0] = 42;
						this.runtimeId[1] = this.GetHashCode();
					}
					return this.runtimeId;
				}
			}

			// Token: 0x06005863 RID: 22627 RVA: 0x00173B1C File Offset: 0x00171D1C
			internal override bool IsIAccessibleExSupported()
			{
				return AccessibilityImprovements.Level2 || base.IsIAccessibleExSupported();
			}

			// Token: 0x06005864 RID: 22628 RVA: 0x00173B30 File Offset: 0x00171D30
			internal override object GetPropertyValue(int propertyID)
			{
				if (AccessibilityImprovements.Level3)
				{
					if (propertyID <= 30016)
					{
						switch (propertyID)
						{
						case 30003:
							return 50036;
						case 30004:
						case 30006:
						case 30007:
							break;
						case 30005:
							return this.Name;
						case 30008:
							return false;
						case 30009:
							return this.owner.CanFocus;
						case 30010:
							return this.owner.Enabled;
						default:
							if (propertyID == 30016)
							{
								return true;
							}
							break;
						}
					}
					else if (propertyID != 30026)
					{
						if (propertyID == 30030 || propertyID == 30038)
						{
							return true;
						}
					}
					else
					{
						bool flag = false;
						for (int i = 0; i < this.owner.Columns.Count; i++)
						{
							if (this.owner.IsSortable(this.owner.Columns[i]))
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							switch (this.owner.SortOrder)
							{
							case SortOrder.None:
								return SR.GetString("NotSortedAccessibleStatus");
							case SortOrder.Ascending:
							{
								string name = "DataGridViewSortedAscendingAccessibleStatusFormat";
								object[] array = new object[1];
								int num = 0;
								DataGridViewColumn sortedColumn = this.owner.SortedColumn;
								array[num] = ((sortedColumn != null) ? sortedColumn.HeaderText : null);
								return SR.GetString(name, array);
							}
							case SortOrder.Descending:
							{
								string name2 = "DataGridViewSortedDescendingAccessibleStatusFormat";
								object[] array2 = new object[1];
								int num2 = 0;
								DataGridViewColumn sortedColumn2 = this.owner.SortedColumn;
								array2[num2] = ((sortedColumn2 != null) ? sortedColumn2.HeaderText : null);
								return SR.GetString(name2, array2);
							}
							}
						}
					}
				}
				if (propertyID == 30038)
				{
					return this.IsPatternSupported(10012);
				}
				if (propertyID == 30030)
				{
					return this.IsPatternSupported(10006);
				}
				return base.GetPropertyValue(propertyID);
			}

			// Token: 0x06005865 RID: 22629 RVA: 0x00173CED File Offset: 0x00171EED
			internal override bool IsPatternSupported(int patternId)
			{
				return patternId == 10012 || patternId == 10006 || (AccessibilityImprovements.Level3 && patternId == 10018) || base.IsPatternSupported(patternId);
			}

			// Token: 0x06005866 RID: 22630 RVA: 0x00173D18 File Offset: 0x00171F18
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple[] GetRowHeaders()
			{
				if (!this.owner.RowHeadersVisible)
				{
					return null;
				}
				UnsafeNativeMethods.IRawElementProviderSimple[] array = new UnsafeNativeMethods.IRawElementProviderSimple[this.owner.Rows.Count];
				for (int i = 0; i < this.owner.Rows.Count; i++)
				{
					array[i] = this.owner.Rows[i].HeaderCell.AccessibilityObject;
				}
				return array;
			}

			// Token: 0x06005867 RID: 22631 RVA: 0x00173D84 File Offset: 0x00171F84
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple[] GetColumnHeaders()
			{
				if (!this.owner.ColumnHeadersVisible)
				{
					return null;
				}
				UnsafeNativeMethods.IRawElementProviderSimple[] array = new UnsafeNativeMethods.IRawElementProviderSimple[this.owner.Columns.Count];
				for (int i = 0; i < this.owner.Columns.Count; i++)
				{
					array[i] = this.owner.Columns[i].HeaderCell.AccessibilityObject;
				}
				return array;
			}

			// Token: 0x17001536 RID: 5430
			// (get) Token: 0x06005868 RID: 22632 RVA: 0x0000E0A4 File Offset: 0x0000C2A4
			internal override UnsafeNativeMethods.RowOrColumnMajor RowOrColumnMajor
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return UnsafeNativeMethods.RowOrColumnMajor.RowOrColumnMajor_RowMajor;
				}
			}

			// Token: 0x06005869 RID: 22633 RVA: 0x00173DF0 File Offset: 0x00171FF0
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple GetItem(int row, int column)
			{
				if (row >= 0 && row < this.owner.Rows.Count && column >= 0 && column < this.owner.Columns.Count)
				{
					return this.owner.Rows[row].Cells[column].AccessibilityObject;
				}
				return null;
			}

			// Token: 0x17001537 RID: 5431
			// (get) Token: 0x0600586A RID: 22634 RVA: 0x00173E4E File Offset: 0x0017204E
			internal override int RowCount
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.owner.RowCount;
				}
			}

			// Token: 0x17001538 RID: 5432
			// (get) Token: 0x0600586B RID: 22635 RVA: 0x00173E5B File Offset: 0x0017205B
			internal override int ColumnCount
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.owner.ColumnCount;
				}
			}

			// Token: 0x17001539 RID: 5433
			// (get) Token: 0x0600586C RID: 22636 RVA: 0x0000E209 File Offset: 0x0000C409
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.Bounds;
				}
			}

			// Token: 0x1700153A RID: 5434
			// (get) Token: 0x0600586D RID: 22637 RVA: 0x000069BD File Offset: 0x00004BBD
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					return this;
				}
			}

			// Token: 0x0600586E RID: 22638 RVA: 0x00173E68 File Offset: 0x00172068
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				if (direction != UnsafeNativeMethods.NavigateDirection.FirstChild)
				{
					if (direction == UnsafeNativeMethods.NavigateDirection.LastChild)
					{
						int childCount = this.GetChildCount();
						if (childCount > 0)
						{
							int index = childCount - 1;
							return this.GetChild(index);
						}
					}
				}
				else
				{
					int childCount = this.GetChildCount();
					if (childCount > 0)
					{
						return this.GetChild(0);
					}
				}
				return null;
			}

			// Token: 0x0600586F RID: 22639 RVA: 0x00173EAA File Offset: 0x001720AA
			internal override void SetFocus()
			{
				if (this.owner.CanFocus)
				{
					this.owner.Focus();
				}
			}

			// Token: 0x06005870 RID: 22640 RVA: 0x00173EC5 File Offset: 0x001720C5
			internal override UnsafeNativeMethods.IRawElementProviderFragment ElementProviderFromPoint(double x, double y)
			{
				return this.HitTest((int)x, (int)y);
			}

			// Token: 0x06005871 RID: 22641 RVA: 0x000E8E48 File Offset: 0x000E7048
			internal override UnsafeNativeMethods.IRawElementProviderFragment GetFocus()
			{
				return this.GetFocused();
			}

			// Token: 0x040038D4 RID: 14548
			private int[] runtimeId;

			// Token: 0x040038D5 RID: 14549
			private DataGridView owner;

			// Token: 0x040038D6 RID: 14550
			private DataGridView.DataGridViewTopRowAccessibleObject topRowAccessibilityObject;

			// Token: 0x040038D7 RID: 14551
			private DataGridView.DataGridViewSelectedCellsAccessibleObject selectedCellsAccessibilityObject;
		}

		// Token: 0x020005A0 RID: 1440
		internal class DataGridViewEditingPanelAccessibleObject : Control.ControlAccessibleObject
		{
			// Token: 0x06005872 RID: 22642 RVA: 0x00173ED1 File Offset: 0x001720D1
			public DataGridViewEditingPanelAccessibleObject(DataGridView dataGridView, Panel panel) : base(panel)
			{
				this.dataGridView = dataGridView;
				this.panel = panel;
			}

			// Token: 0x1700153B RID: 5435
			// (get) Token: 0x06005873 RID: 22643 RVA: 0x00173EE8 File Offset: 0x001720E8
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.panel.AccessibilityObject.Bounds;
				}
			}

			// Token: 0x1700153C RID: 5436
			// (get) Token: 0x06005874 RID: 22644 RVA: 0x00173EFA File Offset: 0x001720FA
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					return this.dataGridView.AccessibilityObject;
				}
			}

			// Token: 0x1700153D RID: 5437
			// (get) Token: 0x06005875 RID: 22645 RVA: 0x00173F07 File Offset: 0x00172107
			internal override int[] RuntimeId
			{
				get
				{
					return this.panel.AccessibilityObject.RuntimeId;
				}
			}

			// Token: 0x06005876 RID: 22646 RVA: 0x00173F1C File Offset: 0x0017211C
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				if (direction != UnsafeNativeMethods.NavigateDirection.Parent)
				{
					if (direction - UnsafeNativeMethods.NavigateDirection.FirstChild <= 1)
					{
						return this.dataGridView.EditingControlAccessibleObject;
					}
				}
				else
				{
					DataGridViewCell currentCell = this.dataGridView.CurrentCell;
					if (currentCell != null && this.dataGridView.IsCurrentCellInEditMode)
					{
						return currentCell.AccessibilityObject;
					}
				}
				return null;
			}

			// Token: 0x06005877 RID: 22647 RVA: 0x00173F64 File Offset: 0x00172164
			internal override void SetFocus()
			{
				if (this.panel.CanFocus)
				{
					this.panel.Focus();
				}
			}

			// Token: 0x06005878 RID: 22648 RVA: 0x00173F7F File Offset: 0x0017217F
			internal override bool IsPatternSupported(int patternId)
			{
				return patternId.Equals(10018);
			}

			// Token: 0x06005879 RID: 22649 RVA: 0x00173F90 File Offset: 0x00172190
			internal override object GetPropertyValue(int propertyId)
			{
				switch (propertyId)
				{
				case 30003:
					return 50033;
				case 30004:
				case 30006:
				case 30011:
				case 30012:
				case 30014:
				case 30015:
				case 30018:
				case 30020:
				case 30021:
					break;
				case 30005:
					return SR.GetString("DataGridView_AccEditingPanelAccName");
				case 30007:
					return this.panel.AccessibilityObject.KeyboardShortcut;
				case 30008:
					return this.dataGridView.CurrentCell != null;
				case 30009:
					return true;
				case 30010:
					return this.dataGridView.Enabled;
				case 30013:
					return string.Empty;
				case 30016:
				case 30017:
					return true;
				case 30019:
					return false;
				case 30022:
					return false;
				default:
					if (propertyId == 30090)
					{
						return true;
					}
					if (propertyId == 30107)
					{
						return SR.GetString("DataGridViewEditingPanelUiaProviderDescription");
					}
					break;
				}
				return base.GetPropertyValue(propertyId);
			}

			// Token: 0x040038D8 RID: 14552
			private DataGridView dataGridView;

			// Token: 0x040038D9 RID: 14553
			private Panel panel;
		}

		/// <summary>Represents a collection of controls contained on a <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x020005A1 RID: 1441
		[ComVisible(false)]
		public class DataGridViewControlCollection : Control.ControlCollection
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> class. </summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			// Token: 0x0600587A RID: 22650 RVA: 0x00174095 File Offset: 0x00172295
			public DataGridViewControlCollection(DataGridView owner) : base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Copies the contents of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> into a <see cref="T:System.Windows.Forms.Control" /> array, starting at the specified index of the target array.</summary>
			/// <param name="array">The one-dimensional <see cref="T:System.Windows.Forms.Control" /> array that is the destination of the elements copied from the current collection. The array must have zero-based indexing.</param>
			/// <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
			/// <exception cref="T:System.ArgumentNullException">
			///         <paramref name="array" /> is <see langword="null" />.</exception>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///         <paramref name="index" /> is less than zero.</exception>
			/// <exception cref="T:System.ArgumentException">
			///         <paramref name="array" /> is multidimensional.-or-The number of elements in the source collection is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />.</exception>
			/// <exception cref="T:System.InvalidCastException">The type of the source element cannot be cast automatically to the type of <paramref name="array" />.</exception>
			// Token: 0x0600587B RID: 22651 RVA: 0x001740A5 File Offset: 0x001722A5
			public void CopyTo(Control[] array, int index)
			{
				base.CopyTo(array, index);
			}

			/// <summary>Inserts the specified <see cref="T:System.Windows.Forms.Control" /> into the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> at the specified index.</summary>
			/// <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
			/// <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to insert into the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///         <paramref name="index" /> is less than zero or greater than or equal to the current number of controls in the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</exception>
			// Token: 0x0600587C RID: 22652 RVA: 0x000FE82D File Offset: 0x000FCA2D
			public void Insert(int index, Control value)
			{
				((IList)this).Insert(index, value);
			}

			/// <summary>Removes the specified control from the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</summary>
			/// <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to remove from the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			// Token: 0x0600587D RID: 22653 RVA: 0x001740AF File Offset: 0x001722AF
			public override void Remove(Control value)
			{
				if (value != this.owner.horizScrollBar && value != this.owner.vertScrollBar && value != this.owner.editingPanel)
				{
					base.Remove(value);
				}
			}

			// Token: 0x0600587E RID: 22654 RVA: 0x001740E2 File Offset: 0x001722E2
			internal void RemoveInternal(Control value)
			{
				base.Remove(value);
			}

			/// <summary>Removes all controls from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
			// Token: 0x0600587F RID: 22655 RVA: 0x001740EC File Offset: 0x001722EC
			public override void Clear()
			{
				for (int i = 0; i < this.Count; i++)
				{
					if (this[i] != this.owner.horizScrollBar && this[i] != this.owner.vertScrollBar && this[i] != this.owner.editingPanel)
					{
						this.Remove(this[i]);
					}
				}
			}

			// Token: 0x040038DA RID: 14554
			private DataGridView owner;
		}

		// Token: 0x020005A2 RID: 1442
		internal class DataGridViewDataConnection
		{
			// Token: 0x06005880 RID: 22656 RVA: 0x00174153 File Offset: 0x00172353
			public DataGridViewDataConnection(DataGridView owner)
			{
				this.owner = owner;
				this.dataConnectionState = new BitVector32(4);
			}

			// Token: 0x1700153E RID: 5438
			// (get) Token: 0x06005881 RID: 22657 RVA: 0x00174180 File Offset: 0x00172380
			public bool AllowAdd
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowAdd) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x1700153F RID: 5439
			// (get) Token: 0x06005882 RID: 22658 RVA: 0x001741CD File Offset: 0x001723CD
			public bool AllowEdit
			{
				get
				{
					return this.currencyManager != null && this.currencyManager.AllowEdit;
				}
			}

			// Token: 0x17001540 RID: 5440
			// (get) Token: 0x06005883 RID: 22659 RVA: 0x001741E4 File Offset: 0x001723E4
			public bool AllowRemove
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowRemove) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x17001541 RID: 5441
			// (get) Token: 0x06005884 RID: 22660 RVA: 0x00174231 File Offset: 0x00172431
			public bool CancellingRowEdit
			{
				get
				{
					return this.dataConnectionState[64];
				}
			}

			// Token: 0x17001542 RID: 5442
			// (get) Token: 0x06005885 RID: 22661 RVA: 0x00174240 File Offset: 0x00172440
			public CurrencyManager CurrencyManager
			{
				get
				{
					return this.currencyManager;
				}
			}

			// Token: 0x17001543 RID: 5443
			// (get) Token: 0x06005886 RID: 22662 RVA: 0x00174248 File Offset: 0x00172448
			public string DataMember
			{
				get
				{
					return this.dataMember;
				}
			}

			// Token: 0x17001544 RID: 5444
			// (get) Token: 0x06005887 RID: 22663 RVA: 0x00174250 File Offset: 0x00172450
			public object DataSource
			{
				get
				{
					return this.dataSource;
				}
			}

			// Token: 0x17001545 RID: 5445
			// (get) Token: 0x06005888 RID: 22664 RVA: 0x00174258 File Offset: 0x00172458
			// (set) Token: 0x06005889 RID: 22665 RVA: 0x00174267 File Offset: 0x00172467
			public bool DoNotChangePositionInTheCurrencyManager
			{
				get
				{
					return this.dataConnectionState[16];
				}
				set
				{
					this.dataConnectionState[16] = value;
				}
			}

			// Token: 0x17001546 RID: 5446
			// (get) Token: 0x0600588A RID: 22666 RVA: 0x00174277 File Offset: 0x00172477
			public bool InterestedInRowEvents
			{
				get
				{
					return this.dataConnectionState[32];
				}
			}

			// Token: 0x17001547 RID: 5447
			// (get) Token: 0x0600588B RID: 22667 RVA: 0x00174286 File Offset: 0x00172486
			public IList List
			{
				get
				{
					if (this.currencyManager != null)
					{
						return this.currencyManager.List;
					}
					return null;
				}
			}

			// Token: 0x17001548 RID: 5448
			// (get) Token: 0x0600588C RID: 22668 RVA: 0x0017429D File Offset: 0x0017249D
			public bool ListWasReset
			{
				get
				{
					return this.dataConnectionState[1024];
				}
			}

			// Token: 0x17001549 RID: 5449
			// (get) Token: 0x0600588D RID: 22669 RVA: 0x001742AF File Offset: 0x001724AF
			public bool PositionChangingOutsideDataGridView
			{
				get
				{
					return !this.dataConnectionState[8] && this.dataConnectionState[2048];
				}
			}

			// Token: 0x1700154A RID: 5450
			// (get) Token: 0x0600588E RID: 22670 RVA: 0x001742D1 File Offset: 0x001724D1
			public bool ProcessingListChangedEvent
			{
				get
				{
					return this.dataConnectionState[131072];
				}
			}

			// Token: 0x1700154B RID: 5451
			// (get) Token: 0x0600588F RID: 22671 RVA: 0x001742E3 File Offset: 0x001724E3
			public bool ProcessingMetaDataChanges
			{
				get
				{
					return this.dataConnectionState[2];
				}
			}

			// Token: 0x1700154C RID: 5452
			// (get) Token: 0x06005890 RID: 22672 RVA: 0x001742F1 File Offset: 0x001724F1
			public bool RestoreRow
			{
				get
				{
					return this.dataConnectionState[128];
				}
			}

			// Token: 0x06005891 RID: 22673 RVA: 0x00174304 File Offset: 0x00172504
			public void AddNew()
			{
				if (this.currencyManager != null)
				{
					if (!this.currencyManager.ShouldBind)
					{
						return;
					}
					this.dataConnectionState[4] = false;
					this.dataConnectionState[32768] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					finally
					{
						this.dataConnectionState[32768] = false;
					}
					this.dataConnectionState[512] = true;
					try
					{
						this.currencyManager.AddNew();
					}
					finally
					{
						this.dataConnectionState[512] = false;
					}
				}
			}

			// Token: 0x06005892 RID: 22674 RVA: 0x001743B0 File Offset: 0x001725B0
			public void ApplySortingInformationFromBackEnd()
			{
				if (this.currencyManager == null)
				{
					return;
				}
				PropertyDescriptor propertyDescriptor = null;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (propertyDescriptor == null)
				{
					for (int i = 0; i < this.owner.Columns.Count; i++)
					{
						if (this.owner.Columns[i].IsDataBound)
						{
							this.owner.Columns[i].HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
					this.owner.sortedColumn = null;
					this.owner.sortOrder = SortOrder.None;
					return;
				}
				bool flag = false;
				for (int j = 0; j < this.owner.Columns.Count; j++)
				{
					DataGridViewColumn dataGridViewColumn = this.owner.Columns[j];
					if (dataGridViewColumn.IsDataBound && dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable)
					{
						if (string.Equals(dataGridViewColumn.DataPropertyName, propertyDescriptor.Name, StringComparison.OrdinalIgnoreCase))
						{
							if (!flag && !this.owner.InSortOperation)
							{
								this.owner.sortedColumn = dataGridViewColumn;
								this.owner.sortOrder = sortOrder;
								flag = true;
							}
							dataGridViewColumn.HeaderCell.SortGlyphDirection = sortOrder;
						}
						else
						{
							dataGridViewColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
				}
			}

			// Token: 0x06005893 RID: 22675 RVA: 0x001744E6 File Offset: 0x001726E6
			public TypeConverter BoundColumnConverter(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].Converter;
			}

			// Token: 0x06005894 RID: 22676 RVA: 0x001744FC File Offset: 0x001726FC
			public int BoundColumnIndex(string dataPropertyName)
			{
				if (this.props == null)
				{
					return -1;
				}
				int result = -1;
				for (int i = 0; i < this.props.Count; i++)
				{
					if (string.Compare(this.props[i].Name, dataPropertyName, true, CultureInfo.InvariantCulture) == 0)
					{
						result = i;
						break;
					}
				}
				return result;
			}

			// Token: 0x06005895 RID: 22677 RVA: 0x00174550 File Offset: 0x00172750
			public SortOrder BoundColumnSortOrder(int boundColumnIndex)
			{
				IBindingList bindingList = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
				IBindingListView bindingListView = (bindingList != null) ? (bindingList as IBindingListView) : null;
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					return SortOrder.None;
				}
				PropertyDescriptor propertyDescriptor;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (sortOrder == SortOrder.None)
				{
					return SortOrder.None;
				}
				if (string.Compare(this.props[boundColumnIndex].Name, propertyDescriptor.Name, true, CultureInfo.InvariantCulture) == 0)
				{
					return sortOrder;
				}
				return SortOrder.None;
			}

			// Token: 0x06005896 RID: 22678 RVA: 0x001745D1 File Offset: 0x001727D1
			public Type BoundColumnValueType(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].PropertyType;
			}

			// Token: 0x06005897 RID: 22679 RVA: 0x001745E4 File Offset: 0x001727E4
			private void currencyManager_ListChanged(object sender, ListChangedEventArgs e)
			{
				this.dataConnectionState[131072] = true;
				try
				{
					this.ProcessListChanged(e);
				}
				finally
				{
					this.dataConnectionState[131072] = false;
				}
				this.owner.OnDataBindingComplete(e.ListChangedType);
				this.lastListCount = this.currencyManager.Count;
			}

			// Token: 0x06005898 RID: 22680 RVA: 0x00174650 File Offset: 0x00172850
			private void ProcessListChanged(ListChangedEventArgs e)
			{
				if (e.ListChangedType == ListChangedType.PropertyDescriptorAdded || e.ListChangedType == ListChangedType.PropertyDescriptorDeleted || e.ListChangedType == ListChangedType.PropertyDescriptorChanged)
				{
					this.dataConnectionState[2] = true;
					try
					{
						this.DataSourceMetaDataChanged();
					}
					finally
					{
						this.dataConnectionState[2] = false;
					}
					return;
				}
				if (this.dataConnectionState[65536] != this.owner.AllowUserToAddRowsInternal)
				{
					this.dataConnectionState[1024] = true;
					try
					{
						this.owner.RefreshRows(!this.owner.InSortOperation);
						this.owner.PushAllowUserToAddRows();
					}
					finally
					{
						this.ResetDataConnectionState();
					}
					return;
				}
				if (!this.dataConnectionState[4] && this.owner.newRowIndex == e.NewIndex)
				{
					if (e.ListChangedType != ListChangedType.ItemAdded)
					{
						if (e.ListChangedType == ListChangedType.ItemDeleted)
						{
							if (this.dataConnectionState[64])
							{
								this.owner.PopulateNewRowWithDefaultValues();
								return;
							}
							if (this.dataConnectionState[32768] || this.dataConnectionState[512])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
									return;
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
							}
							if (this.dataConnectionState[4096] && this.currencyManager.List.Count == 0)
							{
								this.AddNew();
							}
						}
						return;
					}
					if (this.dataConnectionState[512])
					{
						return;
					}
					if (this.dataConnectionState[256])
					{
						return;
					}
					if (this.owner.Columns.Count > 0)
					{
						do
						{
							this.owner.newRowIndex = -1;
							this.owner.AddNewRow(false);
						}
						while (this.DataBoundRowsCount() < this.currencyManager.Count);
					}
					this.dataConnectionState[4] = true;
					this.MatchCurrencyManagerPosition(true, true);
					return;
				}
				else
				{
					if (e.ListChangedType == ListChangedType.ItemAdded && this.currencyManager.List.Count == (this.owner.AllowUserToAddRowsInternal ? (this.owner.Rows.Count - 1) : this.owner.Rows.Count))
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = true;
						}
						return;
					}
					if (e.ListChangedType == ListChangedType.ItemDeleted)
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[16384] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = false;
						}
						else
						{
							if (!this.dataConnectionState[4] && this.dataConnectionState[32768])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
								return;
							}
							if (this.currencyManager.List.Count == this.DataBoundRowsCount())
							{
								return;
							}
						}
					}
					this.dataConnectionState[16] = true;
					try
					{
						switch (e.ListChangedType)
						{
						case ListChangedType.Reset:
						{
							this.dataConnectionState[1024] = true;
							bool visible = this.owner.Visible;
							if (visible)
							{
								this.owner.BeginUpdateInternal();
							}
							try
							{
								this.owner.RefreshRows(!this.owner.InSortOperation);
								this.owner.PushAllowUserToAddRows();
								this.ApplySortingInformationFromBackEnd();
								goto IL_5B7;
							}
							finally
							{
								this.ResetDataConnectionState();
								if (visible)
								{
									this.owner.EndUpdateInternal(false);
									this.owner.Invalidate(true);
								}
							}
							break;
						}
						case ListChangedType.ItemAdded:
							break;
						case ListChangedType.ItemDeleted:
							this.owner.Rows.RemoveAtInternal(e.NewIndex, true);
							this.dataConnectionState[8192] = false;
							goto IL_5B7;
						case ListChangedType.ItemMoved:
						{
							int lo = Math.Min(e.OldIndex, e.NewIndex);
							int hi = Math.Max(e.OldIndex, e.NewIndex);
							this.owner.InvalidateRows(lo, hi);
							goto IL_5B7;
						}
						case ListChangedType.ItemChanged:
						{
							string text = null;
							if (e.PropertyDescriptor != null)
							{
								text = e.PropertyDescriptor.Name;
							}
							for (int i = 0; i < this.owner.Columns.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn = this.owner.Columns[i];
								if (dataGridViewColumn.Visible && dataGridViewColumn.IsDataBound)
								{
									if (!string.IsNullOrEmpty(text))
									{
										if (string.Compare(dataGridViewColumn.DataPropertyName, text, true, CultureInfo.InvariantCulture) == 0)
										{
											this.owner.OnCellCommonChange(i, e.NewIndex);
										}
									}
									else
									{
										this.owner.OnCellCommonChange(i, e.NewIndex);
									}
								}
							}
							this.owner.InvalidateCell(-1, e.NewIndex);
							if (this.owner.CurrentCellAddress.Y == e.NewIndex && this.owner.IsCurrentCellInEditMode)
							{
								this.owner.RefreshEdit();
								goto IL_5B7;
							}
							goto IL_5B7;
						}
						default:
							goto IL_5B7;
						}
						if (this.owner.NewRowIndex != -1 && e.NewIndex == this.owner.Rows.Count)
						{
							throw new InvalidOperationException();
						}
						this.owner.Rows.InsertInternal(e.NewIndex, this.owner.RowTemplateClone, true);
						IL_5B7:
						if (this.owner.Rows.Count > 0 && !this.dataConnectionState[8] && !this.owner.InSortOperation)
						{
							this.MatchCurrencyManagerPosition(false, e.ListChangedType == ListChangedType.Reset);
						}
					}
					finally
					{
						this.dataConnectionState[16] = false;
					}
					return;
				}
			}

			// Token: 0x06005899 RID: 22681 RVA: 0x00174CF8 File Offset: 0x00172EF8
			private void currencyManager_PositionChanged(object sender, EventArgs e)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				if (this.owner.Rows.Count == (this.owner.AllowUserToAddRowsInternal ? 1 : 0))
				{
					return;
				}
				if (this.dataConnectionState[8])
				{
					return;
				}
				if (this.owner.AllowUserToAddRowsInternal && this.dataConnectionState[4] && !this.dataConnectionState[512] && this.currencyManager.Position > -1 && this.currencyManager.Position == this.owner.NewRowIndex && this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex && this.currencyManager.Count == this.DataBoundRowsCount() + 1)
				{
					return;
				}
				this.dataConnectionState[2048] = true;
				try
				{
					if (!this.owner.InSortOperation)
					{
						bool scrollIntoView = true;
						if (this.dataConnectionState[256])
						{
							IBindingList bindingList = this.currencyManager.List as IBindingList;
							if (bindingList != null && bindingList.SupportsSorting && bindingList.IsSorted)
							{
								scrollIntoView = false;
							}
						}
						bool flag = this.dataConnectionState[64] && !this.dataConnectionState[4];
						flag |= (this.lastListCount == -1 || this.lastListCount == this.currencyManager.Count);
						this.MatchCurrencyManagerPosition(scrollIntoView, flag);
					}
				}
				finally
				{
					this.dataConnectionState[2048] = false;
				}
			}

			// Token: 0x0600589A RID: 22682 RVA: 0x00174EA0 File Offset: 0x001730A0
			private int DataBoundRowsCount()
			{
				int num = this.owner.Rows.Count;
				if (this.owner.AllowUserToAddRowsInternal && this.owner.Rows.Count > 0 && (this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex || this.owner.IsCurrentRowDirty))
				{
					num--;
				}
				return num;
			}

			// Token: 0x0600589B RID: 22683 RVA: 0x00174F10 File Offset: 0x00173110
			private void DataSource_Initialized(object sender, EventArgs e)
			{
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null)
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
				}
				this.dataConnectionState[262144] = false;
				this.SetDataConnection(this.dataSource, this.dataMember);
				this.owner.RefreshColumnsAndRows();
				this.owner.OnDataBindingComplete(ListChangedType.Reset);
			}

			// Token: 0x0600589C RID: 22684 RVA: 0x00174F78 File Offset: 0x00173178
			private void DataSourceMetaDataChanged()
			{
				this.props = this.currencyManager.GetItemProperties();
				this.owner.RefreshColumnsAndRows();
			}

			// Token: 0x0600589D RID: 22685 RVA: 0x00174F98 File Offset: 0x00173198
			public void DeleteRow(int rowIndex)
			{
				this.dataConnectionState[8] = true;
				try
				{
					if (!this.dataConnectionState[4])
					{
						bool flag;
						if (this.owner.newRowIndex == this.currencyManager.List.Count)
						{
							flag = (rowIndex == this.owner.newRowIndex - 1);
						}
						else
						{
							flag = (rowIndex == this.owner.newRowIndex);
						}
						if (flag)
						{
							this.CancelRowEdit(false, true);
							return;
						}
						this.dataConnectionState[4096] = true;
						this.dataConnectionState[8192] = true;
						try
						{
							this.currencyManager.RemoveAt(rowIndex);
							return;
						}
						finally
						{
							this.dataConnectionState[4096] = false;
							this.dataConnectionState[8192] = false;
						}
					}
					this.dataConnectionState[4096] = true;
					this.dataConnectionState[8192] = true;
					try
					{
						this.currencyManager.RemoveAt(rowIndex);
					}
					finally
					{
						this.dataConnectionState[4096] = false;
						this.dataConnectionState[8192] = false;
					}
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x0600589E RID: 22686 RVA: 0x00175118 File Offset: 0x00173318
			public bool DataFieldIsReadOnly(int boundColumnIndex)
			{
				return this.props != null && this.props[boundColumnIndex].IsReadOnly;
			}

			// Token: 0x0600589F RID: 22687 RVA: 0x00175135 File Offset: 0x00173335
			public void Dispose()
			{
				this.UnWireEvents();
				this.currencyManager = null;
			}

			// Token: 0x060058A0 RID: 22688 RVA: 0x00175144 File Offset: 0x00173344
			private static DataGridViewColumn GetDataGridViewColumnFromType(Type type)
			{
				TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
				DataGridViewColumn result;
				if (type.Equals(typeof(bool)) || type.Equals(typeof(CheckState)))
				{
					result = new DataGridViewCheckBoxColumn(type.Equals(typeof(CheckState)));
				}
				else if (typeof(Image).IsAssignableFrom(type) || converter.CanConvertFrom(type))
				{
					result = new DataGridViewImageColumn();
				}
				else
				{
					result = new DataGridViewTextBoxColumn();
				}
				return result;
			}

			// Token: 0x060058A1 RID: 22689 RVA: 0x001751C8 File Offset: 0x001733C8
			public DataGridViewColumn[] GetCollectionOfBoundDataGridViewColumns()
			{
				if (this.props == null)
				{
					return null;
				}
				ArrayList arrayList = new ArrayList();
				int i = 0;
				while (i < this.props.Count)
				{
					if (!typeof(IList).IsAssignableFrom(this.props[i].PropertyType))
					{
						goto IL_67;
					}
					TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
					if (converter.CanConvertFrom(this.props[i].PropertyType))
					{
						goto IL_67;
					}
					IL_160:
					i++;
					continue;
					IL_67:
					DataGridViewColumn dataGridViewColumnFromType = DataGridView.DataGridViewDataConnection.GetDataGridViewColumnFromType(this.props[i].PropertyType);
					dataGridViewColumnFromType.IsDataBoundInternal = true;
					dataGridViewColumnFromType.BoundColumnIndex = i;
					dataGridViewColumnFromType.DataPropertyName = this.props[i].Name;
					dataGridViewColumnFromType.Name = this.props[i].Name;
					dataGridViewColumnFromType.BoundColumnConverter = this.props[i].Converter;
					dataGridViewColumnFromType.HeaderText = ((!string.IsNullOrEmpty(this.props[i].DisplayName)) ? this.props[i].DisplayName : this.props[i].Name);
					dataGridViewColumnFromType.ValueType = this.props[i].PropertyType;
					dataGridViewColumnFromType.IsBrowsableInternal = this.props[i].IsBrowsable;
					dataGridViewColumnFromType.ReadOnly = this.props[i].IsReadOnly;
					arrayList.Add(dataGridViewColumnFromType);
					goto IL_160;
				}
				DataGridViewColumn[] array = new DataGridViewColumn[arrayList.Count];
				arrayList.CopyTo(array);
				return array;
			}

			// Token: 0x060058A2 RID: 22690 RVA: 0x00175360 File Offset: 0x00173560
			private void GetSortingInformationFromBackend(out PropertyDescriptor sortProperty, out SortOrder sortOrder)
			{
				IBindingList bindingList = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
				IBindingListView bindingListView = (bindingList != null) ? (bindingList as IBindingListView) : null;
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					sortOrder = SortOrder.None;
					sortProperty = null;
					return;
				}
				if (bindingList.SortProperty != null)
				{
					sortProperty = bindingList.SortProperty;
					sortOrder = ((bindingList.SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				if (bindingListView == null)
				{
					sortProperty = null;
					sortOrder = SortOrder.None;
					return;
				}
				ListSortDescriptionCollection sortDescriptions = bindingListView.SortDescriptions;
				if (sortDescriptions != null && sortDescriptions.Count > 0 && sortDescriptions[0].PropertyDescriptor != null)
				{
					sortProperty = sortDescriptions[0].PropertyDescriptor;
					sortOrder = ((sortDescriptions[0].SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				sortProperty = null;
				sortOrder = SortOrder.None;
			}

			// Token: 0x060058A3 RID: 22691 RVA: 0x00175423 File Offset: 0x00173623
			public void ResetCachedAllowUserToAddRowsInternal()
			{
				this.dataConnectionState[65536] = this.owner.AllowUserToAddRowsInternal;
			}

			// Token: 0x060058A4 RID: 22692 RVA: 0x00175440 File Offset: 0x00173640
			private void ResetDataConnectionState()
			{
				this.dataConnectionState = new BitVector32(4);
				if (this.currencyManager != null)
				{
					this.dataConnectionState[32] = true;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
			}

			// Token: 0x060058A5 RID: 22693 RVA: 0x0017546C File Offset: 0x0017366C
			public void SetDataConnection(object dataSource, string dataMember)
			{
				if (this.dataConnectionState[1])
				{
					return;
				}
				this.ResetDataConnectionState();
				if (dataMember == null)
				{
					dataMember = string.Empty;
				}
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null && this.dataConnectionState[262144])
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
					this.dataConnectionState[262144] = false;
				}
				this.dataSource = dataSource;
				this.dataMember = dataMember;
				if (this.owner.BindingContext == null)
				{
					return;
				}
				this.dataConnectionState[1] = true;
				try
				{
					this.UnWireEvents();
					if (this.dataSource != null && this.owner.BindingContext != null && this.dataSource != Convert.DBNull)
					{
						supportInitializeNotification = (this.dataSource as ISupportInitializeNotification);
						if (supportInitializeNotification != null && !supportInitializeNotification.IsInitialized)
						{
							if (!this.dataConnectionState[262144])
							{
								supportInitializeNotification.Initialized += this.DataSource_Initialized;
								this.dataConnectionState[262144] = true;
							}
							this.currencyManager = null;
						}
						else
						{
							this.currencyManager = (this.owner.BindingContext[this.dataSource, this.dataMember] as CurrencyManager);
						}
					}
					else
					{
						this.currencyManager = null;
					}
					this.WireEvents();
					if (this.currencyManager != null)
					{
						this.props = this.currencyManager.GetItemProperties();
					}
					else
					{
						this.props = null;
					}
				}
				finally
				{
					this.dataConnectionState[1] = false;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
				if (this.currencyManager != null)
				{
					this.lastListCount = this.currencyManager.Count;
					return;
				}
				this.lastListCount = -1;
			}

			// Token: 0x060058A6 RID: 22694 RVA: 0x00175628 File Offset: 0x00173828
			public string GetError(int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = (this.currencyManager[rowIndex] as IDataErrorInfo);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo.Error;
				}
				return string.Empty;
			}

			// Token: 0x060058A7 RID: 22695 RVA: 0x001756A4 File Offset: 0x001738A4
			public string GetError(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = (this.currencyManager[rowIndex] as IDataErrorInfo);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo[this.props[boundColumnIndex].Name];
				}
				return string.Empty;
			}

			// Token: 0x060058A8 RID: 22696 RVA: 0x00175734 File Offset: 0x00173934
			public object GetValue(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				object result = null;
				try
				{
					result = this.props[boundColumnIndex].GetValue(this.currencyManager[rowIndex]);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				return result;
			}

			// Token: 0x060058A9 RID: 22697 RVA: 0x001757B0 File Offset: 0x001739B0
			public void MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				int num = (this.owner.CurrentCellAddress.X == -1) ? this.owner.FirstDisplayedColumnIndex : this.owner.CurrentCellAddress.X;
				if (num == -1)
				{
					DataGridViewColumn firstColumn = this.owner.Columns.GetFirstColumn(DataGridViewElementStates.None);
					firstColumn.Visible = true;
					num = firstColumn.Index;
				}
				int position = this.currencyManager.Position;
				if (position == -1)
				{
					if (!this.owner.SetCurrentCellAddressCore(-1, -1, false, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
				else if (position < this.owner.Rows.Count)
				{
					if ((this.owner.Rows.GetRowState(position) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
					{
						this.owner.Rows[position].Visible = true;
					}
					if (position == this.owner.CurrentCellAddress.Y && num == this.owner.CurrentCellAddress.X)
					{
						return;
					}
					if ((scrollIntoView && !this.owner.ScrollIntoView(num, position, true)) || (num < this.owner.Columns.Count && position < this.owner.Rows.Count && !this.owner.SetAndSelectCurrentCellAddress(num, position, true, false, false, clearSelection, false)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
			}

			// Token: 0x060058AA RID: 22698 RVA: 0x00175930 File Offset: 0x00173B30
			public void CancelRowEdit(bool restoreRow, bool addNewFinished)
			{
				this.dataConnectionState[64] = true;
				this.dataConnectionState[128] = restoreRow;
				try
				{
					object obj = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						obj = this.currencyManager.Current;
					}
					this.currencyManager.CancelCurrentEdit();
					IEditableObject editableObject = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						editableObject = (this.currencyManager.Current as IEditableObject);
					}
					if (editableObject != null && obj == editableObject)
					{
						editableObject.BeginEdit();
					}
				}
				finally
				{
					this.dataConnectionState[64] = false;
				}
				if (addNewFinished)
				{
					this.dataConnectionState[4] = true;
				}
			}

			// Token: 0x060058AB RID: 22699 RVA: 0x00175A1C File Offset: 0x00173C1C
			internal void OnNewRowNeeded()
			{
				this.dataConnectionState[8] = true;
				try
				{
					this.AddNew();
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x060058AC RID: 22700 RVA: 0x00175A5C File Offset: 0x00173C5C
			internal void OnRowEnter(DataGridViewCellEventArgs e)
			{
				if (this.dataConnectionState[2])
				{
					return;
				}
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				this.dataConnectionState[8] = true;
				try
				{
					if (e.RowIndex != this.owner.NewRowIndex && !this.dataConnectionState[16] && this.currencyManager.Position != e.RowIndex)
					{
						try
						{
							this.currencyManager.Position = e.RowIndex;
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							DataGridViewCellCancelEventArgs e2 = new DataGridViewCellCancelEventArgs(e.ColumnIndex, e.RowIndex);
							this.ProcessException(ex, e2, false);
						}
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
						}
					}
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x060058AD RID: 22701 RVA: 0x00175B4C File Offset: 0x00173D4C
			internal void OnRowValidating(DataGridViewCellCancelEventArgs e)
			{
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				if (!this.dataConnectionState[4] && !this.owner.IsCurrentRowDirty)
				{
					if (this.dataConnectionState[64])
					{
						goto IL_B0;
					}
					this.dataConnectionState[8] = true;
					try
					{
						this.CancelRowEdit(false, false);
						goto IL_B0;
					}
					finally
					{
						this.dataConnectionState[8] = false;
					}
				}
				if (this.owner.IsCurrentRowDirty)
				{
					this.dataConnectionState[256] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					catch (Exception ex)
					{
						if (ClientUtils.IsCriticalException(ex))
						{
							throw;
						}
						this.ProcessException(ex, e, true);
					}
					finally
					{
						this.dataConnectionState[256] = false;
					}
				}
				IL_B0:
				this.dataConnectionState[4] = true;
			}

			// Token: 0x060058AE RID: 22702 RVA: 0x00175C40 File Offset: 0x00173E40
			public void ProcessException(Exception exception, DataGridViewCellCancelEventArgs e, bool beginEdit)
			{
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(exception, e.ColumnIndex, e.RowIndex, DataGridViewDataErrorContexts.Commit);
				this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					e.Cancel = true;
					if (beginEdit)
					{
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
							return;
						}
					}
				}
				else
				{
					this.CancelRowEdit(false, false);
				}
			}

			// Token: 0x060058AF RID: 22703 RVA: 0x00175CB8 File Offset: 0x00173EB8
			public bool PushValue(int boundColumnIndex, int columnIndex, int rowIndex, object value)
			{
				try
				{
					if (value != null)
					{
						Type type = value.GetType();
						Type valueType = this.owner.Columns[columnIndex].ValueType;
						if (!valueType.IsAssignableFrom(type))
						{
							TypeConverter typeConverter = this.BoundColumnConverter(boundColumnIndex);
							if (typeConverter != null && typeConverter.CanConvertFrom(type))
							{
								value = typeConverter.ConvertFrom(value);
							}
							else
							{
								TypeConverter cachedTypeConverter = this.owner.GetCachedTypeConverter(type);
								if (cachedTypeConverter != null && cachedTypeConverter.CanConvertTo(valueType))
								{
									value = cachedTypeConverter.ConvertTo(value, valueType);
								}
							}
						}
					}
					this.props[boundColumnIndex].SetValue(this.currencyManager[rowIndex], value);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex))
					{
						throw;
					}
					DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
					this.ProcessException(ex, dataGridViewCellCancelEventArgs, false);
					return !dataGridViewCellCancelEventArgs.Cancel;
				}
				return true;
			}

			// Token: 0x060058B0 RID: 22704 RVA: 0x00175D9C File Offset: 0x00173F9C
			public bool ShouldChangeDataMember(object newDataSource)
			{
				if (!this.owner.Created)
				{
					return false;
				}
				if (this.owner.BindingContext == null)
				{
					return false;
				}
				if (newDataSource == null)
				{
					return true;
				}
				CurrencyManager currencyManager = this.owner.BindingContext[newDataSource] as CurrencyManager;
				if (currencyManager == null)
				{
					return false;
				}
				PropertyDescriptorCollection itemProperties = currencyManager.GetItemProperties();
				return this.dataMember.Length == 0 || itemProperties[this.dataMember] == null;
			}

			// Token: 0x060058B1 RID: 22705 RVA: 0x00175E0D File Offset: 0x0017400D
			public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
			{
				((IBindingList)this.List).ApplySort(this.props[dataGridViewColumn.BoundColumnIndex], direction);
			}

			// Token: 0x060058B2 RID: 22706 RVA: 0x00175E34 File Offset: 0x00174034
			private void UnWireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged -= this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged -= this.currencyManager_ListChanged;
					this.dataConnectionState[32] = false;
				}
			}

			// Token: 0x060058B3 RID: 22707 RVA: 0x00175E88 File Offset: 0x00174088
			private void WireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged += this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged += this.currencyManager_ListChanged;
					this.dataConnectionState[32] = true;
				}
			}

			// Token: 0x040038DB RID: 14555
			private DataGridView owner;

			// Token: 0x040038DC RID: 14556
			private CurrencyManager currencyManager;

			// Token: 0x040038DD RID: 14557
			private object dataSource;

			// Token: 0x040038DE RID: 14558
			private string dataMember = string.Empty;

			// Token: 0x040038DF RID: 14559
			private PropertyDescriptorCollection props;

			// Token: 0x040038E0 RID: 14560
			private int lastListCount = -1;

			// Token: 0x040038E1 RID: 14561
			private BitVector32 dataConnectionState;

			// Token: 0x040038E2 RID: 14562
			private const int DATACONNECTIONSTATE_dataConnection_inSetDataConnection = 1;

			// Token: 0x040038E3 RID: 14563
			private const int DATACONNECTIONSTATE_processingMetaDataChanges = 2;

			// Token: 0x040038E4 RID: 14564
			private const int DATACONNECTIONSTATE_finishedAddNew = 4;

			// Token: 0x040038E5 RID: 14565
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheDataGridViewControl = 8;

			// Token: 0x040038E6 RID: 14566
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheCurrencyManager = 16;

			// Token: 0x040038E7 RID: 14567
			private const int DATACONNECTIONSTATE_interestedInRowEvents = 32;

			// Token: 0x040038E8 RID: 14568
			private const int DATACONNECTIONSTATE_cancellingRowEdit = 64;

			// Token: 0x040038E9 RID: 14569
			private const int DATACONNECTIONSTATE_restoreRow = 128;

			// Token: 0x040038EA RID: 14570
			private const int DATACONNECTIONSTATE_rowValidatingInAddNew = 256;

			// Token: 0x040038EB RID: 14571
			private const int DATACONNECTIONSTATE_inAddNew = 512;

			// Token: 0x040038EC RID: 14572
			private const int DATACONNECTIONSTATE_listWasReset = 1024;

			// Token: 0x040038ED RID: 14573
			private const int DATACONNECTIONSTATE_positionChangingInCurrencyManager = 2048;

			// Token: 0x040038EE RID: 14574
			private const int DATACONNECTIONSTATE_inDeleteOperation = 4096;

			// Token: 0x040038EF RID: 14575
			private const int DATACONNECTIONSTATE_didNotDeleteRowFromDataGridView = 8192;

			// Token: 0x040038F0 RID: 14576
			private const int DATACONNECTIONSTATE_itemAddedInDeleteOperation = 16384;

			// Token: 0x040038F1 RID: 14577
			private const int DATACONNECTIONSTATE_inEndCurrentEdit = 32768;

			// Token: 0x040038F2 RID: 14578
			private const int DATACONNECTIONSTATE_cachedAllowUserToAddRowsInternal = 65536;

			// Token: 0x040038F3 RID: 14579
			private const int DATACONNECTIONSTATE_processingListChangedEvent = 131072;

			// Token: 0x040038F4 RID: 14580
			private const int DATACONNECTIONSTATE_dataSourceInitializedHookedUp = 262144;
		}

		// Token: 0x020005A3 RID: 1443
		internal class DisplayedBandsData
		{
			// Token: 0x060058B4 RID: 22708 RVA: 0x00175EDC File Offset: 0x001740DC
			public DisplayedBandsData()
			{
				this.firstDisplayedFrozenRow = -1;
				this.firstDisplayedFrozenCol = -1;
				this.firstDisplayedScrollingRow = -1;
				this.firstDisplayedScrollingCol = -1;
				this.lastTotallyDisplayedScrollingCol = -1;
				this.lastDisplayedScrollingRow = -1;
				this.lastDisplayedFrozenCol = -1;
				this.lastDisplayedFrozenRow = -1;
				this.oldFirstDisplayedScrollingRow = -1;
				this.oldFirstDisplayedScrollingCol = -1;
			}

			// Token: 0x1700154D RID: 5453
			// (get) Token: 0x060058B5 RID: 22709 RVA: 0x00175F35 File Offset: 0x00174135
			public bool ColumnInsertionOccurred
			{
				get
				{
					return this.columnInsertionOccurred;
				}
			}

			// Token: 0x1700154E RID: 5454
			// (get) Token: 0x060058B6 RID: 22710 RVA: 0x00175F3D File Offset: 0x0017413D
			// (set) Token: 0x060058B7 RID: 22711 RVA: 0x00175F45 File Offset: 0x00174145
			public bool Dirty
			{
				get
				{
					return this.dirty;
				}
				set
				{
					this.dirty = value;
				}
			}

			// Token: 0x1700154F RID: 5455
			// (set) Token: 0x060058B8 RID: 22712 RVA: 0x00175F4E File Offset: 0x0017414E
			public int FirstDisplayedFrozenCol
			{
				set
				{
					if (value != this.firstDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x17001550 RID: 5456
			// (set) Token: 0x060058B9 RID: 22713 RVA: 0x00175F66 File Offset: 0x00174166
			public int FirstDisplayedFrozenRow
			{
				set
				{
					if (value != this.firstDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x17001551 RID: 5457
			// (get) Token: 0x060058BA RID: 22714 RVA: 0x00175F7E File Offset: 0x0017417E
			// (set) Token: 0x060058BB RID: 22715 RVA: 0x00175F86 File Offset: 0x00174186
			public int FirstDisplayedScrollingCol
			{
				get
				{
					return this.firstDisplayedScrollingCol;
				}
				set
				{
					if (value != this.firstDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x17001552 RID: 5458
			// (get) Token: 0x060058BC RID: 22716 RVA: 0x00175F9E File Offset: 0x0017419E
			// (set) Token: 0x060058BD RID: 22717 RVA: 0x00175FA6 File Offset: 0x001741A6
			public int FirstDisplayedScrollingRow
			{
				get
				{
					return this.firstDisplayedScrollingRow;
				}
				set
				{
					if (value != this.firstDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x17001553 RID: 5459
			// (set) Token: 0x060058BE RID: 22718 RVA: 0x00175FBE File Offset: 0x001741BE
			public int LastDisplayedFrozenCol
			{
				set
				{
					if (value != this.lastDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x17001554 RID: 5460
			// (set) Token: 0x060058BF RID: 22719 RVA: 0x00175FD6 File Offset: 0x001741D6
			public int LastDisplayedFrozenRow
			{
				set
				{
					if (value != this.lastDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x17001555 RID: 5461
			// (set) Token: 0x060058C0 RID: 22720 RVA: 0x00175FEE File Offset: 0x001741EE
			public int LastDisplayedScrollingRow
			{
				set
				{
					if (value != this.lastDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x17001556 RID: 5462
			// (get) Token: 0x060058C1 RID: 22721 RVA: 0x00176006 File Offset: 0x00174206
			// (set) Token: 0x060058C2 RID: 22722 RVA: 0x0017600E File Offset: 0x0017420E
			public int LastTotallyDisplayedScrollingCol
			{
				get
				{
					return this.lastTotallyDisplayedScrollingCol;
				}
				set
				{
					if (value != this.lastTotallyDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.lastTotallyDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x17001557 RID: 5463
			// (get) Token: 0x060058C3 RID: 22723 RVA: 0x00176026 File Offset: 0x00174226
			// (set) Token: 0x060058C4 RID: 22724 RVA: 0x0017602E File Offset: 0x0017422E
			public int NumDisplayedFrozenCols
			{
				get
				{
					return this.numDisplayedFrozenCols;
				}
				set
				{
					if (value != this.numDisplayedFrozenCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenCols = value;
					}
				}
			}

			// Token: 0x17001558 RID: 5464
			// (get) Token: 0x060058C5 RID: 22725 RVA: 0x00176046 File Offset: 0x00174246
			// (set) Token: 0x060058C6 RID: 22726 RVA: 0x0017604E File Offset: 0x0017424E
			public int NumDisplayedFrozenRows
			{
				get
				{
					return this.numDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x17001559 RID: 5465
			// (get) Token: 0x060058C7 RID: 22727 RVA: 0x00176066 File Offset: 0x00174266
			// (set) Token: 0x060058C8 RID: 22728 RVA: 0x0017606E File Offset: 0x0017426E
			public int NumDisplayedScrollingRows
			{
				get
				{
					return this.numDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x1700155A RID: 5466
			// (get) Token: 0x060058C9 RID: 22729 RVA: 0x00176086 File Offset: 0x00174286
			// (set) Token: 0x060058CA RID: 22730 RVA: 0x0017608E File Offset: 0x0017428E
			public int NumDisplayedScrollingCols
			{
				get
				{
					return this.numDisplayedScrollingCols;
				}
				set
				{
					if (value != this.numDisplayedScrollingCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingCols = value;
					}
				}
			}

			// Token: 0x1700155B RID: 5467
			// (get) Token: 0x060058CB RID: 22731 RVA: 0x001760A6 File Offset: 0x001742A6
			// (set) Token: 0x060058CC RID: 22732 RVA: 0x001760AE File Offset: 0x001742AE
			public int NumTotallyDisplayedFrozenRows
			{
				get
				{
					return this.numTotallyDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x1700155C RID: 5468
			// (get) Token: 0x060058CD RID: 22733 RVA: 0x001760C6 File Offset: 0x001742C6
			// (set) Token: 0x060058CE RID: 22734 RVA: 0x001760CE File Offset: 0x001742CE
			public int NumTotallyDisplayedScrollingRows
			{
				get
				{
					return this.numTotallyDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x1700155D RID: 5469
			// (get) Token: 0x060058CF RID: 22735 RVA: 0x001760E6 File Offset: 0x001742E6
			public int OldFirstDisplayedScrollingCol
			{
				get
				{
					return this.oldFirstDisplayedScrollingCol;
				}
			}

			// Token: 0x1700155E RID: 5470
			// (get) Token: 0x060058D0 RID: 22736 RVA: 0x001760EE File Offset: 0x001742EE
			public int OldFirstDisplayedScrollingRow
			{
				get
				{
					return this.oldFirstDisplayedScrollingRow;
				}
			}

			// Token: 0x1700155F RID: 5471
			// (get) Token: 0x060058D1 RID: 22737 RVA: 0x001760F6 File Offset: 0x001742F6
			public int OldNumDisplayedFrozenRows
			{
				get
				{
					return this.oldNumDisplayedFrozenRows;
				}
			}

			// Token: 0x17001560 RID: 5472
			// (get) Token: 0x060058D2 RID: 22738 RVA: 0x001760FE File Offset: 0x001742FE
			public int OldNumDisplayedScrollingRows
			{
				get
				{
					return this.oldNumDisplayedScrollingRows;
				}
			}

			// Token: 0x17001561 RID: 5473
			// (get) Token: 0x060058D3 RID: 22739 RVA: 0x00176106 File Offset: 0x00174306
			public bool RowInsertionOccurred
			{
				get
				{
					return this.rowInsertionOccurred;
				}
			}

			// Token: 0x060058D4 RID: 22740 RVA: 0x0017610E File Offset: 0x0017430E
			public void EnsureDirtyState()
			{
				if (!this.dirty)
				{
					this.dirty = true;
					this.rowInsertionOccurred = false;
					this.columnInsertionOccurred = false;
					this.SetOldValues();
				}
			}

			// Token: 0x060058D5 RID: 22741 RVA: 0x00176133 File Offset: 0x00174333
			public void CorrectColumnIndexAfterInsertion(int columnIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingCol != -1 && columnIndex <= this.oldFirstDisplayedScrollingCol)
				{
					this.oldFirstDisplayedScrollingCol += insertionCount;
				}
				this.columnInsertionOccurred = true;
			}

			// Token: 0x060058D6 RID: 22742 RVA: 0x00176162 File Offset: 0x00174362
			public void CorrectRowIndexAfterDeletion(int rowIndex)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow--;
				}
			}

			// Token: 0x060058D7 RID: 22743 RVA: 0x0017618C File Offset: 0x0017438C
			public void CorrectRowIndexAfterInsertion(int rowIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow += insertionCount;
				}
				this.rowInsertionOccurred = true;
				this.oldNumDisplayedScrollingRows += insertionCount;
				this.oldNumDisplayedFrozenRows += insertionCount;
			}

			// Token: 0x060058D8 RID: 22744 RVA: 0x001761E2 File Offset: 0x001743E2
			private void SetOldValues()
			{
				this.oldFirstDisplayedScrollingRow = this.firstDisplayedScrollingRow;
				this.oldFirstDisplayedScrollingCol = this.firstDisplayedScrollingCol;
				this.oldNumDisplayedFrozenRows = this.numDisplayedFrozenRows;
				this.oldNumDisplayedScrollingRows = this.numDisplayedScrollingRows;
			}

			// Token: 0x040038F5 RID: 14581
			private bool dirty;

			// Token: 0x040038F6 RID: 14582
			private int firstDisplayedFrozenRow;

			// Token: 0x040038F7 RID: 14583
			private int firstDisplayedFrozenCol;

			// Token: 0x040038F8 RID: 14584
			private int numDisplayedFrozenRows;

			// Token: 0x040038F9 RID: 14585
			private int numDisplayedFrozenCols;

			// Token: 0x040038FA RID: 14586
			private int numTotallyDisplayedFrozenRows;

			// Token: 0x040038FB RID: 14587
			private int firstDisplayedScrollingRow;

			// Token: 0x040038FC RID: 14588
			private int numDisplayedScrollingRows;

			// Token: 0x040038FD RID: 14589
			private int numTotallyDisplayedScrollingRows;

			// Token: 0x040038FE RID: 14590
			private int firstDisplayedScrollingCol;

			// Token: 0x040038FF RID: 14591
			private int numDisplayedScrollingCols;

			// Token: 0x04003900 RID: 14592
			private int lastTotallyDisplayedScrollingCol;

			// Token: 0x04003901 RID: 14593
			private int lastDisplayedScrollingRow;

			// Token: 0x04003902 RID: 14594
			private int lastDisplayedFrozenCol;

			// Token: 0x04003903 RID: 14595
			private int lastDisplayedFrozenRow;

			// Token: 0x04003904 RID: 14596
			private int oldFirstDisplayedScrollingRow;

			// Token: 0x04003905 RID: 14597
			private int oldFirstDisplayedScrollingCol;

			// Token: 0x04003906 RID: 14598
			private int oldNumDisplayedFrozenRows;

			// Token: 0x04003907 RID: 14599
			private int oldNumDisplayedScrollingRows;

			// Token: 0x04003908 RID: 14600
			private bool rowInsertionOccurred;

			// Token: 0x04003909 RID: 14601
			private bool columnInsertionOccurred;
		}

		/// <summary>Contains information, such as the row and column indexes, about a specific coordinate pair in the <see cref="T:System.Windows.Forms.DataGridView" /> control. This class cannot be inherited. </summary>
		// Token: 0x020005A4 RID: 1444
		public sealed class HitTestInfo
		{
			// Token: 0x060058D9 RID: 22745 RVA: 0x00176214 File Offset: 0x00174414
			internal HitTestInfo()
			{
				this.type = DataGridViewHitTestType.None;
				this.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.None;
				this.row = (this.col = -1);
				this.rowStart = (this.colStart = -1);
				this.adjacentRow = (this.adjacentCol = -1);
			}

			/// <summary>Gets the index of the column that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The index of the column in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001562 RID: 5474
			// (get) Token: 0x060058DA RID: 22746 RVA: 0x00176265 File Offset: 0x00174465
			public int ColumnIndex
			{
				get
				{
					return this.col;
				}
			}

			/// <summary>Gets the index of the row that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The index of the row in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001563 RID: 5475
			// (get) Token: 0x060058DB RID: 22747 RVA: 0x0017626D File Offset: 0x0017446D
			public int RowIndex
			{
				get
				{
					return this.row;
				}
			}

			/// <summary>Gets the x-coordinate of the beginning of the column that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The x-coordinate of the column in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001564 RID: 5476
			// (get) Token: 0x060058DC RID: 22748 RVA: 0x00176275 File Offset: 0x00174475
			public int ColumnX
			{
				get
				{
					return this.colStart;
				}
			}

			/// <summary>Gets the y-coordinate of the top of the row that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The y-coordinate of the row in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001565 RID: 5477
			// (get) Token: 0x060058DD RID: 22749 RVA: 0x0017627D File Offset: 0x0017447D
			public int RowY
			{
				get
				{
					return this.rowStart;
				}
			}

			/// <summary>Gets the <see cref="T:System.Windows.Forms.DataGridViewHitTestType" /> that indicates which part of the <see cref="T:System.Windows.Forms.DataGridView" /> the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> belong to.</summary>
			/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewHitTestType" /> value that indicates the control part at the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001566 RID: 5478
			// (get) Token: 0x060058DE RID: 22750 RVA: 0x00176285 File Offset: 0x00174485
			public DataGridViewHitTestType Type
			{
				get
				{
					return this.type;
				}
			}

			/// <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />. </summary>
			/// <param name="value">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</param>
			/// <returns>
			///     <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> in which the values of the <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.Type" />, <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.RowIndex" />, and <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.ColumnIndex" /> properties are the same as the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x060058DF RID: 22751 RVA: 0x00176290 File Offset: 0x00174490
			public override bool Equals(object value)
			{
				DataGridView.HitTestInfo hitTestInfo = value as DataGridView.HitTestInfo;
				return hitTestInfo != null && (this.type == hitTestInfo.type && this.row == hitTestInfo.row) && this.col == hitTestInfo.col;
			}

			/// <summary>Serves as a hash function for a particular type.</summary>
			/// <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
			// Token: 0x060058E0 RID: 22752 RVA: 0x001762D5 File Offset: 0x001744D5
			public override int GetHashCode()
			{
				return WindowsFormsUtils.GetCombinedHashCodes(new int[]
				{
					(int)this.type,
					this.row,
					this.col
				});
			}

			/// <summary>Returns a string that represents a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>A string that represents a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x060058E1 RID: 22753 RVA: 0x00176300 File Offset: 0x00174500
			public override string ToString()
			{
				return string.Concat(new string[]
				{
					"{ Type:",
					this.type.ToString(),
					", Column:",
					this.col.ToString(CultureInfo.CurrentCulture),
					", Row:",
					this.row.ToString(CultureInfo.CurrentCulture),
					" }"
				});
			}

			// Token: 0x0400390A RID: 14602
			internal DataGridViewHitTestType type;

			// Token: 0x0400390B RID: 14603
			internal DataGridView.DataGridViewHitTestTypeInternal typeInternal;

			// Token: 0x0400390C RID: 14604
			internal int row;

			// Token: 0x0400390D RID: 14605
			internal int col;

			// Token: 0x0400390E RID: 14606
			internal int adjacentRow;

			// Token: 0x0400390F RID: 14607
			internal int adjacentCol;

			// Token: 0x04003910 RID: 14608
			internal int mouseBarOffset;

			// Token: 0x04003911 RID: 14609
			internal int rowStart;

			// Token: 0x04003912 RID: 14610
			internal int colStart;

			/// <summary>Specifies that the point is not on a cell or cell header. This field is read-only.</summary>
			// Token: 0x04003913 RID: 14611
			public static readonly DataGridView.HitTestInfo Nowhere = new DataGridView.HitTestInfo();
		}

		// Token: 0x020005A5 RID: 1445
		internal class LayoutData
		{
			// Token: 0x060058E3 RID: 22755 RVA: 0x00176380 File Offset: 0x00174580
			public LayoutData()
			{
			}

			// Token: 0x060058E4 RID: 22756 RVA: 0x001763E8 File Offset: 0x001745E8
			public LayoutData(DataGridView.LayoutData src)
			{
				this.ClientRectangle = src.ClientRectangle;
				this.TopLeftHeader = src.TopLeftHeader;
				this.ColumnHeaders = src.ColumnHeaders;
				this.RowHeaders = src.RowHeaders;
				this.Inside = src.Inside;
				this.Data = src.Data;
				this.ResizeBoxRect = src.ResizeBoxRect;
				this.ColumnHeadersVisible = src.ColumnHeadersVisible;
				this.RowHeadersVisible = src.RowHeadersVisible;
			}

			// Token: 0x060058E5 RID: 22757 RVA: 0x001764BC File Offset: 0x001746BC
			public override string ToString()
			{
				StringBuilder stringBuilder = new StringBuilder(100);
				stringBuilder.Append(base.ToString());
				stringBuilder.Append(" { \n");
				stringBuilder.Append("ClientRectangle = ");
				stringBuilder.Append(this.ClientRectangle.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Inside = ");
				stringBuilder.Append(this.Inside.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("TopLeftHeader = ");
				stringBuilder.Append(this.TopLeftHeader.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeaders = ");
				stringBuilder.Append(this.ColumnHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeaders = ");
				stringBuilder.Append(this.RowHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Data = ");
				stringBuilder.Append(this.Data.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ResizeBoxRect = ");
				stringBuilder.Append(this.ResizeBoxRect.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeadersVisible = ");
				stringBuilder.Append(this.ColumnHeadersVisible.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeadersVisible = ");
				stringBuilder.Append(this.RowHeadersVisible.ToString());
				stringBuilder.Append(" }");
				return stringBuilder.ToString();
			}

			// Token: 0x04003914 RID: 14612
			internal bool dirty = true;

			// Token: 0x04003915 RID: 14613
			public Rectangle ClientRectangle = Rectangle.Empty;

			// Token: 0x04003916 RID: 14614
			public Rectangle Inside = Rectangle.Empty;

			// Token: 0x04003917 RID: 14615
			public Rectangle RowHeaders = Rectangle.Empty;

			// Token: 0x04003918 RID: 14616
			public Rectangle ColumnHeaders = Rectangle.Empty;

			// Token: 0x04003919 RID: 14617
			public Rectangle TopLeftHeader = Rectangle.Empty;

			// Token: 0x0400391A RID: 14618
			public Rectangle Data = Rectangle.Empty;

			// Token: 0x0400391B RID: 14619
			public Rectangle ResizeBoxRect = Rectangle.Empty;

			// Token: 0x0400391C RID: 14620
			public bool ColumnHeadersVisible;

			// Token: 0x0400391D RID: 14621
			public bool RowHeadersVisible;
		}

		// Token: 0x020005A6 RID: 1446
		private class DataGridViewSelectedCellsAccessibleObject : AccessibleObject
		{
			// Token: 0x060058E6 RID: 22758 RVA: 0x0017667C File Offset: 0x0017487C
			public DataGridViewSelectedCellsAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			// Token: 0x17001567 RID: 5479
			// (get) Token: 0x060058E7 RID: 22759 RVA: 0x0017668B File Offset: 0x0017488B
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccSelectedCellsName");
				}
			}

			// Token: 0x17001568 RID: 5480
			// (get) Token: 0x060058E8 RID: 22760 RVA: 0x00176697 File Offset: 0x00174897
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x17001569 RID: 5481
			// (get) Token: 0x060058E9 RID: 22761 RVA: 0x001766A4 File Offset: 0x001748A4
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Grouping;
				}
			}

			// Token: 0x1700156A RID: 5482
			// (get) Token: 0x060058EA RID: 22762 RVA: 0x001766A8 File Offset: 0x001748A8
			public override AccessibleStates State
			{
				get
				{
					return AccessibleStates.Selected | AccessibleStates.Selectable;
				}
			}

			// Token: 0x1700156B RID: 5483
			// (get) Token: 0x060058EB RID: 22763 RVA: 0x0000E334 File Offset: 0x0000C534
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			// Token: 0x060058EC RID: 22764 RVA: 0x001766AF File Offset: 0x001748AF
			public override AccessibleObject GetChild(int index)
			{
				if (index >= 0 && index < this.owner.GetCellCount(DataGridViewElementStates.Selected))
				{
					return this.owner.SelectedCell(index).AccessibilityObject;
				}
				return null;
			}

			// Token: 0x060058ED RID: 22765 RVA: 0x001766D8 File Offset: 0x001748D8
			public override int GetChildCount()
			{
				return this.owner.GetCellCount(DataGridViewElementStates.Selected);
			}

			// Token: 0x060058EE RID: 22766 RVA: 0x000069BD File Offset: 0x00004BBD
			public override AccessibleObject GetSelected()
			{
				return this;
			}

			// Token: 0x060058EF RID: 22767 RVA: 0x001766E7 File Offset: 0x001748E7
			public override AccessibleObject GetFocused()
			{
				if (this.owner.CurrentCell != null && this.owner.CurrentCell.Selected)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x060058F0 RID: 22768 RVA: 0x0017671C File Offset: 0x0017491C
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (navigationDirection != AccessibleNavigation.FirstChild)
				{
					if (navigationDirection != AccessibleNavigation.LastChild)
					{
						return null;
					}
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(this.owner.GetCellCount(DataGridViewElementStates.Selected) - 1).AccessibilityObject;
					}
					return null;
				}
				else
				{
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(0).AccessibilityObject;
					}
					return null;
				}
			}

			// Token: 0x0400391E RID: 14622
			private DataGridView owner;
		}

		// Token: 0x020005A7 RID: 1447
		private class DataGridViewToolTip
		{
			// Token: 0x060058F1 RID: 22769 RVA: 0x0017678A File Offset: 0x0017498A
			public DataGridViewToolTip(DataGridView dataGridView)
			{
				this.dataGridView = dataGridView;
			}

			// Token: 0x1700156C RID: 5484
			// (get) Token: 0x060058F2 RID: 22770 RVA: 0x00176799 File Offset: 0x00174999
			public bool Activated
			{
				get
				{
					return this.toolTipActivated;
				}
			}

			// Token: 0x1700156D RID: 5485
			// (get) Token: 0x060058F3 RID: 22771 RVA: 0x001767A1 File Offset: 0x001749A1
			public ToolTip ToolTip
			{
				get
				{
					return this.toolTip;
				}
			}

			// Token: 0x060058F4 RID: 22772 RVA: 0x001767AC File Offset: 0x001749AC
			public void Activate(bool activate)
			{
				if (this.dataGridView.DesignMode)
				{
					return;
				}
				if (activate && this.toolTip == null)
				{
					this.toolTip = new ToolTip();
					this.toolTip.ShowAlways = true;
					this.toolTip.InitialDelay = 0;
					this.toolTip.UseFading = false;
					this.toolTip.UseAnimation = false;
					this.toolTip.AutoPopDelay = 0;
				}
				if (this.dataGridView.IsRestricted)
				{
					IntSecurity.AllWindows.Assert();
				}
				try
				{
					if (activate)
					{
						this.toolTip.Active = true;
						this.toolTip.Show(this.dataGridView.ToolTipPrivate, this.dataGridView);
					}
					else if (this.toolTip != null)
					{
						this.toolTip.Hide(this.dataGridView);
						this.toolTip.Active = false;
					}
				}
				finally
				{
					if (this.dataGridView.IsRestricted)
					{
						CodeAccessPermission.RevertAssert();
					}
				}
				this.toolTipActivated = activate;
			}

			// Token: 0x060058F5 RID: 22773 RVA: 0x001768B0 File Offset: 0x00174AB0
			public void Dispose()
			{
				if (this.toolTip != null)
				{
					this.toolTip.Dispose();
					this.toolTip = null;
				}
			}

			// Token: 0x0400391F RID: 14623
			private DataGridView dataGridView;

			// Token: 0x04003920 RID: 14624
			private ToolTip toolTip;

			// Token: 0x04003921 RID: 14625
			private bool toolTipActivated;
		}

		/// <summary>Provides information about a row of <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> objects to accessibility client applications.</summary>
		// Token: 0x020005A8 RID: 1448
		[ComVisible(true)]
		protected class DataGridViewTopRowAccessibleObject : AccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /> class without setting the <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property. </summary>
			// Token: 0x060058F6 RID: 22774 RVA: 0x001724E2 File Offset: 0x001706E2
			public DataGridViewTopRowAccessibleObject()
			{
			}

			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /> class, setting the <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property to the specified value.</summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /></param>
			// Token: 0x060058F7 RID: 22775 RVA: 0x001768CC File Offset: 0x00174ACC
			public DataGridViewTopRowAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets the location and size of the accessible object. </summary>
			/// <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the accessible object.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x1700156E RID: 5486
			// (get) Token: 0x060058F8 RID: 22776 RVA: 0x001768DC File Offset: 0x00174ADC
			public override Rectangle Bounds
			{
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					if (this.owner.ColumnHeadersVisible)
					{
						Rectangle r = Rectangle.Union(this.owner.layout.ColumnHeaders, this.owner.layout.TopLeftHeader);
						return this.owner.RectangleToScreen(r);
					}
					return Rectangle.Empty;
				}
			}

			/// <summary>Gets the name of the accessible object.</summary>
			/// <returns>The string "Top Row".</returns>
			// Token: 0x1700156F RID: 5487
			// (get) Token: 0x060058F9 RID: 22777 RVA: 0x00176946 File Offset: 0x00174B46
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccTopRow");
				}
			}

			/// <summary>Gets the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the row of column headers.</summary>
			/// <returns>The <see cref="T:System.Windows.Forms.DataGridView" /> that contains the row of column headers.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property has already been set.</exception>
			// Token: 0x17001570 RID: 5488
			// (get) Token: 0x060058FA RID: 22778 RVA: 0x00176952 File Offset: 0x00174B52
			// (set) Token: 0x060058FB RID: 22779 RVA: 0x0017695A File Offset: 0x00174B5A
			public DataGridView Owner
			{
				get
				{
					return this.owner;
				}
				set
				{
					if (this.owner != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerAlreadySet"));
					}
					this.owner = value;
				}
			}

			/// <summary>Gets the parent of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" />.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> that represents the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x17001571 RID: 5489
			// (get) Token: 0x060058FC RID: 22780 RVA: 0x0017697B File Offset: 0x00174B7B
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					return this.owner.AccessibilityObject;
				}
			}

			/// <summary>Gets the role of the accessible object.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Row" /> value.</returns>
			// Token: 0x17001572 RID: 5490
			// (get) Token: 0x060058FD RID: 22781 RVA: 0x00173002 File Offset: 0x00171202
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Row;
				}
			}

			// Token: 0x17001573 RID: 5491
			// (get) Token: 0x060058FE RID: 22782 RVA: 0x001769A0 File Offset: 0x00174BA0
			internal override int[] RuntimeId
			{
				get
				{
					if (AccessibilityImprovements.Level3 && this.runtimeId == null)
					{
						this.runtimeId = new int[3];
						this.runtimeId[0] = 42;
						this.runtimeId[1] = this.Parent.GetHashCode();
						this.runtimeId[2] = this.GetHashCode();
					}
					return this.runtimeId;
				}
			}

			/// <summary>Gets the value of an accessible object.</summary>
			/// <returns>The string "Top Row".</returns>
			// Token: 0x17001574 RID: 5492
			// (get) Token: 0x060058FF RID: 22783 RVA: 0x0000E334 File Offset: 0x0000C534
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			/// <summary>Returns the child accessible object corresponding to the specified index.</summary>
			/// <param name="index">The zero-based index of the accessible child.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the column header at the specified index.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///         <paramref name="index" /> is less than 0.</exception>
			// Token: 0x06005900 RID: 22784 RVA: 0x001769FC File Offset: 0x00174BFC
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				if (index < 0)
				{
					throw new ArgumentOutOfRangeException("index");
				}
				if (index == 0 && this.owner.RowHeadersVisible)
				{
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				}
				if (this.owner.RowHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible))
				{
					int index2 = this.owner.Columns.ActualDisplayIndexToColumnIndex(index, DataGridViewElementStates.Visible);
					return this.owner.Columns[index2].HeaderCell.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns the number of children belonging to the accessible object.</summary>
			/// <returns>The number of child accessible objects belonging to the accessible object.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x06005901 RID: 22785 RVA: 0x00176AAC File Offset: 0x00174CAC
			public override int GetChildCount()
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				int num = this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				if (this.owner.RowHeadersVisible)
				{
					num++;
				}
				return num;
			}

			/// <summary>Navigates to another accessible object.</summary>
			/// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the object at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x06005902 RID: 22786 RVA: 0x00176AF8 File Offset: 0x00174CF8
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				switch (navigationDirection)
				{
				case AccessibleNavigation.Down:
				case AccessibleNavigation.Next:
					if (this.owner.AccessibilityObject.GetChildCount() > 1)
					{
						return this.owner.AccessibilityObject.GetChild(1);
					}
					return null;
				case AccessibleNavigation.FirstChild:
					return this.GetChild(0);
				case AccessibleNavigation.LastChild:
					return this.GetChild(this.GetChildCount() - 1);
				}
				return null;
			}

			// Token: 0x17001575 RID: 5493
			// (get) Token: 0x06005903 RID: 22787 RVA: 0x0000E209 File Offset: 0x0000C409
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.Bounds;
				}
			}

			// Token: 0x17001576 RID: 5494
			// (get) Token: 0x06005904 RID: 22788 RVA: 0x00176B82 File Offset: 0x00174D82
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x06005905 RID: 22789 RVA: 0x00176B90 File Offset: 0x00174D90
			[return: MarshalAs(UnmanagedType.IUnknown)]
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				switch (direction)
				{
				case UnsafeNativeMethods.NavigateDirection.Parent:
					return this.Parent;
				case UnsafeNativeMethods.NavigateDirection.NextSibling:
					if (this.Parent.GetChildCount() > 1)
					{
						return this.Parent.GetChild(1);
					}
					break;
				case UnsafeNativeMethods.NavigateDirection.FirstChild:
					if (this.GetChildCount() > 0)
					{
						return this.GetChild(0);
					}
					break;
				case UnsafeNativeMethods.NavigateDirection.LastChild:
					if (this.GetChildCount() > 0)
					{
						return this.GetChild(this.GetChildCount() - 1);
					}
					break;
				}
				return null;
			}

			// Token: 0x06005906 RID: 22790 RVA: 0x00176C05 File Offset: 0x00174E05
			internal override bool IsPatternSupported(int patternId)
			{
				return (AccessibilityImprovements.Level3 && patternId.Equals(10018)) || base.IsPatternSupported(patternId);
			}

			// Token: 0x06005907 RID: 22791 RVA: 0x00176C28 File Offset: 0x00174E28
			internal override object GetPropertyValue(int propertyId)
			{
				if (AccessibilityImprovements.Level3)
				{
					switch (propertyId)
					{
					case 30005:
						return SR.GetString("DataGridView_AccTopRow");
					case 30006:
					case 30011:
					case 30012:
					case 30014:
					case 30015:
					case 30016:
					case 30018:
						break;
					case 30007:
					case 30013:
						return string.Empty;
					case 30008:
					case 30009:
						return false;
					case 30010:
						return this.owner.Enabled;
					case 30017:
						return true;
					case 30019:
						return false;
					default:
						if (propertyId == 30022)
						{
							return false;
						}
						if (propertyId == 30090)
						{
							return true;
						}
						break;
					}
				}
				return base.GetPropertyValue(propertyId);
			}

			// Token: 0x04003922 RID: 14626
			private int[] runtimeId;

			// Token: 0x04003923 RID: 14627
			private DataGridView owner;
		}
	}
}
