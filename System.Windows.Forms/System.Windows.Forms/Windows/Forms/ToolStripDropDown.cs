using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Windows.Forms.Layout;

namespace System.Windows.Forms
{
	/// <summary>Represents a control that allows the user to select a single item from a list that is displayed when the user clicks a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />. Although <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> and <see cref="T:System.Windows.Forms.ToolStripDropDown" /> replace and add functionality to the <see cref="T:System.Windows.Forms.Menu" /> control of previous versions, <see cref="T:System.Windows.Forms.Menu" /> is retained for both backward compatibility and future use if you choose.</summary>
	// Token: 0x020003A8 RID: 936
	[Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class ToolStripDropDown : ToolStrip
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> class. </summary>
		// Token: 0x06003D16 RID: 15638 RVA: 0x0010BEF4 File Offset: 0x0010A0F4
		public ToolStripDropDown()
		{
			if (DpiHelper.EnableToolStripHighDpiImprovements)
			{
				this.scaledDefaultPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDown.defaultPadding, 0);
			}
			bool isRestrictedWindow = this.IsRestrictedWindow;
			base.SuspendLayout();
			this.Initialize();
			base.ResumeLayout(false);
		}

		// Token: 0x06003D17 RID: 15639 RVA: 0x0010BF78 File Offset: 0x0010A178
		internal ToolStripDropDown(ToolStripItem ownerItem) : this()
		{
			this.ownerItem = ownerItem;
		}

		// Token: 0x06003D18 RID: 15640 RVA: 0x0010BF87 File Offset: 0x0010A187
		internal ToolStripDropDown(ToolStripItem ownerItem, bool isAutoGenerated) : this(ownerItem)
		{
			this.isAutoGenerated = isAutoGenerated;
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>
		///     <see langword="true" /> to enable item reordering; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F46 RID: 3910
		// (get) Token: 0x06003D19 RID: 15641 RVA: 0x0010BF97 File Offset: 0x0010A197
		// (set) Token: 0x06003D1A RID: 15642 RVA: 0x0010BF9F File Offset: 0x0010A19F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool AllowItemReorder
		{
			get
			{
				return base.AllowItemReorder;
			}
			set
			{
				base.AllowItemReorder = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="P:System.Windows.Forms.ToolStripDropDown.Opacity" /> of the form can be adjusted.</summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="P:System.Windows.Forms.ToolStripDropDown.Opacity" /> of the form can be adjusted; otherwise, <see langword="false" />. </returns>
		// Token: 0x17000F47 RID: 3911
		// (get) Token: 0x06003D1B RID: 15643 RVA: 0x0010BFA8 File Offset: 0x0010A1A8
		// (set) Token: 0x06003D1C RID: 15644 RVA: 0x0010BFBC File Offset: 0x0010A1BC
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[SRDescription("ControlAllowTransparencyDescr")]
		public bool AllowTransparency
		{
			get
			{
				return this.state[ToolStripDropDown.stateAllowTransparency];
			}
			set
			{
				if (value != this.state[ToolStripDropDown.stateAllowTransparency] && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.state[ToolStripDropDown.stateAllowTransparency] = value;
					this.state[ToolStripDropDown.stateLayered] = this.state[ToolStripDropDown.stateAllowTransparency];
					base.UpdateStyles();
					if (!value)
					{
						if (base.Properties.ContainsObject(ToolStripDropDown.PropOpacity))
						{
							base.Properties.SetObject(ToolStripDropDown.PropOpacity, 1f);
						}
						this.UpdateLayered();
					}
				}
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</returns>
		// Token: 0x17000F48 RID: 3912
		// (get) Token: 0x06003D1D RID: 15645 RVA: 0x0010C059 File Offset: 0x0010A259
		// (set) Token: 0x06003D1E RID: 15646 RVA: 0x0010C061 File Offset: 0x0010A261
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override AnchorStyles Anchor
		{
			get
			{
				return base.Anchor;
			}
			set
			{
				base.Anchor = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> automatically adjusts its size when the form is resized. </summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control automatically resizes; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000F49 RID: 3913
		// (get) Token: 0x06003D1F RID: 15647 RVA: 0x0010C06A File Offset: 0x0010A26A
		// (set) Token: 0x06003D20 RID: 15648 RVA: 0x0010C072 File Offset: 0x0010A272
		[DefaultValue(true)]
		public override bool AutoSize
		{
			get
			{
				return this.autoSize;
			}
			set
			{
				if (this.autoSize != value)
				{
					this.autoSize = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.AutoSize);
					this.OnAutoSizeChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control should automatically close when it has lost activation.  </summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control automatically closes; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000F4A RID: 3914
		// (get) Token: 0x06003D21 RID: 15649 RVA: 0x0010C09B File Offset: 0x0010A29B
		// (set) Token: 0x06003D22 RID: 15650 RVA: 0x0010C0A3 File Offset: 0x0010A2A3
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("ToolStripDropDownAutoCloseDescr")]
		public bool AutoClose
		{
			get
			{
				return this.autoClose;
			}
			set
			{
				if (this.autoClose != value)
				{
					this.autoClose = value;
					this.ApplyTopMost(!this.autoClose);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</summary>
		// Token: 0x14000307 RID: 775
		// (add) Token: 0x06003D23 RID: 15651 RVA: 0x0001FD81 File Offset: 0x0001DF81
		// (remove) Token: 0x06003D24 RID: 15652 RVA: 0x0001FD8A File Offset: 0x0001DF8A
		[Browsable(false)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</summary>
		// Token: 0x14000308 RID: 776
		// (add) Token: 0x06003D25 RID: 15653 RVA: 0x0001FD93 File Offset: 0x0001DF93
		// (remove) Token: 0x06003D26 RID: 15654 RVA: 0x0001FD9C File Offset: 0x0001DF9C
		[Browsable(false)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStrip.BindingContext" /> property changes.</summary>
		// Token: 0x14000309 RID: 777
		// (add) Token: 0x06003D27 RID: 15655 RVA: 0x0010C0C4 File Offset: 0x0010A2C4
		// (remove) Token: 0x06003D28 RID: 15656 RVA: 0x0010C0CD File Offset: 0x0010A2CD
		[Browsable(false)]
		public new event EventHandler BindingContextChanged
		{
			add
			{
				base.BindingContextChanged += value;
			}
			remove
			{
				base.BindingContextChanged -= value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the items in a <see cref="T:System.Windows.Forms.ToolStripDropDown" /> can be sent to an overflow menu.</summary>
		/// <returns>
		///     <see langword="true" /> to send <see cref="T:System.Windows.Forms.ToolStripDropDown" /> items to an overflow menu; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000F4B RID: 3915
		// (get) Token: 0x06003D29 RID: 15657 RVA: 0x000D09CC File Offset: 0x000CEBCC
		// (set) Token: 0x06003D2A RID: 15658 RVA: 0x000D09D4 File Offset: 0x000CEBD4
		[DefaultValue(false)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool CanOverflow
		{
			get
			{
				return base.CanOverflow;
			}
			set
			{
				base.CanOverflow = value;
			}
		}

		/// <summary>Occurs when the focus or keyboard user interface (UI) cues change.</summary>
		// Token: 0x1400030A RID: 778
		// (add) Token: 0x06003D2B RID: 15659 RVA: 0x0010C0D6 File Offset: 0x0010A2D6
		// (remove) Token: 0x06003D2C RID: 15660 RVA: 0x0010C0DF File Offset: 0x0010A2DF
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event UICuesEventHandler ChangeUICues
		{
			add
			{
				base.ChangeUICues += value;
			}
			remove
			{
				base.ChangeUICues -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The shortcut menu associated with the control.</returns>
		// Token: 0x17000F4C RID: 3916
		// (get) Token: 0x06003D2D RID: 15661 RVA: 0x00012044 File Offset: 0x00010244
		// (set) Token: 0x06003D2E RID: 15662 RVA: 0x0001204C File Offset: 0x0001024C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ContextMenu ContextMenu
		{
			get
			{
				return base.ContextMenu;
			}
			set
			{
				base.ContextMenu = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400030B RID: 779
		// (add) Token: 0x06003D2F RID: 15663 RVA: 0x0010C0E8 File Offset: 0x0010A2E8
		// (remove) Token: 0x06003D30 RID: 15664 RVA: 0x0010C0F1 File Offset: 0x0010A2F1
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler ContextMenuChanged
		{
			add
			{
				base.ContextMenuChanged += value;
			}
			remove
			{
				base.ContextMenuChanged -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The shortcut menu associated with the control.</returns>
		// Token: 0x17000F4D RID: 3917
		// (get) Token: 0x06003D31 RID: 15665 RVA: 0x0010C0FA File Offset: 0x0010A2FA
		// (set) Token: 0x06003D32 RID: 15666 RVA: 0x0010C102 File Offset: 0x0010A302
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ContextMenuStrip ContextMenuStrip
		{
			get
			{
				return base.ContextMenuStrip;
			}
			set
			{
				base.ContextMenuStrip = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400030C RID: 780
		// (add) Token: 0x06003D33 RID: 15667 RVA: 0x0010C10B File Offset: 0x0010A30B
		// (remove) Token: 0x06003D34 RID: 15668 RVA: 0x0010C114 File Offset: 0x0010A314
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ContextMenuStripChanged
		{
			add
			{
				base.ContextMenuStripChanged += value;
			}
			remove
			{
				base.ContextMenuStripChanged -= value;
			}
		}

		/// <summary>Gets parameters of a new window.</summary>
		/// <returns>An object of type <see cref="T:System.Windows.Forms.CreateParams" /> used when creating a new window.</returns>
		// Token: 0x17000F4E RID: 3918
		// (get) Token: 0x06003D35 RID: 15669 RVA: 0x0010C120 File Offset: 0x0010A320
		protected override CreateParams CreateParams
		{
			[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			get
			{
				CreateParams createParams = base.CreateParams;
				if (this.DropShadowEnabled)
				{
					createParams.ClassStyle |= 131072;
				}
				createParams.Style &= -79691777;
				createParams.ExStyle &= -262145;
				createParams.Style |= (this.TopLevel ? int.MinValue : 1073741824);
				createParams.ExStyle |= 65536;
				bool topLevel = this.TopLevel;
				if (topLevel && this.state[ToolStripDropDown.stateLayered])
				{
					createParams.ExStyle |= 524288;
				}
				else if (topLevel)
				{
					createParams.ClassStyle |= 2048;
				}
				else if (!topLevel)
				{
					createParams.Style |= 67108864;
				}
				return createParams;
			}
		}

		/// <summary>Gets the internal spacing, in pixels, of the contents of a <see cref="T:System.Windows.Forms.ToolStrip" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> value of (0, 0, 1, 0).</returns>
		// Token: 0x17000F4F RID: 3919
		// (get) Token: 0x06003D36 RID: 15670 RVA: 0x0010C202 File Offset: 0x0010A402
		protected override Padding DefaultPadding
		{
			get
			{
				return this.scaledDefaultPadding;
			}
		}

		/// <summary>Gets a value indicating whether ToolTips are shown for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> by default.</summary>
		/// <returns>
		///   <see langword="true" /> in all cases.</returns>
		// Token: 0x17000F50 RID: 3920
		// (get) Token: 0x06003D37 RID: 15671 RVA: 0x0000E214 File Offset: 0x0000C414
		protected override bool DefaultShowItemToolTips
		{
			get
			{
				return true;
			}
		}

		/// <summary>Gets the docking location of the <see cref="T:System.Windows.Forms.ToolStrip" />, indicating which borders are docked to the container.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values. The default is Top.</returns>
		// Token: 0x17000F51 RID: 3921
		// (get) Token: 0x06003D38 RID: 15672 RVA: 0x0000E0A4 File Offset: 0x0000C2A4
		protected override DockStyle DefaultDock
		{
			get
			{
				return DockStyle.None;
			}
		}

		/// <summary>Gets or sets the direction in which the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is displayed relative to the <see cref="T:System.Windows.Forms.ToolStrip" />.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</returns>
		// Token: 0x17000F52 RID: 3922
		// (get) Token: 0x06003D39 RID: 15673 RVA: 0x0010C20A File Offset: 0x0010A40A
		// (set) Token: 0x06003D3A RID: 15674 RVA: 0x0010C228 File Offset: 0x0010A428
		public override ToolStripDropDownDirection DefaultDropDownDirection
		{
			get
			{
				if (this.childDropDownDirection != ToolStripDropDownDirection.Default)
				{
					return this.childDropDownDirection;
				}
				if (this.RightToLeft != RightToLeft.Yes)
				{
					return ToolStripDropDownDirection.Right;
				}
				return ToolStripDropDownDirection.Left;
			}
			set
			{
				this.childDropDownDirection = value;
				base.DefaultDropDownDirection = value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</returns>
		// Token: 0x17000F53 RID: 3923
		// (get) Token: 0x06003D3B RID: 15675 RVA: 0x000F8E2D File Offset: 0x000F702D
		// (set) Token: 0x06003D3C RID: 15676 RVA: 0x000F8E35 File Offset: 0x000F7035
		[DefaultValue(DockStyle.None)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public override DockStyle Dock
		{
			get
			{
				return base.Dock;
			}
			set
			{
				base.Dock = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400030D RID: 781
		// (add) Token: 0x06003D3D RID: 15677 RVA: 0x000F7680 File Offset: 0x000F5880
		// (remove) Token: 0x06003D3E RID: 15678 RVA: 0x000F7689 File Offset: 0x000F5889
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler DockChanged
		{
			add
			{
				base.DockChanged += value;
			}
			remove
			{
				base.DockChanged -= value;
			}
		}

		// Token: 0x17000F54 RID: 3924
		// (get) Token: 0x06003D3F RID: 15679 RVA: 0x0010C238 File Offset: 0x0010A438
		internal override NativeWindow DropDownOwnerWindow
		{
			get
			{
				if (this.ownerItem != null && this.ownerItem.Owner != null)
				{
					return this.ownerItem.Owner.DropDownOwnerWindow;
				}
				return base.DropDownOwnerWindow;
			}
		}

		/// <summary>Gets or sets a value indicating whether a three-dimensional shadow effect appears when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is displayed. </summary>
		/// <returns>
		///     <see langword="true" /> to enable the shadow effect; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F55 RID: 3925
		// (get) Token: 0x06003D40 RID: 15680 RVA: 0x0010C266 File Offset: 0x0010A466
		// (set) Token: 0x06003D41 RID: 15681 RVA: 0x0010C27F File Offset: 0x0010A47F
		public bool DropShadowEnabled
		{
			get
			{
				return this.dropShadowEnabled && this.TopMost && DisplayInformation.IsDropShadowEnabled;
			}
			set
			{
				if (this.dropShadowEnabled != value)
				{
					this.dropShadowEnabled = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						base.RecreateHandle();
					}
				}
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is closed.</summary>
		// Token: 0x1400030E RID: 782
		// (add) Token: 0x06003D42 RID: 15682 RVA: 0x0010C2A7 File Offset: 0x0010A4A7
		// (remove) Token: 0x06003D43 RID: 15683 RVA: 0x0010C2BA File Offset: 0x0010A4BA
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosedDecr")]
		public event ToolStripDropDownClosedEventHandler Closed
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosed, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosed, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control is about to close.</summary>
		// Token: 0x1400030F RID: 783
		// (add) Token: 0x06003D44 RID: 15684 RVA: 0x0010C2CD File Offset: 0x0010A4CD
		// (remove) Token: 0x06003D45 RID: 15685 RVA: 0x0010C2E0 File Offset: 0x0010A4E0
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosingDecr")]
		public event ToolStripDropDownClosingEventHandler Closing
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosing, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosing, value);
			}
		}

		/// <summary>Occurs when the focus enters the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		// Token: 0x14000310 RID: 784
		// (add) Token: 0x06003D46 RID: 15686 RVA: 0x000DAC88 File Offset: 0x000D8E88
		// (remove) Token: 0x06003D47 RID: 15687 RVA: 0x000DAC91 File Offset: 0x000D8E91
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Enter
		{
			add
			{
				base.Enter += value;
			}
			remove
			{
				base.Enter -= value;
			}
		}

		/// <summary>Gets or sets the font of the text displayed on the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</returns>
		// Token: 0x17000F56 RID: 3926
		// (get) Token: 0x06003D48 RID: 15688 RVA: 0x0010C2F3 File Offset: 0x0010A4F3
		// (set) Token: 0x06003D49 RID: 15689 RVA: 0x0010C326 File Offset: 0x0010A526
		public override Font Font
		{
			get
			{
				if (base.IsFontSet())
				{
					return base.Font;
				}
				if (this.IsAutoGenerated && this.OwnerItem != null)
				{
					return this.OwnerItem.Font;
				}
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripDropDown.Font" /> property changes.</summary>
		// Token: 0x14000311 RID: 785
		// (add) Token: 0x06003D4A RID: 15690 RVA: 0x00052778 File Offset: 0x00050978
		// (remove) Token: 0x06003D4B RID: 15691 RVA: 0x00052781 File Offset: 0x00050981
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStrip.ForeColor" /> property changes.</summary>
		// Token: 0x14000312 RID: 786
		// (add) Token: 0x06003D4C RID: 15692 RVA: 0x0010C32F File Offset: 0x0010A52F
		// (remove) Token: 0x06003D4D RID: 15693 RVA: 0x0010C338 File Offset: 0x0010A538
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000313 RID: 787
		// (add) Token: 0x06003D4E RID: 15694 RVA: 0x000EC694 File Offset: 0x000EA894
		// (remove) Token: 0x06003D4F RID: 15695 RVA: 0x000EC69D File Offset: 0x000EA89D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event GiveFeedbackEventHandler GiveFeedback
		{
			add
			{
				base.GiveFeedback += value;
			}
			remove
			{
				base.GiveFeedback -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of <see cref="T:System.Windows.Forms.ToolStripGripDisplayStyle" /> the values.</returns>
		// Token: 0x17000F57 RID: 3927
		// (get) Token: 0x06003D50 RID: 15696 RVA: 0x0010C341 File Offset: 0x0010A541
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripGripDisplayStyle GripDisplayStyle
		{
			get
			{
				return base.GripDisplayStyle;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The boundaries of the ToolStrip move handle.</returns>
		// Token: 0x17000F58 RID: 3928
		// (get) Token: 0x06003D51 RID: 15697 RVA: 0x0010C349 File Offset: 0x0010A549
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new Rectangle GripRectangle
		{
			get
			{
				return base.GripRectangle;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> value.</returns>
		// Token: 0x17000F59 RID: 3929
		// (get) Token: 0x06003D52 RID: 15698 RVA: 0x0010C351 File Offset: 0x0010A551
		// (set) Token: 0x06003D53 RID: 15699 RVA: 0x0010C359 File Offset: 0x0010A559
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new Padding GripMargin
		{
			get
			{
				return base.GripMargin;
			}
			set
			{
				base.GripMargin = value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripGripStyle" /> values.</returns>
		// Token: 0x17000F5A RID: 3930
		// (get) Token: 0x06003D54 RID: 15700 RVA: 0x000D0A95 File Offset: 0x000CEC95
		// (set) Token: 0x06003D55 RID: 15701 RVA: 0x000D0A9D File Offset: 0x000CEC9D
		[DefaultValue(ToolStripGripStyle.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripGripStyle GripStyle
		{
			get
			{
				return base.GripStyle;
			}
			set
			{
				base.GripStyle = value;
			}
		}

		/// <summary>Occurs when the user requests help for a control.</summary>
		// Token: 0x14000314 RID: 788
		// (add) Token: 0x06003D56 RID: 15702 RVA: 0x0010C362 File Offset: 0x0010A562
		// (remove) Token: 0x06003D57 RID: 15703 RVA: 0x0010C36B File Offset: 0x0010A56B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event HelpEventHandler HelpRequested
		{
			add
			{
				base.HelpRequested += value;
			}
			remove
			{
				base.HelpRequested -= value;
			}
		}

		/// <summary>Occurs when the <see cref="E:System.Windows.Forms.ToolStripDropDown.ImeModeChanged" /> property has changed.</summary>
		// Token: 0x14000315 RID: 789
		// (add) Token: 0x06003D58 RID: 15704 RVA: 0x0001BF2C File Offset: 0x0001A12C
		// (remove) Token: 0x06003D59 RID: 15705 RVA: 0x0001BF35 File Offset: 0x0001A135
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ImeModeChanged
		{
			add
			{
				base.ImeModeChanged += value;
			}
			remove
			{
				base.ImeModeChanged -= value;
			}
		}

		/// <summary>Gets a value indicating whether this <see cref="T:System.Windows.Forms.ToolStripDropDown" /> was automatically generated. </summary>
		/// <returns>
		///     <see langword="true" /> if this <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is generated automatically; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F5B RID: 3931
		// (get) Token: 0x06003D5A RID: 15706 RVA: 0x0010C374 File Offset: 0x0010A574
		[Browsable(false)]
		public bool IsAutoGenerated
		{
			get
			{
				return this.isAutoGenerated;
			}
		}

		// Token: 0x17000F5C RID: 3932
		// (get) Token: 0x06003D5B RID: 15707 RVA: 0x0010C37C File Offset: 0x0010A57C
		internal bool IsAssignedToDropDownItem
		{
			get
			{
				return this.IsAutoGenerated || this.countDropDownItemsAssignedTo > 0;
			}
		}

		// Token: 0x17000F5D RID: 3933
		// (get) Token: 0x06003D5C RID: 15708 RVA: 0x0010C394 File Offset: 0x0010A594
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal bool IsRestrictedWindow
		{
			get
			{
				if (!this.state[ToolStripDropDown.stateIsRestrictedWindowChecked])
				{
					this.state[ToolStripDropDown.stateIsRestrictedWindowChecked] = true;
					this.state[ToolStripDropDown.stateIsRestrictedWindow] = false;
					try
					{
						IntSecurity.WindowAdornmentModification.Demand();
					}
					catch
					{
						this.state[ToolStripDropDown.stateIsRestrictedWindow] = true;
					}
				}
				return this.state[ToolStripDropDown.stateIsRestrictedWindow];
			}
		}

		// Token: 0x17000F5E RID: 3934
		// (get) Token: 0x06003D5D RID: 15709 RVA: 0x0010C418 File Offset: 0x0010A618
		// (set) Token: 0x06003D5E RID: 15710 RVA: 0x0010C43C File Offset: 0x0010A63C
		internal override Size ImageScalingSizeInternal
		{
			get
			{
				if (this.IsAutoGenerated && this.OwnerToolStrip != null)
				{
					return this.OwnerToolStrip.ImageScalingSizeInternal;
				}
				return base.ImageScalingSizeInternal;
			}
			set
			{
				base.ImageScalingSizeInternal = value;
			}
		}

		// Token: 0x17000F5F RID: 3935
		// (get) Token: 0x06003D5F RID: 15711 RVA: 0x0010C448 File Offset: 0x0010A648
		// (set) Token: 0x06003D60 RID: 15712 RVA: 0x0010C46C File Offset: 0x0010A66C
		internal override bool KeyboardActive
		{
			get
			{
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					return ownerToolStrip.KeyboardActive;
				}
				return base.KeyboardActive;
			}
			set
			{
				base.KeyboardActive = value;
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					ownerToolStrip.KeyboardActive = value;
				}
			}
		}

		/// <summary>Occurs when a key is pressed and held down while the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> has focus.</summary>
		// Token: 0x14000316 RID: 790
		// (add) Token: 0x06003D61 RID: 15713 RVA: 0x000B0E9E File Offset: 0x000AF09E
		// (remove) Token: 0x06003D62 RID: 15714 RVA: 0x000B0EA7 File Offset: 0x000AF0A7
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyDown
		{
			add
			{
				base.KeyDown += value;
			}
			remove
			{
				base.KeyDown -= value;
			}
		}

		/// <summary>Occurs when a key is pressed while the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> has focus.</summary>
		// Token: 0x14000317 RID: 791
		// (add) Token: 0x06003D63 RID: 15715 RVA: 0x000B0EB0 File Offset: 0x000AF0B0
		// (remove) Token: 0x06003D64 RID: 15716 RVA: 0x000B0EB9 File Offset: 0x000AF0B9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyPressEventHandler KeyPress
		{
			add
			{
				base.KeyPress += value;
			}
			remove
			{
				base.KeyPress -= value;
			}
		}

		/// <summary>Occurs when a key is released while the control has focus.</summary>
		// Token: 0x14000318 RID: 792
		// (add) Token: 0x06003D65 RID: 15717 RVA: 0x000B0E8C File Offset: 0x000AF08C
		// (remove) Token: 0x06003D66 RID: 15718 RVA: 0x000B0E95 File Offset: 0x000AF095
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyUp
		{
			add
			{
				base.KeyUp += value;
			}
			remove
			{
				base.KeyUp -= value;
			}
		}

		/// <summary>Occurs when the input focus leaves the control.</summary>
		// Token: 0x14000319 RID: 793
		// (add) Token: 0x06003D67 RID: 15719 RVA: 0x000DAC9A File Offset: 0x000D8E9A
		// (remove) Token: 0x06003D68 RID: 15720 RVA: 0x000DACA3 File Offset: 0x000D8EA3
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Leave
		{
			add
			{
				base.Leave += value;
			}
			remove
			{
				base.Leave -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</returns>
		// Token: 0x17000F60 RID: 3936
		// (get) Token: 0x06003D69 RID: 15721 RVA: 0x000A9351 File Offset: 0x000A7551
		// (set) Token: 0x06003D6A RID: 15722 RVA: 0x000A9359 File Offset: 0x000A7559
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public new Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				base.Location = value;
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control is opening.</summary>
		// Token: 0x1400031A RID: 794
		// (add) Token: 0x06003D6B RID: 15723 RVA: 0x0010C491 File Offset: 0x0010A691
		// (remove) Token: 0x06003D6C RID: 15724 RVA: 0x0010C4A4 File Offset: 0x0010A6A4
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownOpeningDescr")]
		public event CancelEventHandler Opening
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpening, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpening, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is opened.</summary>
		// Token: 0x1400031B RID: 795
		// (add) Token: 0x06003D6D RID: 15725 RVA: 0x0010C4B7 File Offset: 0x0010A6B7
		// (remove) Token: 0x06003D6E RID: 15726 RVA: 0x0010C4CA File Offset: 0x0010A6CA
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownOpenedDescr")]
		public event EventHandler Opened
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpened, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpened, value);
			}
		}

		/// <summary>Gets the maximum height and width, in pixels, of the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Size" /> representing the height and width of the <see cref="T:System.Windows.Forms.ToolStripDropDown" />, in pixels.</returns>
		// Token: 0x17000F61 RID: 3937
		// (get) Token: 0x06003D6F RID: 15727 RVA: 0x0010C4E0 File Offset: 0x0010A6E0
		protected internal override Size MaxItemSize
		{
			get
			{
				return Screen.GetWorkingArea(base.Bounds).Size - base.Padding.Size;
			}
		}

		/// <summary>Determines the opacity of the form.</summary>
		/// <returns>The level of opacity for the form. The default is 1.00.</returns>
		// Token: 0x17000F62 RID: 3938
		// (get) Token: 0x06003D70 RID: 15728 RVA: 0x0010C514 File Offset: 0x0010A714
		// (set) Token: 0x06003D71 RID: 15729 RVA: 0x0010C54C File Offset: 0x0010A74C
		[SRCategory("CatWindowStyle")]
		[TypeConverter(typeof(OpacityConverter))]
		[SRDescription("FormOpacityDescr")]
		[DefaultValue(1.0)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public double Opacity
		{
			get
			{
				object @object = base.Properties.GetObject(ToolStripDropDown.PropOpacity);
				if (@object != null)
				{
					return Convert.ToDouble(@object, CultureInfo.InvariantCulture);
				}
				return 1.0;
			}
			set
			{
				if (this.IsRestrictedWindow)
				{
					value = Math.Max(value, 0.5);
				}
				if (value > 1.0)
				{
					value = 1.0;
				}
				else if (value < 0.0)
				{
					value = 0.0;
				}
				base.Properties.SetObject(ToolStripDropDown.PropOpacity, value);
				bool flag = this.state[ToolStripDropDown.stateLayered];
				if (this.OpacityAsByte < 255 && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.AllowTransparency = true;
					this.state[ToolStripDropDown.stateLayered] = true;
				}
				else
				{
					this.state[ToolStripDropDown.stateLayered] = false;
				}
				if (flag != this.state[ToolStripDropDown.stateLayered])
				{
					base.UpdateStyles();
				}
				this.UpdateLayered();
			}
		}

		// Token: 0x17000F63 RID: 3939
		// (get) Token: 0x06003D72 RID: 15730 RVA: 0x0010C631 File Offset: 0x0010A831
		private byte OpacityAsByte
		{
			get
			{
				return (byte)(this.Opacity * 255.0);
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The ToolStripItem that is the overflow button for a ToolStrip with overflow enabled.</returns>
		// Token: 0x17000F64 RID: 3940
		// (get) Token: 0x06003D73 RID: 15731 RVA: 0x0010C644 File Offset: 0x0010A844
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripOverflowButton OverflowButton
		{
			get
			{
				return base.OverflowButton;
			}
		}

		/// <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is the owner of this <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.ToolStripItem" /> that is the owner of this <see cref="T:System.Windows.Forms.ToolStripDropDown" />. The default value is <see langword="null" />.</returns>
		// Token: 0x17000F65 RID: 3941
		// (get) Token: 0x06003D74 RID: 15732 RVA: 0x0010C64C File Offset: 0x0010A84C
		// (set) Token: 0x06003D75 RID: 15733 RVA: 0x0010C654 File Offset: 0x0010A854
		[DefaultValue(null)]
		[Browsable(false)]
		public ToolStripItem OwnerItem
		{
			get
			{
				return this.ownerItem;
			}
			set
			{
				if (this.ownerItem != value)
				{
					Font font = this.Font;
					RightToLeft rightToLeft = this.RightToLeft;
					this.ownerItem = value;
					if (!font.Equals(this.Font))
					{
						this.OnOwnerItemFontChanged(EventArgs.Empty);
					}
					if (this.ownerItem != null && this.RightToLeftInherited && rightToLeft != this.RightToLeft)
					{
						using (new LayoutTransaction(this, this, PropertyNames.RightToLeft))
						{
							this.OnRightToLeftChanged(EventArgs.Empty);
						}
					}
				}
			}
		}

		// Token: 0x17000F66 RID: 3942
		// (get) Token: 0x06003D76 RID: 15734 RVA: 0x0010C6E8 File Offset: 0x0010A8E8
		internal ToolStripDropDownItem OwnerDropDownItem
		{
			get
			{
				return this.OwnerItem as ToolStripDropDownItem;
			}
		}

		// Token: 0x17000F67 RID: 3943
		// (get) Token: 0x06003D77 RID: 15735 RVA: 0x0010C6F8 File Offset: 0x0010A8F8
		internal ToolStrip OwnerToolStrip
		{
			get
			{
				if (this.ownerItem != null)
				{
					ToolStrip parentInternal = this.ownerItem.ParentInternal;
					if (parentInternal != null)
					{
						return parentInternal;
					}
					if (this.ownerItem.Placement == ToolStripItemPlacement.Overflow && this.ownerItem.Owner != null)
					{
						return this.ownerItem.Owner.OverflowButton.DropDown;
					}
					if (parentInternal == null)
					{
						return this.ownerItem.Owner;
					}
				}
				return null;
			}
		}

		/// <summary>Gets or sets the window region associated with the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The window <see cref="T:System.Drawing.Region" /> associated with the control.</returns>
		// Token: 0x17000F68 RID: 3944
		// (get) Token: 0x06003D78 RID: 15736 RVA: 0x0010C75F File Offset: 0x0010A95F
		// (set) Token: 0x06003D79 RID: 15737 RVA: 0x0010C767 File Offset: 0x0010A967
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new Region Region
		{
			get
			{
				return base.Region;
			}
			set
			{
				base.Region = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripDropDown.Region" /> property changes.</summary>
		// Token: 0x1400031C RID: 796
		// (add) Token: 0x06003D7A RID: 15738 RVA: 0x0010C770 File Offset: 0x0010A970
		// (remove) Token: 0x06003D7B RID: 15739 RVA: 0x0010C779 File Offset: 0x0010A979
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler RegionChanged
		{
			add
			{
				base.RegionChanged += value;
			}
			remove
			{
				base.RegionChanged -= value;
			}
		}

		// Token: 0x17000F69 RID: 3945
		// (get) Token: 0x06003D7C RID: 15740 RVA: 0x0000E0A4 File Offset: 0x0000C2A4
		// (set) Token: 0x06003D7D RID: 15741 RVA: 0x0000701A File Offset: 0x0000521A
		internal virtual bool RequiresScrollButtons
		{
			get
			{
				return false;
			}
			set
			{
			}
		}

		/// <summary>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values. The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</returns>
		// Token: 0x17000F6A RID: 3946
		// (get) Token: 0x06003D7E RID: 15742 RVA: 0x0010C782 File Offset: 0x0010A982
		// (set) Token: 0x06003D7F RID: 15743 RVA: 0x000BDC35 File Offset: 0x000BBE35
		[SRCategory("CatAppearance")]
		[Localizable(true)]
		[AmbientValue(RightToLeft.Inherit)]
		[SRDescription("ControlRightToLeftDescr")]
		public override RightToLeft RightToLeft
		{
			get
			{
				if (this.RightToLeftInherited)
				{
					if (this.SourceControlInternal != null)
					{
						return this.SourceControlInternal.RightToLeft;
					}
					if (this.OwnerItem != null)
					{
						return this.OwnerItem.RightToLeft;
					}
				}
				return base.RightToLeft;
			}
			set
			{
				base.RightToLeft = value;
			}
		}

		// Token: 0x17000F6B RID: 3947
		// (get) Token: 0x06003D80 RID: 15744 RVA: 0x0010C7BA File Offset: 0x0010A9BA
		private bool RightToLeftInherited
		{
			get
			{
				return !this.ShouldSerializeRightToLeft();
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x1400031D RID: 797
		// (add) Token: 0x06003D81 RID: 15745 RVA: 0x0010C7C5 File Offset: 0x0010A9C5
		// (remove) Token: 0x06003D82 RID: 15746 RVA: 0x0010C7CE File Offset: 0x0010A9CE
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event ScrollEventHandler Scroll
		{
			add
			{
				base.Scroll += value;
			}
			remove
			{
				base.Scroll -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>
		///     <see langword="true" /> to enable stretching; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F6C RID: 3948
		// (get) Token: 0x06003D83 RID: 15747 RVA: 0x000D0B03 File Offset: 0x000CED03
		// (set) Token: 0x06003D84 RID: 15748 RVA: 0x000D0B0B File Offset: 0x000CED0B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool Stretch
		{
			get
			{
				return base.Stretch;
			}
			set
			{
				base.Stretch = value;
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripLayoutStyle" /> style changes.</summary>
		// Token: 0x1400031E RID: 798
		// (add) Token: 0x06003D85 RID: 15749 RVA: 0x00055363 File Offset: 0x00053563
		// (remove) Token: 0x06003D86 RID: 15750 RVA: 0x0005536C File Offset: 0x0005356C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		// Token: 0x17000F6D RID: 3949
		// (get) Token: 0x06003D87 RID: 15751 RVA: 0x0010C7D7 File Offset: 0x0010A9D7
		// (set) Token: 0x06003D88 RID: 15752 RVA: 0x0010C7EE File Offset: 0x0010A9EE
		internal Control SourceControlInternal
		{
			get
			{
				return base.Properties.GetObject(ToolStripDropDown.PropSourceControl) as Control;
			}
			set
			{
				base.Properties.SetObject(ToolStripDropDown.PropSourceControl, value);
			}
		}

		// Token: 0x17000F6E RID: 3950
		// (get) Token: 0x06003D89 RID: 15753 RVA: 0x0010C801 File Offset: 0x0010AA01
		internal override int ShowParams
		{
			get
			{
				return 4;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x1400031F RID: 799
		// (add) Token: 0x06003D8A RID: 15754 RVA: 0x000AA126 File Offset: 0x000A8326
		// (remove) Token: 0x06003D8B RID: 15755 RVA: 0x000AA12F File Offset: 0x000A832F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TabStopChanged
		{
			add
			{
				base.TabStopChanged += value;
			}
			remove
			{
				base.TabStopChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000320 RID: 800
		// (add) Token: 0x06003D8C RID: 15756 RVA: 0x0003E435 File Offset: 0x0003C635
		// (remove) Token: 0x06003D8D RID: 15757 RVA: 0x0003E43E File Offset: 0x0003C63E
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		/// <summary>Specifies the direction in which to draw the text on the item.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripTextDirection" /> values. The default is <see cref="F:System.Windows.Forms.ToolStripTextDirection.Horizontal" />.</returns>
		// Token: 0x17000F6F RID: 3951
		// (get) Token: 0x06003D8E RID: 15758 RVA: 0x0010C804 File Offset: 0x0010AA04
		// (set) Token: 0x06003D8F RID: 15759 RVA: 0x0010C80C File Offset: 0x0010AA0C
		[Browsable(false)]
		[DefaultValue(ToolStripTextDirection.Horizontal)]
		[SRDescription("ToolStripTextDirectionDescr")]
		[SRCategory("CatAppearance")]
		public override ToolStripTextDirection TextDirection
		{
			get
			{
				return base.TextDirection;
			}
			set
			{
				base.TextDirection = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the form should be displayed as a topmost form.</summary>
		/// <returns>
		///     <see langword="true" /> in all cases.</returns>
		// Token: 0x17000F70 RID: 3952
		// (get) Token: 0x06003D90 RID: 15760 RVA: 0x0000E214 File Offset: 0x0000C414
		protected virtual bool TopMost
		{
			get
			{
				return true;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is a top-level control.</summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is a top-level control; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F71 RID: 3953
		// (get) Token: 0x06003D91 RID: 15761 RVA: 0x000AA1A2 File Offset: 0x000A83A2
		// (set) Token: 0x06003D92 RID: 15762 RVA: 0x0010C815 File Offset: 0x0010AA15
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool TopLevel
		{
			get
			{
				return base.GetTopLevel();
			}
			set
			{
				if (value != base.GetTopLevel())
				{
					base.SetTopLevelInternal(value);
					this.SetTopLevelStyle(value);
				}
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The tab order of the control within its container.</returns>
		// Token: 0x17000F72 RID: 3954
		// (get) Token: 0x06003D93 RID: 15763 RVA: 0x000AA0F2 File Offset: 0x000A82F2
		// (set) Token: 0x06003D94 RID: 15764 RVA: 0x000AA0FA File Offset: 0x000A82FA
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public new int TabIndex
		{
			get
			{
				return base.TabIndex;
			}
			set
			{
				base.TabIndex = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x14000321 RID: 801
		// (add) Token: 0x06003D95 RID: 15765 RVA: 0x000AA103 File Offset: 0x000A8303
		// (remove) Token: 0x06003D96 RID: 15766 RVA: 0x000AA10C File Offset: 0x000A830C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[SRCategory("CatPropertyChanged")]
		[SRDescription("ControlOnTabIndexChangedDescr")]
		public new event EventHandler TabIndexChanged
		{
			add
			{
				base.TabIndexChanged += value;
			}
			remove
			{
				base.TabIndexChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000322 RID: 802
		// (add) Token: 0x06003D97 RID: 15767 RVA: 0x0010C82E File Offset: 0x0010AA2E
		// (remove) Token: 0x06003D98 RID: 15768 RVA: 0x0010C837 File Offset: 0x0010AA37
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler Validated
		{
			add
			{
				base.Validated += value;
			}
			remove
			{
				base.Validated -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000323 RID: 803
		// (add) Token: 0x06003D99 RID: 15769 RVA: 0x0010C840 File Offset: 0x0010AA40
		// (remove) Token: 0x06003D9A RID: 15770 RVA: 0x0010C849 File Offset: 0x0010AA49
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event CancelEventHandler Validating
		{
			add
			{
				base.Validating += value;
			}
			remove
			{
				base.Validating -= value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is visible or hidden. </summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is visible; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000F73 RID: 3955
		// (get) Token: 0x06003D9B RID: 15771 RVA: 0x000F7629 File Offset: 0x000F5829
		// (set) Token: 0x06003D9C RID: 15772 RVA: 0x000F7631 File Offset: 0x000F5831
		[SRCategory("CatBehavior")]
		[Localizable(true)]
		[SRDescription("ControlVisibleDescr")]
		[DefaultValue(false)]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new bool Visible
		{
			get
			{
				return base.Visible;
			}
			set
			{
				base.Visible = value;
			}
		}

		// Token: 0x17000F74 RID: 3956
		// (get) Token: 0x06003D9D RID: 15773 RVA: 0x0010C852 File Offset: 0x0010AA52
		// (set) Token: 0x06003D9E RID: 15774 RVA: 0x0010C870 File Offset: 0x0010AA70
		internal bool WorkingAreaConstrained
		{
			get
			{
				return !this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] || this.IsRestrictedWindow;
			}
			set
			{
				bool value2 = !value;
				this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] = value2;
			}
		}

		// Token: 0x06003D9F RID: 15775 RVA: 0x0010C893 File Offset: 0x0010AA93
		internal void AssignToDropDownItem()
		{
			this.countDropDownItemsAssignedTo++;
		}

		// Token: 0x06003DA0 RID: 15776 RVA: 0x0010C8A4 File Offset: 0x0010AAA4
		internal void AdjustSize()
		{
			Size suggestedSize = this.GetSuggestedSize();
			if (suggestedSize != base.Size)
			{
				base.Size = suggestedSize;
			}
		}

		// Token: 0x06003DA1 RID: 15777 RVA: 0x0010C8D0 File Offset: 0x0010AAD0
		private void ApplyTopMost(bool topMost)
		{
			if (this.TopMost)
			{
				HandleRef hWndInsertAfter = topMost ? NativeMethods.HWND_TOPMOST : NativeMethods.HWND_NOTOPMOST;
				SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), hWndInsertAfter, 0, 0, 0, 0, 19);
			}
		}

		/// <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> and optionally releases the managed resources. </summary>
		/// <param name="disposing">
		///       <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources. </param>
		// Token: 0x06003DA2 RID: 15778 RVA: 0x0010C90E File Offset: 0x0010AB0E
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.SourceControlInternal = null;
			}
			base.Dispose(disposing);
		}

		// Token: 0x06003DA3 RID: 15779 RVA: 0x0010C924 File Offset: 0x0010AB24
		private void CancelAutoExpand()
		{
			ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
			if (toplevelOwnerToolStrip != null)
			{
				toplevelOwnerToolStrip.MenuAutoExpand = false;
			}
		}

		// Token: 0x06003DA4 RID: 15780 RVA: 0x0010C942 File Offset: 0x0010AB42
		internal override bool CanProcessMnemonic()
		{
			return (!this.IsRestrictedWindow || Application.MessageLoop) && base.CanProcessMnemonic();
		}

		/// <summary>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.ToolStripDropDown" />. </summary>
		/// <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</returns>
		// Token: 0x06003DA5 RID: 15781 RVA: 0x0010C95B File Offset: 0x0010AB5B
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new ToolStripDropDown.ToolStripDropDownAccessibleObject(this);
		}

		/// <summary>Applies various layout options to the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <param name="style">One of the <see cref="T:System.Windows.Forms.ToolStripLayoutStyle" /> values. The possibilities are <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.Flow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.HorizontalStackWithOverflow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.StackWithOverflow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.Table" />, and <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.VerticalStackWithOverflow" />.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.LayoutSettings" /> for this <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</returns>
		// Token: 0x06003DA6 RID: 15782 RVA: 0x0010C964 File Offset: 0x0010AB64
		protected override LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style)
		{
			LayoutSettings layoutSettings = base.CreateLayoutSettings(style);
			if (style == ToolStripLayoutStyle.Flow)
			{
				FlowLayoutSettings flowLayoutSettings = layoutSettings as FlowLayoutSettings;
				flowLayoutSettings.FlowDirection = FlowDirection.TopDown;
				flowLayoutSettings.WrapContents = false;
				return flowLayoutSettings;
			}
			return layoutSettings;
		}

		/// <summary>Creates a handle for the control.</summary>
		// Token: 0x06003DA7 RID: 15783 RVA: 0x0010C998 File Offset: 0x0010AB98
		protected override void CreateHandle()
		{
			base.CreateHandle();
			if (this.TopLevel)
			{
				this.ReparentToDropDownOwnerWindow();
				if (!this.AutoClose || !this.WorkingAreaConstrained)
				{
					this.ApplyTopMost(true);
				}
			}
			if (base.DesignMode)
			{
				base.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, false);
			}
		}

		/// <summary>Closes the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control.</summary>
		// Token: 0x06003DA8 RID: 15784 RVA: 0x0010C9E4 File Offset: 0x0010ABE4
		public void Close()
		{
			this.SetCloseReason(ToolStripDropDownCloseReason.CloseCalled);
			this.Visible = false;
			if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() == null)
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x06003DA9 RID: 15785 RVA: 0x0010CA00 File Offset: 0x0010AC00
		private void ResetCloseReason()
		{
			this.closeReason = ToolStripDropDownCloseReason.AppFocusChange;
		}

		// Token: 0x06003DAA RID: 15786 RVA: 0x0010CA09 File Offset: 0x0010AC09
		internal void SetCloseReason(ToolStripDropDownCloseReason reason)
		{
			this.closeReason = reason;
		}

		/// <summary>Closes the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control for the specified reason.</summary>
		/// <param name="reason">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownCloseReason" /> values.</param>
		// Token: 0x06003DAB RID: 15787 RVA: 0x0010CA12 File Offset: 0x0010AC12
		public void Close(ToolStripDropDownCloseReason reason)
		{
			this.SetCloseReason(reason);
			this.Visible = false;
		}

		// Token: 0x06003DAC RID: 15788 RVA: 0x0010CA24 File Offset: 0x0010AC24
		internal override Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight)
		{
			Rectangle rectangle = base.ApplyBoundsConstraints(suggestedX, suggestedY, proposedWidth, proposedHeight);
			if (this.IsRestrictedWindow && this.TopMost)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x06003DAD RID: 15789 RVA: 0x0010CA58 File Offset: 0x0010AC58
		internal Rectangle GetDropDownBounds(Rectangle suggestedBounds)
		{
			Rectangle result;
			if (this.TopLevel)
			{
				Point location = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem)
				{
					location = ((ToolStripDropDownItem)this.ownerItem).DropDownLocation;
				}
				else
				{
					location = suggestedBounds.Location;
				}
				Rectangle bounds = new Rectangle(location, suggestedBounds.Size);
				if (this.WorkingAreaConstrained)
				{
					result = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(bounds);
				}
				else
				{
					result = WindowsFormsUtils.ConstrainToScreenBounds(bounds);
				}
			}
			else
			{
				Point location2 = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem && this.ParentInternal != null)
				{
					location2 = this.ParentInternal.PointToClient(((ToolStripDropDownItem)this.ownerItem).DropDownLocation);
				}
				else
				{
					location2 = suggestedBounds.Location;
				}
				result = new Rectangle(location2, suggestedBounds.Size);
			}
			return result;
		}

		// Token: 0x06003DAE RID: 15790 RVA: 0x0010CB28 File Offset: 0x0010AD28
		internal Rectangle CalculateDropDownLocation(Point start, ToolStripDropDownDirection dropDownDirection)
		{
			Point empty = Point.Empty;
			if (!base.IsHandleCreated)
			{
				LayoutTransaction.DoLayout(this, this, PropertyNames.PreferredSize);
			}
			Rectangle rectangle = new Rectangle(Point.Empty, this.GetSuggestedSize());
			switch (dropDownDirection)
			{
			case ToolStripDropDownDirection.AboveLeft:
				empty.X = -rectangle.Width;
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.AboveRight:
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.BelowLeft:
			case ToolStripDropDownDirection.Left:
				empty.X = -rectangle.Width;
				break;
			}
			rectangle.Location = new Point(start.X + empty.X, start.Y + empty.Y);
			if (this.WorkingAreaConstrained)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x06003DAF RID: 15791 RVA: 0x0010CBFB File Offset: 0x0010ADFB
		internal Size GetSuggestedSize()
		{
			if (this.AutoSize)
			{
				return this.GetPreferredSize(Size.Empty);
			}
			return base.Size;
		}

		// Token: 0x06003DB0 RID: 15792 RVA: 0x0010CC18 File Offset: 0x0010AE18
		internal override ToolStrip GetToplevelOwnerToolStrip()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			if (firstDropDown.OwnerItem != null)
			{
				return firstDropDown.OwnerToolStrip;
			}
			return null;
		}

		// Token: 0x06003DB1 RID: 15793 RVA: 0x0010CC3C File Offset: 0x0010AE3C
		internal ToolStripItem GetToplevelOwnerItem()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			return firstDropDown.OwnerItem;
		}

		// Token: 0x06003DB2 RID: 15794 RVA: 0x0010CC56 File Offset: 0x0010AE56
		internal override void HandleItemClicked(ToolStripItem dismissingItem)
		{
			if (!LocalAppContextSwitches.UseLegacyContextMenuStripSourceControlValue && base.ActiveDropDowns.Count == 0)
			{
				this.SourceControlInternal = null;
			}
			base.HandleItemClicked(dismissingItem);
		}

		// Token: 0x06003DB3 RID: 15795 RVA: 0x0010CC7C File Offset: 0x0010AE7C
		internal virtual void Initialize()
		{
			base.SetState(2, false);
			base.SetTopLevelInternal(true);
			base.SetState(32, true);
			base.SetStyle(ControlStyles.ResizeRedraw, true);
			base.UpdateStyles();
			this.GripStyle = ToolStripGripStyle.Hidden;
			this.CanOverflow = false;
			base.LayoutStyle = ToolStripLayoutStyle.Flow;
			base.MenuAutoExpand = true;
			this.AutoSize = true;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Closed" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripDropDownClosedEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB4 RID: 15796 RVA: 0x0010CCD4 File Offset: 0x0010AED4
		protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupEnd, -1);
			}
			ToolStripDropDownClosedEventHandler toolStripDropDownClosedEventHandler = (ToolStripDropDownClosedEventHandler)base.Events[ToolStripDropDown.EventClosed];
			if (toolStripDropDownClosedEventHandler != null)
			{
				toolStripDropDownClosedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Closing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripDropDownClosingEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB5 RID: 15797 RVA: 0x0010CD28 File Offset: 0x0010AF28
		protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e)
		{
			ToolStripDropDownClosingEventHandler toolStripDropDownClosingEventHandler = (ToolStripDropDownClosingEventHandler)base.Events[ToolStripDropDown.EventClosing];
			if (toolStripDropDownClosingEventHandler != null)
			{
				toolStripDropDownClosingEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB6 RID: 15798 RVA: 0x0010CD56 File Offset: 0x0010AF56
		protected override void OnHandleCreated(EventArgs e)
		{
			base.UpdateStyles();
			base.OnHandleCreated(e);
			this.UpdateLayered();
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStrip.ItemClicked" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripItemClickedEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB7 RID: 15799 RVA: 0x0010CD6C File Offset: 0x0010AF6C
		protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
		{
			try
			{
				base.OnItemClicked(e);
			}
			finally
			{
				ToolStripDropDownItem toolStripDropDownItem = e.ClickedItem as ToolStripDropDownItem;
				if (this.AutoClose && (toolStripDropDownItem == null || (toolStripDropDownItem is ToolStripSplitButton && !toolStripDropDownItem.DropDown.Visible) || !toolStripDropDownItem.HasDropDownItems))
				{
					this.Close(ToolStripDropDownCloseReason.ItemClicked);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB8 RID: 15800 RVA: 0x0010CDD0 File Offset: 0x0010AFD0
		protected override void OnLayout(LayoutEventArgs e)
		{
			this.AdjustSize();
			base.OnLayout(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Opening" /> event.</summary>
		/// <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DB9 RID: 15801 RVA: 0x0010CDE0 File Offset: 0x0010AFE0
		protected virtual void OnOpening(CancelEventArgs e)
		{
			CancelEventHandler cancelEventHandler = (CancelEventHandler)base.Events[ToolStripDropDown.EventOpening];
			if (cancelEventHandler != null)
			{
				cancelEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Opened" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06003DBA RID: 15802 RVA: 0x0010CE10 File Offset: 0x0010B010
		protected virtual void OnOpened(EventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupStart, -1);
			}
			EventHandler eventHandler = (EventHandler)base.Events[ToolStripDropDown.EventOpened];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.VisibleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06003DBB RID: 15803 RVA: 0x0010CE64 File Offset: 0x0010B064
		protected override void OnVisibleChanged(EventArgs e)
		{
			if (this.Location != this.displayLocation)
			{
				this.Location = this.displayLocation;
				this.displayLocation = this.Location;
			}
			if (this.AutoScroll || base.LayoutRequired)
			{
				base.OnVisibleChanged(e);
				return;
			}
			base.SuspendLayout();
			try
			{
				base.OnVisibleChanged(e);
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06003DBC RID: 15804 RVA: 0x0010CEDC File Offset: 0x0010B0DC
		protected override void OnParentChanged(EventArgs e)
		{
			base.OnParentChanged(e);
			Rectangle bounds = base.Bounds;
			this.SetBoundsCore(bounds.X, bounds.Y, bounds.Width, bounds.Height, BoundsSpecified.Location);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> event.</summary>
		/// <param name="mea">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06003DBD RID: 15805 RVA: 0x0010CF1C File Offset: 0x0010B11C
		protected override void OnMouseUp(MouseEventArgs mea)
		{
			base.OnMouseUp(mea);
			if (!base.ClientRectangle.Contains(mea.Location))
			{
				bool flag = true;
				if (this.OwnerToolStrip != null && this.OwnerItem != null && this.OwnerItem.Bounds.Contains(WindowsFormsUtils.TranslatePoint(mea.Location, this, this.OwnerToolStrip)))
				{
					flag = false;
				}
				if (flag)
				{
					this.DismissAll();
					this.CancelAutoExpand();
				}
			}
		}

		// Token: 0x06003DBE RID: 15806 RVA: 0x0010CF90 File Offset: 0x0010B190
		internal void OnOwnerItemFontChanged(EventArgs e)
		{
			if (this.IsAutoGenerated)
			{
				using (new LayoutTransaction(this, this.OwnerItem, PropertyNames.Font))
				{
					this.OnFontChanged(e);
				}
			}
		}

		// Token: 0x06003DBF RID: 15807 RVA: 0x0010CFDC File Offset: 0x0010B1DC
		internal void SelectPreviousToolStrip()
		{
			ToolStripItem toolStripItem = this.OwnerItem;
			base.Hide();
			if (toolStripItem != null)
			{
				toolStripItem.Select();
				if (!AccessibilityImprovements.UseLegacyToolTipDisplay)
				{
					KeyboardToolTipStateMachine.Instance.NotifyAboutGotFocus(toolStripItem);
				}
				if (this.OwnerToolStrip != null && !this.OwnerToolStrip.IsDropDown)
				{
					if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this.OwnerToolStrip)
					{
						ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this.OwnerToolStrip);
					}
					this.OwnerToolStrip.MenuAutoExpand = false;
					if (this.OwnerToolStrip.CanSelect)
					{
						ToolStripManager.ModalMenuFilter.ExitMenuMode();
						return;
					}
				}
			}
			else
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x06003DC0 RID: 15808 RVA: 0x0010D064 File Offset: 0x0010B264
		internal override bool ProcessArrowKey(Keys keyCode)
		{
			ToolStripMenuItem.MenuTimer.Cancel();
			if (keyCode == Keys.Left || keyCode == Keys.Right)
			{
				bool rightAlignedMenus = SystemInformation.RightAlignedMenus;
				bool flag = (keyCode == Keys.Left && rightAlignedMenus) || (keyCode == Keys.Right && !rightAlignedMenus);
				if (!this.IsFirstDropDown && !flag)
				{
					this.Visible = false;
					return true;
				}
				bool flag2 = false;
				if (base.LayoutStyle == ToolStripLayoutStyle.Flow)
				{
					flag2 = (FlowLayout.GetFlowDirection(this) == FlowDirection.TopDown && !FlowLayout.GetWrapContents(this));
				}
				if (flag2)
				{
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
					bool flag3 = this.OwnerItem != null && this.OwnerItem.IsOnOverflow;
					if (flag || !flag3)
					{
						this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
						this.DismissAll();
					}
					else if (flag3)
					{
						this.Visible = false;
					}
					if (toplevelOwnerToolStrip != null && toplevelOwnerItem != null)
					{
						if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != toplevelOwnerToolStrip)
						{
							ToolStripManager.ModalMenuFilter.SetActiveToolStrip(toplevelOwnerToolStrip);
						}
						toplevelOwnerToolStrip.SelectNextToolStripItem(toplevelOwnerItem, flag);
					}
					return true;
				}
			}
			return base.ProcessArrowKey(keyCode);
		}

		/// <summary>Processes a dialog box key.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///     <see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x06003DC1 RID: 15809 RVA: 0x0010D150 File Offset: 0x0010B350
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			if (this.OwnerItem != null && this.OwnerItem.IsInDesignMode)
			{
				return false;
			}
			if (this.AutoClose && this.Visible)
			{
				if (ToolStripManager.IsMenuKey(keyData))
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.DismissAll();
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					if (toplevelOwnerToolStrip != null)
					{
						toplevelOwnerToolStrip.RestoreFocusInternal();
						ToolStripManager.ModalMenuFilter.MenuKeyToggle = true;
					}
					ToolStripManager.ModalMenuFilter.ExitMenuMode();
					return true;
				}
				if ((keyData & Keys.KeyCode) == Keys.Escape)
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.SelectPreviousToolStrip();
					return true;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		/// <summary>Processes a dialog box character.</summary>
		/// <param name="charCode">The character to process.</param>
		/// <returns>
		///     <see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x06003DC2 RID: 15810 RVA: 0x0010D1D7 File Offset: 0x0010B3D7
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogChar(char charCode)
		{
			return ((this.OwnerItem == null || this.OwnerItem.Pressed) && charCode != ' ' && this.ProcessMnemonic(charCode)) || base.ProcessDialogChar(charCode);
		}

		/// <summary>Processes a mnemonic character.</summary>
		/// <param name="charCode">The character to process.</param>
		/// <returns>
		///     <see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x06003DC3 RID: 15811 RVA: 0x0010D205 File Offset: 0x0010B405
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected internal override bool ProcessMnemonic(char charCode)
		{
			return this.CanProcessMnemonic() && base.ProcessMnemonic(charCode);
		}

		// Token: 0x06003DC4 RID: 15812 RVA: 0x0010D218 File Offset: 0x0010B418
		internal override void ProcessDuplicateMnemonic(ToolStripItem item, char charCode)
		{
			if (!this.CanProcessMnemonic())
			{
				return;
			}
			if (item != null)
			{
				if (this.IsRestrictedWindow)
				{
					item.ProcessMnemonic(charCode);
					return;
				}
				base.ProcessDuplicateMnemonic(item, charCode);
			}
		}

		// Token: 0x06003DC5 RID: 15813 RVA: 0x0010D23F File Offset: 0x0010B43F
		internal override void RecreateHandleCore()
		{
			if (this.Visible)
			{
				this.ReparentToDropDownOwnerWindow();
			}
			base.RecreateHandleCore();
			if (this.Visible)
			{
				this.ReparentToActiveToolStripWindow();
			}
		}

		// Token: 0x06003DC6 RID: 15814 RVA: 0x0010D263 File Offset: 0x0010B463
		private void ResetDropShadowEnabled()
		{
			this.DropShadowEnabled = true;
		}

		// Token: 0x06003DC7 RID: 15815 RVA: 0x0010D26C File Offset: 0x0010B46C
		private void ReparentToActiveToolStripWindow()
		{
			ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, ToolStripManager.ModalMenuFilter.ActiveHwnd);
		}

		// Token: 0x06003DC8 RID: 15816 RVA: 0x0010D290 File Offset: 0x0010B490
		private void ReparentToDropDownOwnerWindow()
		{
			NativeWindow dropDownOwnerWindow = this.DropDownOwnerWindow;
			HandleRef dwNewLong = new HandleRef(dropDownOwnerWindow, dropDownOwnerWindow.Handle);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, dwNewLong);
		}

		// Token: 0x06003DC9 RID: 15817 RVA: 0x0010D2C7 File Offset: 0x0010B4C7
		internal override void ResetScaling(int newDpi)
		{
			base.ResetScaling(newDpi);
			CommonProperties.xClearPreferredSizeCache(this);
			this.scaledDefaultPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDown.defaultPadding, newDpi);
		}

		/// <summary>This method is not relevant to this class.</summary>
		/// <param name="dx">The horizontal scaling factor.</param>
		/// <param name="dy">The vertical scaling factor.</param>
		// Token: 0x06003DCA RID: 15818 RVA: 0x0010D2E8 File Offset: 0x0010B4E8
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override void ScaleCore(float dx, float dy)
		{
			base.SuspendLayout();
			try
			{
				Size clientSize = base.ClientSize;
				Size minimumSize = this.MinimumSize;
				Size maximumSize = this.MaximumSize;
				base.ClientSize = base.ScaleSize(clientSize, dx, dy);
				if (!this.MinimumSize.IsEmpty)
				{
					this.MinimumSize = base.ScaleSize(minimumSize, dx, dy);
				}
				if (!this.MaximumSize.IsEmpty)
				{
					this.MaximumSize = base.ScaleSize(maximumSize, dx, dy);
				}
				base.ScaleDockPadding(dx, dy);
				foreach (object obj in base.Controls)
				{
					Control control = (Control)obj;
					if (control != null)
					{
						control.Scale(dx, dy);
					}
				}
			}
			finally
			{
				base.ResumeLayout();
			}
		}

		/// <summary>Scales a control's location, size, padding and margin.</summary>
		/// <param name="factor">The factor by which the height and width of the control will be scaled.</param>
		/// <param name="specified">A value that specifies the bounds of the control to use when defining its size and position.</param>
		// Token: 0x06003DCB RID: 15819 RVA: 0x0010D3D4 File Offset: 0x0010B5D4
		protected override void ScaleControl(SizeF factor, BoundsSpecified specified)
		{
			base.ScaleControl(factor, specified);
			Size minimumSize = this.MinimumSize;
			Size maximumSize = this.MaximumSize;
			if (!this.MinimumSize.IsEmpty)
			{
				this.MinimumSize = base.ScaleSize(minimumSize, factor.Width, factor.Height);
			}
			if (!this.MaximumSize.IsEmpty)
			{
				this.MaximumSize = base.ScaleSize(maximumSize, factor.Width, factor.Height);
			}
		}

		// Token: 0x06003DCC RID: 15820 RVA: 0x0010D44D File Offset: 0x0010B64D
		internal void SetAutoGeneratedInternal(bool autoGenerated)
		{
			this.isAutoGenerated = autoGenerated;
		}

		/// <summary>Performs the work of setting the specified bounds of this control.</summary>
		/// <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control. </param>
		/// <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control. </param>
		/// <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control. </param>
		/// <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control. </param>
		/// <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values. </param>
		// Token: 0x06003DCD RID: 15821 RVA: 0x0010D458 File Offset: 0x0010B658
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			Rectangle dropDownBounds = new Rectangle(x, y, width, height);
			dropDownBounds = this.GetDropDownBounds(dropDownBounds);
			base.SetBoundsCore(dropDownBounds.X, dropDownBounds.Y, dropDownBounds.Width, dropDownBounds.Height, specified);
		}

		// Token: 0x06003DCE RID: 15822 RVA: 0x0010D4A0 File Offset: 0x0010B6A0
		private void SetTopLevelStyle(bool value)
		{
			if (base.IsHandleCreated)
			{
				int num = base.WindowStyle;
				if (value)
				{
					num &= -1073741825;
					num |= int.MinValue;
				}
				else
				{
					num &= int.MaxValue;
					num |= 1073741824;
				}
				base.WindowStyle = num;
			}
		}

		/// <summary>Adjusts the size of the owner <see cref="T:System.Windows.Forms.ToolStrip" /> to accommodate the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> if the owner <see cref="T:System.Windows.Forms.ToolStrip" /> is currently displayed, or clears and resets active <see cref="T:System.Windows.Forms.ToolStripDropDown" /> child controls of the <see cref="T:System.Windows.Forms.ToolStrip" /> if the <see cref="T:System.Windows.Forms.ToolStrip" /> is not currently displayed.</summary>
		/// <param name="visible">
		///       <see langword="true" /> if the owner <see cref="T:System.Windows.Forms.ToolStrip" /> is currently displayed; otherwise, <see langword="false" />. </param>
		// Token: 0x06003DCF RID: 15823 RVA: 0x0010D4E8 File Offset: 0x0010B6E8
		protected override void SetVisibleCore(bool visible)
		{
			if (this.state[ToolStripDropDown.stateInSetVisibleCore])
			{
				return;
			}
			this.state[ToolStripDropDown.stateInSetVisibleCore] = true;
			try
			{
				if (visible)
				{
					if (base.LayoutRequired)
					{
						LayoutTransaction.DoLayout(this, this, PropertyNames.Visible);
					}
					bool flag = true;
					try
					{
						IntPtr foregroundWindow = UnsafeNativeMethods.GetForegroundWindow();
						CancelEventArgs cancelEventArgs = new CancelEventArgs(this.DisplayedItems.Count == 0);
						this.OnOpening(cancelEventArgs);
						flag = cancelEventArgs.Cancel;
						if (!flag)
						{
							if (this.TopLevel)
							{
								this.ReparentToActiveToolStripWindow();
							}
							if (this.OwnerToolStrip != null)
							{
								this.OwnerToolStrip.ActiveDropDowns.Add(this);
								this.OwnerToolStrip.SnapMouseLocation();
								if (this.OwnerToolStrip.CaptureInternal)
								{
									base.CaptureInternal = true;
								}
							}
							base.SetVisibleCore(visible);
							if (this.TopLevel)
							{
								this.ApplyTopMost(true);
							}
							else if (base.IsHandleCreated && SafeNativeMethods.IsWindowEnabled(new HandleRef(this, base.Handle)))
							{
								SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), NativeMethods.HWND_TOP, 0, 0, 0, 0, 19);
							}
						}
						return;
					}
					finally
					{
						if (!flag)
						{
							this.OnOpened(new EventArgs());
						}
					}
				}
				if (this.GetVisibleCore())
				{
					ToolStripDropDownCloseReason toolStripDropDownCloseReason = this.closeReason;
					this.ResetCloseReason();
					ToolStripDropDownClosingEventArgs toolStripDropDownClosingEventArgs = new ToolStripDropDownClosingEventArgs(toolStripDropDownCloseReason);
					if (toolStripDropDownClosingEventArgs.CloseReason != ToolStripDropDownCloseReason.CloseCalled)
					{
						toolStripDropDownClosingEventArgs.Cancel = !this.AutoClose;
					}
					else
					{
						toolStripDropDownClosingEventArgs.Cancel = false;
					}
					try
					{
						this.OnClosing(toolStripDropDownClosingEventArgs);
						return;
					}
					finally
					{
						if (!toolStripDropDownClosingEventArgs.Cancel || this.IsRestrictedWindow)
						{
							this.DismissActiveDropDowns();
							ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
							ToolStrip toolStrip = null;
							if (this.OwnerItem != null)
							{
								toolStrip = this.OwnerItem.ParentInternal;
							}
							if (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.AppClicked || toolStripDropDownCloseReason == ToolStripDropDownCloseReason.ItemClicked || (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.CloseCalled && toplevelOwnerToolStrip == toolStrip) || (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.AppFocusChange && toplevelOwnerToolStrip == toolStrip))
							{
								this.CancelAutoExpand();
							}
							if (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.ItemClicked)
							{
								this.saveSourceControl = true;
								this.DismissAll();
								ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
								if (toplevelOwnerItem != null)
								{
									toplevelOwnerItem.Unselect();
								}
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
								ToolStripManager.ModalMenuFilter.ExitMenuMode();
							}
							else
							{
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
							}
							Rectangle bounds = base.Bounds;
							try
							{
								base.SetVisibleCore(visible);
							}
							finally
							{
								if (this.OwnerToolStrip != null)
								{
									this.OwnerToolStrip.ActiveDropDowns.Remove(this);
								}
								base.ActiveDropDowns.Clear();
								if (base.CaptureInternal)
								{
									base.CaptureInternal = false;
								}
							}
							ToolStripDropDownClosedEventArgs e = new ToolStripDropDownClosedEventArgs(toolStripDropDownCloseReason);
							this.OnClosed(e);
							if (this.TopLevel && (!base.IsDisposed || !base.Disposing))
							{
								this.ReparentToDropDownOwnerWindow();
							}
							if (!this.saveSourceControl)
							{
								this.SourceControlInternal = null;
							}
							if (!base.DesignMode && this.IsFirstDropDown && this.OwnerItem != null && this.TopLevel)
							{
								ToolStrip toplevelOwnerToolStrip2 = this.GetToplevelOwnerToolStrip();
								if (toplevelOwnerToolStrip2 != null && !toplevelOwnerToolStrip2.IsDisposed && !toplevelOwnerToolStrip2.Disposing)
								{
									bounds.Location = toplevelOwnerToolStrip2.PointToClient(bounds.Location);
									bounds.Intersect(toplevelOwnerToolStrip2.ClientRectangle);
									if (bounds.Width > 0 && bounds.Height > 0)
									{
										toplevelOwnerToolStrip2.Invalidate(bounds);
										toplevelOwnerToolStrip2.Update();
									}
								}
							}
						}
					}
				}
				ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
			}
			finally
			{
				this.state[ToolStripDropDown.stateInSetVisibleCore] = false;
				this.saveSourceControl = false;
			}
		}

		// Token: 0x06003DD0 RID: 15824 RVA: 0x0010D884 File Offset: 0x0010BA84
		private bool ShouldSerializeDefaultDropDownDirection()
		{
			return this.childDropDownDirection != ToolStripDropDownDirection.Default;
		}

		// Token: 0x06003DD1 RID: 15825 RVA: 0x0010D894 File Offset: 0x0010BA94
		private void UpdateLayered()
		{
			if (this.state[ToolStripDropDown.stateLayered] && base.IsHandleCreated && this.TopLevel && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows) && !UnsafeNativeMethods.SetLayeredWindowAttributes(new HandleRef(this, base.Handle), 0, this.OpacityAsByte, 2))
			{
				throw new Win32Exception();
			}
		}

		/// <summary>Displays the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control in its default position.</summary>
		// Token: 0x06003DD2 RID: 15826 RVA: 0x0010D8F7 File Offset: 0x0010BAF7
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new void Show()
		{
			base.Show();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control location.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x06003DD3 RID: 15827 RVA: 0x0010D900 File Offset: 0x0010BB00
		public void Show(Control control, Point position)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			if (this.OwnerItem == null && control.RightToLeft == RightToLeft.Yes)
			{
				this.AdjustSize();
				position.Offset(control.IsMirrored ? base.Width : (-base.Width), 0);
			}
			this.displayLocation = control.PointToScreen(position);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control at the specified location and with the specified direction relative to the parent control.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <param name="direction">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x06003DD4 RID: 15828 RVA: 0x0010D978 File Offset: 0x0010BB78
		public void Show(Control control, Point position, ToolStripDropDownDirection direction)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.displayLocation = this.CalculateDropDownLocation(control.PointToScreen(position), direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control's horizontal and vertical screen coordinates.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="x">The horizontal screen coordinate of the control, in pixels.</param>
		/// <param name="y">The vertical screen coordinate of the control, in pixels.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x06003DD5 RID: 15829 RVA: 0x0010D9C8 File Offset: 0x0010BBC8
		public void Show(Control control, int x, int y)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.Show(control, new Point(x, y));
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified screen location.</summary>
		/// <param name="screenLocation">The horizontal and vertical location of the screen's upper-left corner, in pixels.</param>
		// Token: 0x06003DD6 RID: 15830 RVA: 0x0010D9ED File Offset: 0x0010BBED
		public void Show(Point screenLocation)
		{
			this.displayLocation = screenLocation;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control location and with the specified direction relative to the parent control.</summary>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <param name="direction">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</param>
		// Token: 0x06003DD7 RID: 15831 RVA: 0x0010DA08 File Offset: 0x0010BC08
		public void Show(Point position, ToolStripDropDownDirection direction)
		{
			this.displayLocation = this.CalculateDropDownLocation(position, direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified screen coordinates.</summary>
		/// <param name="x">The horizontal screen coordinate, in pixels.</param>
		/// <param name="y">The vertical screen coordinate, in pixels.</param>
		// Token: 0x06003DD8 RID: 15832 RVA: 0x0010DA3D File Offset: 0x0010BC3D
		public void Show(int x, int y)
		{
			this.displayLocation = new Point(x, y);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x06003DD9 RID: 15833 RVA: 0x0010DA5E File Offset: 0x0010BC5E
		private void ShowCore()
		{
			this.Show();
		}

		// Token: 0x06003DDA RID: 15834 RVA: 0x0010DA66 File Offset: 0x0010BC66
		private bool ShouldSerializeDropShadowEnabled()
		{
			return !this.dropShadowEnabled;
		}

		// Token: 0x06003DDB RID: 15835 RVA: 0x0010DA71 File Offset: 0x0010BC71
		internal override bool ShouldSerializeLayoutStyle()
		{
			return base.LayoutStyle != ToolStripLayoutStyle.VerticalStackWithOverflow;
		}

		// Token: 0x06003DDC RID: 15836 RVA: 0x0010DA80 File Offset: 0x0010BC80
		internal void UnassignDropDownItem()
		{
			int val = this.countDropDownItemsAssignedTo - 1;
			this.countDropDownItemsAssignedTo = val;
			this.countDropDownItemsAssignedTo = Math.Max(val, 0);
		}

		/// <summary>Processes Windows messages.</summary>
		/// <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
		// Token: 0x06003DDD RID: 15837 RVA: 0x0010DAAC File Offset: 0x0010BCAC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			if (m.Msg >= 256 && m.Msg <= 264 && this.IsRestrictedWindow)
			{
				this.DefWndProc(ref m);
				return;
			}
			int msg = m.Msg;
			if (msg == 6)
			{
				if ((int)m.WParam == 1 && this.Visible && ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this)
				{
					ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
				}
				base.WndProc(ref m);
				return;
			}
			if (msg == 134)
			{
				this.WmNCActivate(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x06003DDE RID: 15838 RVA: 0x0010DB34 File Offset: 0x0010BD34
		internal void DismissAll()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			firstDropDown.closeReason = this.closeReason;
			firstDropDown.DismissActiveDropDowns();
			if (!LocalAppContextSwitches.UseLegacyContextMenuStripSourceControlValue)
			{
				firstDropDown.saveSourceControl = this.saveSourceControl;
			}
			firstDropDown.Visible = false;
		}

		// Token: 0x06003DDF RID: 15839 RVA: 0x0010DB74 File Offset: 0x0010BD74
		private void DismissActiveDropDowns()
		{
			int count = base.ActiveDropDowns.Count;
			if (count == 1)
			{
				ToolStripDropDown toolStripDropDown = base.ActiveDropDowns[0] as ToolStripDropDown;
				if (toolStripDropDown != null)
				{
					toolStripDropDown.Visible = false;
					return;
				}
			}
			else
			{
				ArrayList arrayList = base.ActiveDropDowns.Clone() as ArrayList;
				for (int i = 0; i < arrayList.Count; i++)
				{
					ToolStripDropDown toolStripDropDown2 = arrayList[i] as ToolStripDropDown;
					if (toolStripDropDown2 != null)
					{
						toolStripDropDown2.Visible = false;
					}
				}
			}
		}

		// Token: 0x06003DE0 RID: 15840 RVA: 0x0010DBEC File Offset: 0x0010BDEC
		private void WmNCActivate(ref Message m)
		{
			if (m.WParam != IntPtr.Zero)
			{
				if (!this.sendingActivateMessage)
				{
					this.sendingActivateMessage = true;
					try
					{
						HandleRef activeHwnd = ToolStripManager.ModalMenuFilter.ActiveHwnd;
						UnsafeNativeMethods.SendMessage(activeHwnd, 134, (IntPtr)1, NativeMethods.InvalidIntPtr);
						SafeNativeMethods.RedrawWindow(activeHwnd, null, NativeMethods.NullHandleRef, 1025);
						m.WParam = (IntPtr)1;
					}
					finally
					{
						this.sendingActivateMessage = false;
					}
				}
				this.DefWndProc(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x17000F75 RID: 3957
		// (get) Token: 0x06003DE1 RID: 15841 RVA: 0x0010DC80 File Offset: 0x0010BE80
		internal bool IsFirstDropDown
		{
			get
			{
				return !(this.OwnerToolStrip is ToolStripDropDown);
			}
		}

		// Token: 0x06003DE2 RID: 15842 RVA: 0x0010DC90 File Offset: 0x0010BE90
		internal ToolStripDropDown GetFirstDropDown()
		{
			ToolStripDropDown toolStripDropDown = this;
			for (ToolStripDropDown toolStripDropDown2 = toolStripDropDown.OwnerToolStrip as ToolStripDropDown; toolStripDropDown2 != null; toolStripDropDown2 = (toolStripDropDown.OwnerToolStrip as ToolStripDropDown))
			{
				toolStripDropDown = toolStripDropDown2;
			}
			return toolStripDropDown;
		}

		// Token: 0x06003DE3 RID: 15843 RVA: 0x0010DCC0 File Offset: 0x0010BEC0
		internal static ToolStripDropDown GetFirstDropDown(ToolStrip start)
		{
			if (start == null || !start.IsDropDown)
			{
				return null;
			}
			ToolStripDropDown toolStripDropDown = start as ToolStripDropDown;
			return toolStripDropDown.GetFirstDropDown();
		}

		// Token: 0x040023B0 RID: 9136
		private ToolStripItem ownerItem;

		// Token: 0x040023B1 RID: 9137
		private bool isAutoGenerated;

		// Token: 0x040023B2 RID: 9138
		private Point dropDownLocation = Point.Empty;

		// Token: 0x040023B3 RID: 9139
		private bool dropShadowEnabled = true;

		// Token: 0x040023B4 RID: 9140
		private bool autoClose = true;

		// Token: 0x040023B5 RID: 9141
		private bool autoSize = true;

		// Token: 0x040023B6 RID: 9142
		private int countDropDownItemsAssignedTo;

		// Token: 0x040023B7 RID: 9143
		private BitVector32 state;

		// Token: 0x040023B8 RID: 9144
		private Point displayLocation = new Point(0, 0);

		// Token: 0x040023B9 RID: 9145
		private bool saveSourceControl;

		// Token: 0x040023BA RID: 9146
		private ToolStripDropDownDirection childDropDownDirection = ToolStripDropDownDirection.Default;

		// Token: 0x040023BB RID: 9147
		private ToolStripDropDownCloseReason closeReason;

		// Token: 0x040023BC RID: 9148
		private static readonly int PropOpacity = PropertyStore.CreateKey();

		// Token: 0x040023BD RID: 9149
		private static readonly int PropDDRightToLeft = PropertyStore.CreateKey();

		// Token: 0x040023BE RID: 9150
		private static readonly int PropSourceControl = PropertyStore.CreateKey();

		// Token: 0x040023BF RID: 9151
		private static readonly object EventOpening = new object();

		// Token: 0x040023C0 RID: 9152
		private static readonly object EventOpened = new object();

		// Token: 0x040023C1 RID: 9153
		private static readonly object EventClosed = new object();

		// Token: 0x040023C2 RID: 9154
		private static readonly object EventClosing = new object();

		// Token: 0x040023C3 RID: 9155
		private static readonly object ToolStripParkingWindowKey = new object();

		// Token: 0x040023C4 RID: 9156
		private static readonly Padding defaultPadding = new Padding(1, 2, 1, 2);

		// Token: 0x040023C5 RID: 9157
		private Padding scaledDefaultPadding = ToolStripDropDown.defaultPadding;

		// Token: 0x040023C6 RID: 9158
		internal static TraceSwitch DropDownActivateDebug;

		// Token: 0x040023C7 RID: 9159
		internal static TraceSwitch DropDownDebugBounds;

		// Token: 0x040023C8 RID: 9160
		private static readonly int stateLayered = BitVector32.CreateMask();

		// Token: 0x040023C9 RID: 9161
		private static readonly int stateAllowTransparency = BitVector32.CreateMask(ToolStripDropDown.stateLayered);

		// Token: 0x040023CA RID: 9162
		private static readonly int stateIsRestrictedWindow = BitVector32.CreateMask(ToolStripDropDown.stateAllowTransparency);

		// Token: 0x040023CB RID: 9163
		private static readonly int stateIsRestrictedWindowChecked = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindow);

		// Token: 0x040023CC RID: 9164
		private static readonly int stateNotWorkingAreaConstrained = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindowChecked);

		// Token: 0x040023CD RID: 9165
		private static readonly int stateInSetVisibleCore = BitVector32.CreateMask(ToolStripDropDown.stateNotWorkingAreaConstrained);

		// Token: 0x040023CE RID: 9166
		private bool sendingActivateMessage;

		/// <summary>Provides information about the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control to accessibility client applications.</summary>
		// Token: 0x02000734 RID: 1844
		[ComVisible(true)]
		public class ToolStripDropDownAccessibleObject : ToolStrip.ToolStripAccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" /> class. </summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.ToolStripDropDown" /> that owns the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</param>
			// Token: 0x06006104 RID: 24836 RVA: 0x0018D09A File Offset: 0x0018B29A
			public ToolStripDropDownAccessibleObject(ToolStripDropDown owner) : base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</summary>
			/// <returns>The string representing the name.</returns>
			// Token: 0x1700172A RID: 5930
			// (get) Token: 0x06006105 RID: 24837 RVA: 0x0018D0AC File Offset: 0x0018B2AC
			// (set) Token: 0x06006106 RID: 24838 RVA: 0x0018D111 File Offset: 0x0018B311
			public override string Name
			{
				get
				{
					string text = this.owner.AccessibleName;
					if (text != null)
					{
						return text;
					}
					text = "DropDown";
					if (this.owner.OwnerItem != null && this.owner.OwnerItem.AccessibilityObject.Name != null)
					{
						text = this.owner.OwnerItem.AccessibilityObject.Name + text;
					}
					return text;
				}
				set
				{
					this.owner.AccessibleName = value;
				}
			}

			/// <summary>Gets the role of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Table" /> value.</returns>
			// Token: 0x1700172B RID: 5931
			// (get) Token: 0x06006107 RID: 24839 RVA: 0x0018D120 File Offset: 0x0018B320
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = base.Owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.MenuPopup;
				}
			}

			// Token: 0x04004173 RID: 16755
			private ToolStripDropDown owner;
		}
	}
}
